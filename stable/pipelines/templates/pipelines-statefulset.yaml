apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "pipelines.services.name" . }}
  labels:
    {{- include "pipelines.labels" . | nindent 4 }}
    {{- include "pipelines.common.labels" . | nindent 4 }}
    {{- with .Values.pipelines.labels }}
{{ toYaml . | indent 4 }}
    {{- end }}
{{- with .Values.pipelines.statefulset.annotations }}
  annotations:
{{ toYaml . | indent 4 }}
{{- end }}
spec:
  serviceName: {{ include "pipelines.services.name" . }}-headless
{{- if not .Values.pipelines.autoscaling.enabled }}
  replicas: {{ .Values.pipelines.replicaCount }}
{{- end }}
  updateStrategy:
    type: {{ .Values.pipelines.updateStrategy }}
  selector:
    matchLabels:
      {{- include "pipelines.selectorLabels" . | nindent 6 }}
      component: {{ include "pipelines.services.name" . }}
  template:
    metadata:
      labels:
        {{- include "pipelines.selectorLabels" . | nindent 8 }}
        component: {{ include "pipelines.services.name" . }}
        {{- include "pipelines.common.labels" . | nindent 8 }}
        {{- with .Values.pipelines.labels }}
{{ toYaml . | indent 8 }}
        {{- end }}
      annotations:
      {{- if not .Values.pipelines.unifiedSecretInstallation }}
        checksum/systemyaml: {{ include (print $.Template.BasePath "/pipelines-system-yaml.yaml") . | sha256sum }}
        checksum/secretdb: {{ include (print $.Template.BasePath "/database-secret.yaml") . | sha256sum }}
        checksum/secretaws: {{ include (print $.Template.BasePath "/buildplane-secret-aws.yaml") . | sha256sum }}
        checksum/secretk8s: {{ include (print $.Template.BasePath "/buildplane-secret-k8s.yaml") . | sha256sum }}
      {{- else }}
        checksum/pipelines-unified-secret: {{ include (print $.Template.BasePath "/pipelines-unified-secret.yaml") . | sha256sum }}
      {{- end }}
        checksum/configaws: {{ include (print $.Template.BasePath "/buildplane-config-aws.yaml") . | sha256sum }}
        checksum/configk8s: {{ include (print $.Template.BasePath "/buildplane-config-k8s.yaml") . | sha256sum }}
        checksum/configfilebeat: {{ include (print $.Template.BasePath "/filebeat-config.yaml") . | sha256sum }}
      {{- range $key, $value := .Values.pipelines.annotations }}
        {{ $key }}: {{ $value | quote }}
      {{- end }}
    spec:
    {{- if .Values.pipelines.schedulerName }}
      schedulerName: {{ .Values.pipelines.schedulerName | quote }}
    {{- end }}
    {{- if .Values.pipelines.priorityClass.existingPriorityClass }}
      priorityClassName: {{ .Values.pipelines.priorityClass.existingPriorityClass }}
    {{- else -}}
      {{- if .Values.pipelines.priorityClass.create }}
      priorityClassName: {{ default (include "pipelines.fullname" .) .Values.pipelines.priorityClass.name }}
      {{- end }}
    {{- end }}
      serviceAccountName: {{ template "pipelines.serviceAccountName" . }}
    {{- if or .Values.imagePullSecrets .Values.global.imagePullSecrets }}
{{- include "pipelines.imagePullSecrets" . | nindent 6 }}
    {{- end }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
      initContainers:
          {{- if or .Values.pipelines.customInitContainersBegin .Values.global.customInitContainersBegin }}
{{ tpl (include "pipelines.customInitContainersBegin" .)  . | indent 8 }}
          {{- end }}
        - name: copy-system-yaml
          image: "{{ .Values.initContainer.image }}"
          imagePullPolicy: {{ .Values.initContainer.pullPolicy }}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - NET_RAW
          resources:
{{ toYaml .Values.initContainers.resources | nindent 12 }}
          command:
          - '/bin/sh'
          - '-c'
          - >
            echo "Copy system.yaml to {{ .Values.pipelines.mountPath }}";
            {{- if .Values.systemYamlOverride.existingSecret }}
            cp -fv /tmp/etc/{{ .Values.systemYamlOverride.dataKey }} {{ .Values.pipelines.mountPath }}/system.yaml;
            {{- else }}
            cp -fv /tmp/etc/system.yaml {{ .Values.pipelines.mountPath }}/system.yaml;
            {{- end }}
          volumeMounts:
          - name: jfrog-pipelines-folder
            mountPath: {{ .Values.pipelines.mountPath }}
        {{- if or .Values.systemYamlOverride.existingSecret .Values.pipelines.systemYaml }}
          {{- if or (not .Values.pipelines.unifiedSecretInstallation) .Values.systemYamlOverride.existingSecret }}
          - name: systemyaml
          {{- else }}
          - name: {{ include "pipelines.unifiedCustomSecretVolumeName" . }}
          {{- end }}
            {{- if .Values.systemYamlOverride.existingSecret }}
            mountPath: "/tmp/etc/{{.Values.systemYamlOverride.dataKey}}"
            subPath: {{ .Values.systemYamlOverride.dataKey }}
            {{- else if .Values.pipelines.systemYaml }}
            mountPath: "/tmp/etc/system.yaml"
            subPath: system.yaml
            {{- end }}
        {{- end }}
      {{- if or .Values.pipelines.customCertificates.enabled .Values.global.customCertificates.enabled }}
        - name: copy-custom-certificates
          image: "{{ .Values.initContainer.image }}"
          imagePullPolicy: {{ .Values.initContainer.pullPolicy }}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - NET_RAW
          resources:
{{ toYaml .Values.initContainers.resources | nindent 12 }}
          command:
          - '/bin/sh'
          - '-c'
          - >
{{ include "pipelines.copyCustomCerts" . | indent 12 }}
          volumeMounts:
          - name: jfrog-pipelines-folder
            mountPath: {{ .Values.pipelines.mountPath }}
          - name: ca-certs
            mountPath: "/tmp/certs"
      {{- end }}
        - name: change-ownership
          image: "{{ .Values.initContainer.image }}"
          imagePullPolicy: {{ .Values.initContainer.pullPolicy }}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
                - CHOWN
              drop:
                - NET_RAW
          resources:
{{ toYaml .Values.initContainers.resources | nindent 12 }}
          command:
          - '/bin/sh'
          - '-c'
          - >
            echo "change ownership of {{ .Values.pipelines.mountPath }} directory";
            chown -R 1066:1066 {{ .Values.pipelines.mountPath }};
          volumeMounts:
          - name: jfrog-pipelines-folder
            mountPath: {{ .Values.pipelines.mountPath }}
{{- if .Values.vault.enabled }}
  {{- if .Values.waitForDatabase }}
        - name: wait-for-db
          image: {{ include "vault.getImageInfoByValue" (list . "postgresql" ) }}
          imagePullPolicy: {{ .Values.initContainer.pullPolicy }}
          resources:
{{ toYaml .Values.initContainers.resources | nindent 12 }}
          command:
          - 'sh'
          - '-c'
          - >
            echo "Waiting for Postgres to come up...";
            {{- if .Values.postgresql.enabled }}
            echo "{{ .Release.Name }}-postgresql {{ .Values.postgresql.service.port }}";
            until pg_isready -h {{ .Release.Name }}-postgresql -p {{ .Values.postgresql.service.port }} -U pipelines && echo database ok; do
            {{- else }}
            until pg_isready -h {{ tpl .Values.global.postgresql.host . }} -p {{ .Values.global.postgresql.port }}  -U pipelines && echo database ok; do
            {{- end }}
              sleep 1;
            done;
  {{- end }}
        - name: create-vault-table
          image: {{ include "pipelines.getImageInfoByValue" (list . "pipelines" "pipelinesInit" ) }}
          imagePullPolicy: {{ .Values.pipelines.pipelinesInit.image.pullPolicy }}
          resources:
{{ toYaml .Values.initContainers.resources | nindent 12 }}
          env:
            - name: PIPELINES_SHARED_DB_CONNECTIONSTRING
              valueFrom:
                secretKeyRef:
                {{- if not .Values.pipelines.unifiedSecretInstallation }}
                  {{- if .Values.global.postgresql.existingSecret }}
                  name: {{ .Values.global.postgresql.existingSecret }}
                  {{- else }}
                  name: {{ printf "%s-%s" (include "pipelines.fullname" .) "database" }}
                  {{- end }}
                {{- else }}
                  name: "{{ template "pipelines.name" . }}-unified-secret"
                {{- end }}
                  key: postgresql-url
          command:
          - 'sh'
          - '-c'
          - >
            echo "Copy system.yaml to {{ .Values.pipelines.mountPath }}";
            {{- if .Values.systemYamlOverride.existingSecret }}
            cp -fv /tmp/etc/{{ .Values.systemYamlOverride.dataKey }} {{ .Values.pipelines.mountPath }}/system.yaml;
            {{- else }}
            cp -fv /tmp/etc/system.yaml {{ .Values.pipelines.mountPath }}/system.yaml;
            {{- end }}
            echo "Creating Vault Table...";
            ./pipelines-k8s initVault;
          volumeMounts:
          - name: jfrog-pipelines-folder
            mountPath: {{ .Values.pipelines.mountPath }}
        {{- if or .Values.systemYamlOverride.existingSecret .Values.pipelines.systemYaml }}
          {{- if or (not .Values.pipelines.unifiedSecretInstallation) .Values.systemYamlOverride.existingSecret }}
          - name: systemyaml
          {{- else }}
          - name: {{ include "pipelines.unifiedCustomSecretVolumeName" . }}
          {{- end }}
            {{- if .Values.systemYamlOverride.existingSecret }}
            mountPath: "/tmp/etc/{{.Values.systemYamlOverride.dataKey}}"
            subPath: {{ .Values.systemYamlOverride.dataKey }}
            {{- else if .Values.pipelines.systemYaml }}
            mountPath: "/tmp/etc/system.yaml"
            subPath: system.yaml
            {{- end }}
        {{- end }}
{{- end }}
{{- if and .Values.vault.enabled (.Values.access.shouldReadFromVault) (not .Values.access.shouldJustUpdateAccess) }}
        - name: wait-for-vault
          image: {{ include "pipelines.getImageInfoByValue" (list . "pipelines" "pipelinesInit" ) }}
          imagePullPolicy: {{ .Values.pipelines.pipelinesInit.image.pullPolicy }}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - NET_RAW
          resources:
{{ toYaml .Values.initContainers.resources | nindent 12 }}
          {{- if not .Values.vault.enabled }}
          env:
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.vault.existingSecret | default (printf "%s" "vault-token-secret") }}
                  key: token
          {{- end }}
          command:
          - 'sh'
          - '-c'
          - >
            echo "Waiting for Vault to come up...";
            {{- if .Values.vault.enabled }}
            {{- if .Values.vault.server.ha.enabled }}
            until nc -z -w 2 {{ .Release.Name }}-vault-active {{ .Values.vault.server.service.port }} && echo Vault ok; do
            {{- else }}
            until nc -z -w 2 {{ .Release.Name }}-vault {{ .Values.vault.server.service.port }} && echo Vault ok; do
            {{- end }}
              sleep 2;
            done;
            {{- else }}
            is_vault_up=0;
            initialized_check_endpoint="/v1/sys/init";
            url="{{ .Values.global.vault.url }}$initialized_check_endpoint";
            until [[ "$is_vault_up" == "1" ]] && echo Vault ok; do
              wget_cmd="wget \
                -T 2 \
                --header=\"Content-Type: application/json; charset=utf-8\" \
                --header=\"X-Vault-Token: ${VAULT_TOKEN}\" \
                $url \
                --quiet \
                --server-response 2>&1| grep -c 'HTTP/1.1 200 OK'";
                is_vault_up=$(eval $wget_cmd);
              echo "Response = $is_vault_up"
              sleep 2;
            done;
            {{- end }}
{{- end }}
    {{- if .Values.rabbitmq.auth.tls.enabled }}
        - name: copy-rabbitmq-certs
          image: "{{ .Values.initContainer.image }}"
          imagePullPolicy: {{ .Values.initContainer.pullPolicy }}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - NET_RAW
          resources:
{{ toYaml .Values.initContainers.resources | nindent 12 }}
          command:
          - '/bin/bash'
          - '-c'
          - >
{{ include "pipelines.copyRabbitmqCustomCerts" . | indent 12 }}
          volumeMounts:
          - name: jfrog-pipelines-folder
            mountPath: {{ .Values.pipelines.mountPath }}
          - name: rabbitmq-ca-certs
            mountPath: "/tmp/rabbitmqcerts"
      {{ end }}
        - name: pipelines-installer
          image: {{ include "pipelines.getImageInfoByValue" (list . "pipelines" "pipelinesInit" ) }}
          imagePullPolicy: {{ .Values.pipelines.pipelinesInit.image.pullPolicy }}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
                - CHOWN
              drop:
                - NET_RAW
          resources:
{{ toYaml .Values.pipelineInstallerInitContainer.resources | nindent 12 }}
          env:
            {{- if or .Values.pipelines.customCertificates.enabled .Values.global.customCertificates.enabled }}
            - name: NODE_EXTRA_CA_CERTS
              value: "{{ .Values.pipelines.mountPath }}/security/keys/trusted/pipelines_custom_certs.crt"
            {{- end }}
{{- if and .Values.vault.enabled (.Values.access.shouldReadFromVault) (not .Values.access.shouldJustUpdateAccess) }}
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.vault.existingSecret | default (printf "%s" "root-vault-secret") }}
                  key: token
{{- end }}
            - name: PIPELINES_SHARED_DB_CONNECTIONSTRING
              valueFrom:
                secretKeyRef:
                {{- if not .Values.pipelines.unifiedSecretInstallation }}
                  {{- if .Values.global.postgresql.existingSecret }}
                  name: {{ .Values.global.postgresql.existingSecret }}
                  {{- else }}
                  name: {{ printf "%s-%s" (include "pipelines.fullname" .) "database" }}
                  {{- end }}
                {{- else }}
                  name: "{{ template "pipelines.name" . }}-unified-secret"
                {{- end }}
                  key: postgresql-url
            - name: PIPELINES_NODE_ID
              valueFrom:
                fieldRef:
                  fieldPath: "metadata.name"
            {{- if or .Values.pipelines.masterKey .Values.global.masterKey .Values.pipelines.masterKeySecretName .Values.global.masterKeySecretName }}
            - name: PIPELINES_MASTER_KEY
              valueFrom:
                secretKeyRef:
                {{- if or (not .Values.pipelines.unifiedSecretInstallation) .Values.pipelines.masterKeySecretName .Values.global.masterKeySecretName }}
                  name: "{{ include "pipelines.masterKeySecretName" . }}"
                {{- else }}
                  name: "{{ template "pipelines.name" . }}-unified-secret"
                {{- end }}
                  key: master-key
            {{- end }}
            {{- if or .Values.pipelines.joinKey .Values.global.joinKey .Values.pipelines.joinKeySecretName .Values.global.joinKeySecretName }}
            - name: PIPELINES_JOIN_KEY
              valueFrom:
                secretKeyRef:
                {{- if or (not .Values.pipelines.unifiedSecretInstallation) .Values.pipelines.joinKeySecretName .Values.global.joinKeySecretName }}
                  name: "{{ include "pipelines.joinKeySecretName" . }}"
                {{- else }}
                  name: "{{ template "pipelines.name" . }}-unified-secret"
                {{- end }}
                  key: join-key
            {{- end }}
          command:
          - 'sh'
          - '-c'
          - >
            export PIP_CONTAINER_START_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ");
            export PIP_METRIC_FILE_PREFIX="services-pipelines-installer";
          {{- if .Values.rabbitmq.enabled }}
            echo "Waiting for RabbitMQ to come up...";
            until nc -z -w 2 {{ .Release.Name }}-rabbitmq {{ .Values.rabbitmq.service.ports.amqp }} && echo rabbitmq ok; do
              sleep 1;
            done;
          {{- end }}
          {{- if .Values.redis.enabled }}
            echo "Waiting for Redis to come up...";
            until nc -z -w 2 {{ template "pipelines.redisServiceName" . }} {{ .Values.redis.redisPort }} && echo redis ok; do
              sleep 1;
            done;
          {{- end }}
          {{- if or .Values.pipelines.masterKey .Values.global.masterKey .Values.pipelines.masterKeySecretName .Values.global.masterKeySecretName }}
            echo "Copy masterKey to {{ .Values.pipelines.mountPath }}/security";
            mkdir -p {{ .Values.pipelines.mountPath }}/security;
            echo -n ${PIPELINES_MASTER_KEY} > {{ .Values.pipelines.mountPath }}/security/master.key;
          {{- end }}
          {{- if or .Values.pipelines.joinKey .Values.global.joinKey .Values.pipelines.joinKeySecretName .Values.global.joinKeySecretName }}
            echo "Copy joinKey to {{ .Values.pipelines.mountPath }}/security";
            mkdir -p {{ .Values.pipelines.mountPath }}/security;
            echo -n ${PIPELINES_JOIN_KEY} > {{ .Values.pipelines.mountPath }}/security/join.key;
          {{- end }}
            set -e;
            ./pipelines-k8s;
            set +e;
{{ include "pipelines.addMetrics" . | nindent 12 }}
{{ include "pipelines.changeOwnershipMetrics" . | nindent 12 }}
          volumeMounts:
          - name: pipelines-utility-scripts
            mountPath: "/pipelines-utility-scripts/"
          - name: jfrog-pipelines-folder
            mountPath: {{ .Values.pipelines.mountPath }}
          - name: jfrog-pipelines-logs
            mountPath: {{ .Values.pipelines.logPath }}
          {{- if .Values.buildPlane.dynamic.provider.aws.enabled }}
          {{- if not .Values.pipelines.unifiedSecretInstallation }}
          - name: buildplane-creds-aws
          {{- else }}
          - name: {{ include "pipelines.unifiedCustomSecretVolumeName" . }}
          {{- end }}
            mountPath: {{ .Values.pipelines.mountPath }}/buildplane-creds
            readOnly: true
          - name: buildplane-config-aws
            mountPath: {{ .Values.pipelines.mountPath }}/buildplane-config
            readOnly: true
          {{- end }}
          {{- if .Values.buildPlane.dynamic.provider.k8s.enabled }}
          {{- if not .Values.pipelines.unifiedSecretInstallation }}
          - name: buildplane-creds-k8s
          {{- else }}
          - name: {{ include "pipelines.unifiedCustomSecretVolumeName" . }}
          {{- end }}
            mountPath: {{ .Values.pipelines.mountPath }}/buildplane-creds
            readOnly: true
          - name: buildplane-config-k8s
            mountPath: {{ .Values.pipelines.mountPath }}/buildplane-config
            readOnly: true
          {{- end }}
          {{- if or .Values.pipelines.customInitContainers .Values.global.customInitContainers }}
{{ tpl (include "pipelines.customInitContainers" .)  . | indent 8 }}
          {{- end }}
      {{- if .Values.hostAliases }}
      hostAliases:
{{ toYaml .Values.hostAliases | indent 6 }}
      {{- end }}
      containers:
        {{- if .Values.filebeat.enabled }}
        - name: {{ .Values.filebeat.name }}
          image: "{{ .Values.filebeat.image.repository }}:{{ .Values.filebeat.image.version }}"
          imagePullPolicy: {{ .Values.filebeat.image.pullPolicy }}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - NET_RAW
          args:
          - "-e"
          - "-E"
          - "http.enabled=true"
          resources:
            {{ toYaml .Values.filebeat.resources | nindent 12 }}
          volumeMounts:
          - name: filebeat-config
            mountPath: /usr/share/filebeat/filebeat.yml
            readOnly: true
            subPath: filebeat.yml
          - name: jfrog-pipelines-logs
            mountPath: {{ .Values.pipelines.logPath }}
        {{- end }}
        - name: router
          image: {{ include "pipelines.getImageInfoByValue" (list . "pipelines" "router" ) }}
          imagePullPolicy: {{ .Values.pipelines.router.image.pullPolicy }}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - NET_RAW
          env:
            - name: JF_ROUTER_TOPOLOGY_LOCAL_REQUIREDSERVICETYPES
              value: {{ include "pipelines.router.requiredServiceTypes" . }}
          {{- if not .Values.router.routerConfiguration }}
            - name: JF_ROUTER_SERVICEREGISTRY_URL
              value: "{{ tpl (include "pipelines.jfrogUrl" .) . }}/access"
          {{- end }}
            - name: JF_ROUTER_SERVICEREGISTRY_GRPCADDRESS
              value: "{{ include "pipelines.grpc.url" . }}"
            - name: JF_ROUTER_ENTRYPOINTS_INTERNALPORT
              value: "{{ .Values.pipelines.router.internalPort }}"
            - name: JF_ROUTER_ENTRYPOINTS_EXTERNALPORT
              value: "{{ .Values.pipelines.router.externalPort }}"
            - name: JF_ROUTER_LOGGING_ROUTER_LOGLEVEL
              value: "DEBUG"
            - name: JF_SHARED_NODE_ID
              valueFrom:
                fieldRef:
                  fieldPath: "metadata.name"
            - name: JF_SHARED_NODE_IP
              valueFrom:
                fieldRef:
                  fieldPath: "status.podIP"
            - name: JF_SHARED_SECURITY_JOINKEY
              {{- if or .Values.pipelines.joinKeySecretName .Values.global.joinKeySecretName }}
              valueFrom:
                secretKeyRef:
                {{- if or (not .Values.pipelines.unifiedSecretInstallation) .Values.pipelines.joinKeySecretName .Values.global.joinKeySecretName }}
                  name: "{{ include "pipelines.joinKeySecretName" . }}"
                {{- else }}
                  name: "{{ template "pipelines.name" . }}-unified-secret"
                {{- end }}
                  key: join-key
              {{- else }}
              value: {{ include "pipelines.joinKey" . }}
              {{- end }}
            - name: JF_ROUTER_ENCRYPTSYSTEMCONFIG
              value: "true"
{{- if .Values.pipelines.extraEnvironmentVariables }}
{{- with .Values.pipelines.extraEnvironmentVariables }}
{{ tpl (toYaml .) $ | indent 12 }}
{{- end }}
{{- end }}
{{- if .Values.pipelines.router.extraEnvironmentVariables }}
{{- with .Values.pipelines.router.extraEnvironmentVariables }}
{{ tpl (toYaml .) $ | indent 12 }}
{{- end }}
{{- end }}
          ports:
            - name: http-router
              containerPort: {{ .Values.pipelines.router.internalPort }}
          resources:
            {{ toYaml .Values.pipelines.router.resources | nindent 12 }}
          volumeMounts:
          - name: jfrog-pipelines-folder
            mountPath: {{ .Values.pipelines.router.mountPath }}
          - name: jfrog-pipelines-logs
            mountPath: {{ .Values.pipelines.router.logPath }}
          - name: data-volume
            mountPath: {{ .Values.pipelines.router.appStatePath | quote }}
          {{- if .Values.pipelines.router.startupProbe.enabled }}
          startupProbe:
{{ tpl .Values.pipelines.router.startupProbe.config . | indent 12 }}
          {{- end }}
          {{- if .Values.pipelines.router.livenessProbe.enabled }}
          livenessProbe:
{{ tpl .Values.pipelines.router.livenessProbe.config . | indent 12 }}
          {{- end }}
          {{- if .Values.pipelines.router.readinessProbe.enabled }}
          readinessProbe:
{{ tpl .Values.pipelines.router.readinessProbe.config . | indent 12 }}
        {{- end }}
        - name: observability
          image: {{ include "pipelines.getImageInfoByValue" (list . "pipelines" "observability" ) }}
          imagePullPolicy: {{ .Values.pipelines.observability.image.pullPolicy }}
          securityContext:
            runAsNonRoot: false
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - NET_RAW
          env:
            - name: JF_SHARED_SECURITY_MASTERKEY
              valueFrom:
                secretKeyRef:
                {{- if or (not .Values.pipelines.unifiedSecretInstallation) .Values.pipelines.masterKeySecretName .Values.global.masterKeySecretName }}
                  name: "{{ include "pipelines.masterKeySecretName" . }}"
                {{- else }}
                  name: "{{ template "pipelines.name" . }}-unified-secret"
                {{- end }}
                  key: master-key
            - name: JF_SHARED_SECURITY_JOINKEY
              valueFrom:
                secretKeyRef:
                {{- if or (not .Values.pipelines.unifiedSecretInstallation) .Values.pipelines.joinKeySecretName .Values.global.joinKeySecretName }}
                  name: "{{ include "pipelines.joinKeySecretName" . }}"
                {{- else }}
                  name: "{{ template "pipelines.name" . }}-unified-secret"
                {{- end }}
                  key: join-key
{{- if .Values.pipelines.extraEnvironmentVariables }}
{{- with .Values.pipelines.extraEnvironmentVariables }}
{{ tpl (toYaml .) $ | indent 12 }}
{{- end }}
{{- end }}
{{- if .Values.pipelines.observability.extraEnvironmentVariables }}
{{- with .Values.pipelines.observability.extraEnvironmentVariables }}
{{ tpl (toYaml .) $ | indent 12 }}
{{- end }}
{{- end }}
          resources:
            {{ toYaml .Values.pipelines.observability.resources | nindent 12 }}
          {{- if .Values.pipelines.observability.startupProbe.enabled }}
          volumeMounts:
          - name: jfrog-pipelines-logs
            mountPath: {{ .Values.pipelines.observability.logPath }}
          - name: jfrog-pipelines-folder
            mountPath: {{ .Values.pipelines.observability.etcPath }}
          startupProbe:
{{ tpl .Values.pipelines.observability.startupProbe.config . | indent 12 }}
        {{- end }}
        {{- if .Values.pipelines.observability.livenessProbe.enabled }}
          livenessProbe:
{{ tpl .Values.pipelines.observability.livenessProbe.config . | indent 12 }}
        {{- end }}
        - name: api
          image: {{ include "pipelines.getImageInfoByValue" (list . "pipelines" "api" ) }}
          imagePullPolicy: {{ .Values.pipelines.api.image.pullPolicy }}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - NET_RAW
          env:
          {{- if .Values.rabbitmq.auth.tls.enabled }}
        {{- include "pipelines.rabbitmqTlsEnvVariables" . | indent 12 -}}
          {{ end }}
            - name: PIPELINES_NODE_ID
              valueFrom:
                fieldRef:
                  fieldPath: "metadata.name"
            {{- if or .Values.pipelines.customCertificates.enabled .Values.global.customCertificates.enabled }}
            - name: NODE_EXTRA_CA_CERTS
              value: "{{ .Values.pipelines.mountPath }}/security/keys/trusted/pipelines_custom_certs.crt"
            {{- end }}
{{- if .Values.pipelines.extraEnvironmentVariables }}
{{- with .Values.pipelines.extraEnvironmentVariables }}
{{ tpl (toYaml .) $ | indent 12 }}
{{- end }}
{{- end }}
{{- if .Values.pipelines.api.extraEnvironmentVariables }}
{{- with .Values.pipelines.api.extraEnvironmentVariables }}
{{ tpl (toYaml .) $ | indent 12 }}
{{- end }}
{{- end }}
          ports:
            - name: http-api
              containerPort: 30000
          {{- if .Values.pipelines.api.livenessProbe.enabled }}
          livenessProbe:
{{ tpl .Values.pipelines.api.livenessProbe.config . | indent 12 }}
          {{- end }}
          {{- if .Values.pipelines.api.startupProbe.enabled }}
          startupProbe:
{{ tpl .Values.pipelines.api.startupProbe.config . | indent 12 }}
          {{- end }}
          {{- if .Values.pipelines.api.readinessProbe.enabled }}
          readinessProbe:
{{ tpl .Values.pipelines.api.readinessProbe.config . | indent 12 }}
          {{- end }}
          resources:
            {{- toYaml .Values.pipelines.api.resources | nindent 12 }}
          volumeMounts:
          - name: jfrog-pipelines-folder
            mountPath: {{ .Values.pipelines.mountPath }}
          - name: jfrog-pipelines-logs
            mountPath: {{ .Values.pipelines.logPath }}
          {{- with .Values.pipelines.customVolumeMounts }}
{{ tpl . $ | nindent 10 }}
          {{- end }}
          {{- if .Values.pipelines.customPersistentVolumeClaim }}
          - name: {{ .Values.pipelines.customPersistentVolumeClaim.name }}
            mountPath: {{ .Values.pipelines.customPersistentVolumeClaim.mountPath }}
          {{- end }}
        - name: www
          image: {{ include "pipelines.getImageInfoByValue" (list . "pipelines" "www" ) }}
          imagePullPolicy: {{ .Values.pipelines.www.image.pullPolicy }}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - NET_RAW
          env:
            {{- if or .Values.pipelines.customCertificates.enabled .Values.global.customCertificates.enabled }}
            - name: NODE_EXTRA_CA_CERTS
              value: "{{ .Values.pipelines.mountPath }}/security/keys/trusted/pipelines_custom_certs.crt"
            {{- end }}
          {{- if .Values.rabbitmq.auth.tls.enabled }}
        {{- include "pipelines.rabbitmqTlsEnvVariables" . | indent 12 -}}
          {{ end }}
            - name: PIPELINES_NODE_ID
              valueFrom:
                fieldRef:
                  fieldPath: "metadata.name"
{{- if .Values.pipelines.extraEnvironmentVariables }}
{{- with .Values.pipelines.extraEnvironmentVariables }}
{{ tpl (toYaml .) $ | indent 12 }}
{{- end }}
{{- end }}
{{- if .Values.pipelines.www.extraEnvironmentVariables }}
{{- with .Values.pipelines.www.extraEnvironmentVariables }}
{{ tpl (toYaml .) $ | indent 12 }}
{{- end }}
{{- end }}
          ports:
            - name: http-www
              containerPort: 30001
          {{- if .Values.pipelines.www.livenessProbe.enabled }}
          livenessProbe:
{{ tpl .Values.pipelines.www.livenessProbe.config . | indent 12 }}
          {{- end }}
          {{- if .Values.pipelines.www.startupProbe.enabled }}
          startupProbe:
{{ tpl .Values.pipelines.www.startupProbe.config . | indent 12 }}
          {{- end }}
          resources:
            {{- toYaml .Values.pipelines.www.resources | nindent 12 }}
          volumeMounts:
          - name: jfrog-pipelines-folder
            mountPath: {{ .Values.pipelines.mountPath }}
          - name: jfrog-pipelines-logs
            mountPath: {{ .Values.pipelines.logPath }}
          {{- with .Values.pipelines.customVolumeMounts }}
{{ tpl . $ | nindent 10 }}
          {{- end }}
        - name: frontend
          image: {{ include "pipelines.getImageInfoByValue" (list . "pipelines" "frontend" ) }}
          imagePullPolicy: {{ .Values.pipelines.frontend.image.pullPolicy }}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - NET_RAW
          env:
            {{- if or .Values.pipelines.customCertificates.enabled .Values.global.customCertificates.enabled }}
            - name: NODE_EXTRA_CA_CERTS
              value: "{{ .Values.pipelines.mountPath }}/security/keys/trusted/pipelines_custom_certs.crt"
            {{- end }}
            - name: PIPELINES_NODE_ID
              valueFrom:
                fieldRef:
                  fieldPath: "metadata.name"
{{- if .Values.pipelines.extraEnvironmentVariables }}
{{- with .Values.pipelines.extraEnvironmentVariables }}
{{ tpl (toYaml .) $ | indent 12 }}
{{- end }}
{{- end }}
{{- if .Values.pipelines.frontend.extraEnvironmentVariables }}
{{- with .Values.pipelines.frontend.extraEnvironmentVariables }}
{{ tpl (toYaml .) $ | indent 12 }}
{{- end }}
{{- end }}
          ports:
          - containerPort: {{ .Values.pipelines.frontend.internalPort }}
            name: http-frontend
          {{- if .Values.pipelines.frontend.livenessProbe.enabled }}
          livenessProbe:
{{ tpl .Values.pipelines.frontend.livenessProbe.config . | indent 12 }}
          {{- end }}
          resources:
            {{- toYaml .Values.pipelines.frontend.resources | nindent 12 }}
          volumeMounts:
          - name: jfrog-pipelines-folder
            mountPath: {{ .Values.pipelines.mountPath }}
          - name: jfrog-pipelines-logs
            mountPath: {{ .Values.pipelines.logPath }}
          {{- with .Values.pipelines.customVolumeMounts }}
{{ tpl . $ | nindent 10 }}
          {{- end }}
{{- if not .Values.splitServicesToPods }}
{{- if .Values.pipelines.nodepoolservice.enabled }}
        - name: nodepoolservice
          image: {{ include "pipelines.getImageInfoByValue" (list . "pipelines" "nodepoolservice" ) }}
          imagePullPolicy: {{ .Values.pipelines.nodepoolservice.image.pullPolicy }}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - NET_RAW
          env:
          {{- if .Values.rabbitmq.auth.tls.enabled }}
        {{- include "pipelines.rabbitmqTlsEnvVariables" . | indent 12 -}}
          {{ end }}
            {{- if or .Values.pipelines.customCertificates.enabled .Values.global.customCertificates.enabled }}
            - name: NODE_EXTRA_CA_CERTS
              value: "{{ .Values.pipelines.mountPath }}/security/keys/trusted/pipelines_custom_certs.crt"
            {{- end }}
            - name: PIPELINES_NODE_ID
              valueFrom:
                fieldRef:
                  fieldPath: "metadata.name"
{{- if .Values.pipelines.extraEnvironmentVariables }}
{{- with .Values.pipelines.extraEnvironmentVariables }}
{{ tpl (toYaml .) $ | indent 12 }}
{{- end }}
{{- end }}
{{- if .Values.pipelines.nodepoolservice.extraEnvironmentVariables }}
{{- with .Values.pipelines.nodepoolservice.extraEnvironmentVariables }}
{{ tpl (toYaml .) $ | indent 12 }}
{{- end }}
{{- end }}
          resources:
            {{- toYaml .Values.pipelines.nodepoolservice.resources | nindent 12 }}
          ports:
            - name: nps-api
              containerPort: 30300
            - name: nps-health-api
              containerPort: 30301
          volumeMounts:
            - name: jfrog-pipelines-folder
              mountPath: {{ .Values.pipelines.mountPath }}
            - name: jfrog-pipelines-logs
              mountPath: {{ .Values.pipelines.logPath }}
{{- with .Values.pipelines.customVolumeMounts }}
{{ tpl . $ | nindent 10 }}
{{- end }}
{{- end }}
{{- if .Values.pipelines.runservice.enabled }}
        - name: runservice
          image: {{ include "pipelines.getImageInfoByValue" (list . "pipelines" "runservice" ) }}
          imagePullPolicy: {{ .Values.pipelines.runservice.image.pullPolicy }}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - NET_RAW
          env:
          {{- if .Values.rabbitmq.auth.tls.enabled }}
        {{- include "pipelines.rabbitmqTlsEnvVariables" . | indent 12 -}}
          {{ end }}
            {{- if or .Values.pipelines.customCertificates.enabled .Values.global.customCertificates.enabled }}
            - name: NODE_EXTRA_CA_CERTS
              value: "{{ .Values.pipelines.mountPath }}/security/keys/trusted/pipelines_custom_certs.crt"
            {{- end }}
            - name: PIPELINES_NODE_ID
              valueFrom:
                fieldRef:
                  fieldPath: "metadata.name"
{{- if .Values.pipelines.extraEnvironmentVariables }}
{{- with .Values.pipelines.extraEnvironmentVariables }}
{{ tpl (toYaml .) $ | indent 12 }}
{{- end }}
{{- end }}
{{- if .Values.pipelines.runservice.extraEnvironmentVariables }}
{{- with .Values.pipelines.runservice.extraEnvironmentVariables }}
{{ tpl (toYaml .) $ | indent 12 }}
{{- end }}
{{- end }}
          resources:
            {{- toYaml .Values.pipelines.runservice.resources | nindent 12 }}
          volumeMounts:
            - name: jfrog-pipelines-folder
              mountPath: {{ .Values.pipelines.mountPath }}
            - name: jfrog-pipelines-logs
              mountPath: {{ .Values.pipelines.logPath }}
{{- with .Values.pipelines.customVolumeMounts }}
{{ tpl . $ | nindent 10 }}
{{- end }}
{{- end }}

{{- if .Values.pipelines.logservice.enabled }}
        - name: logservice
          image: {{ include "pipelines.getImageInfoByValue" (list . "pipelines" "logservice" ) }}
          imagePullPolicy: {{ .Values.pipelines.logservice.image.pullPolicy }}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - NET_RAW
          env:
            {{- if or .Values.pipelines.customCertificates.enabled .Values.global.customCertificates.enabled }}
            - name: NODE_EXTRA_CA_CERTS
              value: "{{ .Values.pipelines.mountPath }}/security/keys/trusted/pipelines_custom_certs.crt"
            {{- end }}
          {{- if .Values.rabbitmq.auth.tls.enabled }}
        {{- include "pipelines.rabbitmqTlsEnvVariables" . | indent 12 }}
          {{ end }}
            - name: PIPELINES_NODE_ID
              valueFrom:
                fieldRef:
                  fieldPath: "metadata.name"
{{- if .Values.pipelines.extraEnvironmentVariables }}
{{- with .Values.pipelines.extraEnvironmentVariables }}
{{ tpl (toYaml .) $ | indent 12 }}
{{- end }}
{{- end }}
{{- if .Values.pipelines.logservice.extraEnvironmentVariables }}
{{- with .Values.pipelines.logservice.extraEnvironmentVariables }}
{{ tpl (toYaml .) $ | indent 12 }}
{{- end }}
{{- end }}
          resources:
            {{- toYaml .Values.pipelines.logservice.resources | nindent 12 }}
          volumeMounts:
            - name: jfrog-pipelines-folder
              mountPath: {{ .Values.pipelines.mountPath }}
            - name: jfrog-pipelines-logs
              mountPath: {{ .Values.pipelines.logPath }}
{{- with .Values.pipelines.customVolumeMounts }}
{{ tpl . $ | nindent 10 }}
{{- end }}
{{- end }}
        - name: stepservice
          image: {{ include "pipelines.getImageInfoByValue" (list . "pipelines" "stepservice" ) }}
          imagePullPolicy: {{ .Values.pipelines.stepservice.image.pullPolicy }}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - NET_RAW
          env:
          {{- if .Values.rabbitmq.auth.tls.enabled }}
        {{- include "pipelines.rabbitmqTlsEnvVariables" . | indent 12 -}}
          {{ end }}
            {{- if or .Values.pipelines.customCertificates.enabled .Values.global.customCertificates.enabled }}
            - name: NODE_EXTRA_CA_CERTS
              value: "{{ .Values.pipelines.mountPath }}/security/keys/trusted/pipelines_custom_certs.crt"
            {{- end }}
            - name: PIPELINES_NODE_ID
              valueFrom:
                fieldRef:
                  fieldPath: "metadata.name"
{{- if .Values.pipelines.extraEnvironmentVariables }}
{{- with .Values.pipelines.extraEnvironmentVariables }}
{{ tpl (toYaml .) $ | indent 12 }}
{{- end }}
{{- end }}
{{- if .Values.pipelines.stepservice.extraEnvironmentVariables }}
{{- with .Values.pipelines.stepservice.extraEnvironmentVariables }}
{{ tpl (toYaml .) $ | indent 12 }}
{{- end }}
{{- end }}
          resources:
            {{- toYaml .Values.pipelines.stepservice.resources | nindent 12 }}
          volumeMounts:
            - name: jfrog-pipelines-folder
              mountPath: {{ .Values.pipelines.mountPath }}
            - name: jfrog-pipelines-logs
              mountPath: {{ .Values.pipelines.logPath }}
{{- with .Values.pipelines.customVolumeMounts }}
{{ tpl . $ | nindent 10 }}
{{- end }}
{{- if .Values.pipelines.analyticsservice.enabled }}
        - name: analyticsservice
          image: {{ include "pipelines.getImageInfoByValue" (list . "pipelines" "analyticsservice" ) }}
          imagePullPolicy: {{ .Values.pipelines.analyticsservice.image.pullPolicy }}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - NET_RAW
          env:
            {{- if or .Values.pipelines.customCertificates.enabled .Values.global.customCertificates.enabled }}
            - name: NODE_EXTRA_CA_CERTS
              value: "{{ .Values.pipelines.mountPath }}/security/keys/trusted/pipelines_custom_certs.crt"
            {{- end }}
          {{- if .Values.rabbitmq.auth.tls.enabled }}
        {{- include "pipelines.rabbitmqTlsEnvVariables" . | indent 12 -}}
          {{ end }}
            - name: PIPELINES_NODE_ID
              valueFrom:
                fieldRef:
                  fieldPath: "metadata.name"
{{- if .Values.pipelines.extraEnvironmentVariables }}
{{- with .Values.pipelines.extraEnvironmentVariables }}
{{ tpl (toYaml .) $ | indent 12 }}
{{- end }}
{{- end }}
{{- if .Values.pipelines.analyticsservice.extraEnvironmentVariables }}
{{- with .Values.pipelines.analyticsservice.extraEnvironmentVariables }}
{{ tpl (toYaml .) $ | indent 12 }}
{{- end }}
{{- end }}
          resources:
            {{- toYaml .Values.pipelines.analyticsservice.resources | nindent 12 }}
          volumeMounts:
            - name: jfrog-pipelines-folder
              mountPath: {{ .Values.pipelines.mountPath }}
            - name: jfrog-pipelines-logs
              mountPath: {{ .Values.pipelines.logPath }}
{{- with .Values.pipelines.customVolumeMounts }}
{{ tpl . $ | nindent 10 }}
{{- end }}
{{- end }}
        - name: pipelinesync
          image: {{ include "pipelines.getImageInfoByValue" (list . "pipelines" "pipelineSync" ) }}
          imagePullPolicy: {{ .Values.pipelines.pipelineSync.image.pullPolicy }}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - NET_RAW
          workingDir: /opt/jfrog/pipelines/app/micro/pipelineSync
          env:
          {{- if .Values.rabbitmq.auth.tls.enabled }}
        {{- include "pipelines.rabbitmqTlsEnvVariables" . | indent 12 }}
          {{ end }}
            - name: COMPONENT
              value: pipelinesync
            - name: PIPELINES_NODE_ID
              valueFrom:
                fieldRef:
                  fieldPath: "metadata.name"
            {{- if or .Values.pipelines.customCertificates.enabled .Values.global.customCertificates.enabled }}
            - name: NODE_EXTRA_CA_CERTS
              value: "{{ .Values.pipelines.mountPath }}/security/keys/trusted/pipelines_custom_certs.crt"
            {{- end }}
{{- if .Values.pipelines.extraEnvironmentVariables }}
{{- with .Values.pipelines.extraEnvironmentVariables }}
{{ tpl (toYaml .) $ | indent 12 }}
{{- end }}
{{- end }}
{{- if .Values.pipelines.pipelineSync.extraEnvironmentVariables }}
{{- with .Values.pipelines.pipelineSync.extraEnvironmentVariables }}
{{ tpl (toYaml .) $ | indent 12 }}
{{- end }}
{{- end }}
          resources:
            {{- toYaml .Values.pipelines.pipelineSync.resources | nindent 12 }}
          volumeMounts:
          - name: jfrog-pipelines-folder
            mountPath: {{ .Values.pipelines.mountPath }}
          - name: jfrog-pipelines-logs
            mountPath: {{ .Values.pipelines.logPath }}
        - name: cron
          image: {{ include "pipelines.getImageInfoByValue" (list . "pipelines" "cron" ) }}
          imagePullPolicy: {{ .Values.pipelines.cron.image.pullPolicy }}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - NET_RAW
          workingDir: /opt/jfrog/pipelines/app/micro/cron
          env:
            - name: COMPONENT
              value: cron
          {{- if .Values.rabbitmq.auth.tls.enabled }}
        {{- include "pipelines.rabbitmqTlsEnvVariables" . | indent 12 -}}
          {{ end }}
            - name: PIPELINES_NODE_ID
              valueFrom:
                fieldRef:
                  fieldPath: "metadata.name"
            {{- if or .Values.pipelines.customCertificates.enabled .Values.global.customCertificates.enabled }}
            - name: NODE_EXTRA_CA_CERTS
              value: "{{ .Values.pipelines.mountPath }}/security/keys/trusted/pipelines_custom_certs.crt"
            {{- end }}
{{- if .Values.pipelines.extraEnvironmentVariables }}
{{- with .Values.pipelines.extraEnvironmentVariables }}
{{ tpl (toYaml .) $ | indent 12 }}
{{- end }}
{{- end }}
{{- if .Values.pipelines.cron.extraEnvironmentVariables }}
{{- with .Values.pipelines.cron.extraEnvironmentVariables }}
{{ tpl (toYaml .) $ | indent 12 }}
{{- end }}
{{- end }}
          resources:
            {{- toYaml .Values.pipelines.cron.resources | nindent 12 }}
          volumeMounts:
          - name: jfrog-pipelines-folder
            mountPath: {{ .Values.pipelines.mountPath }}
          - name: jfrog-pipelines-logs
            mountPath: {{ .Values.pipelines.logPath }}
        - name: hookhandler
          image: {{ include "pipelines.getImageInfoByValue" (list . "pipelines" "hookHandler" ) }}
          imagePullPolicy: {{ .Values.pipelines.hookHandler.image.pullPolicy }}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - NET_RAW
          workingDir: /opt/jfrog/pipelines/app/micro/hookHandler
          env:
          {{- if .Values.rabbitmq.auth.tls.enabled }}
        {{- include "pipelines.rabbitmqTlsEnvVariables" . | indent 12 }}
          {{ end }}
            - name: COMPONENT
              value: hookhandler
            - name: PIPELINES_NODE_ID
              valueFrom:
                fieldRef:
                  fieldPath: "metadata.name"
            {{- if or .Values.pipelines.customCertificates.enabled .Values.global.customCertificates.enabled }}
            - name: NODE_EXTRA_CA_CERTS
              value: "{{ .Values.pipelines.mountPath }}/security/keys/trusted/pipelines_custom_certs.crt"
            {{- end }}
{{- if .Values.pipelines.extraEnvironmentVariables }}
{{- with .Values.pipelines.extraEnvironmentVariables }}
{{ tpl (toYaml .) $ | indent 12 }}
{{- end }}
{{- end }}
{{- if .Values.pipelines.hookHandler.extraEnvironmentVariables }}
{{- with .Values.pipelines.hookHandler.extraEnvironmentVariables }}
{{ tpl (toYaml .) $ | indent 12 }}
{{- end }}
{{- end }}
          resources:
            {{- toYaml .Values.pipelines.hookHandler.resources | nindent 12 }}
          volumeMounts:
          - name: jfrog-pipelines-folder
            mountPath: {{ .Values.pipelines.mountPath }}
          - name: jfrog-pipelines-logs
            mountPath: {{ .Values.pipelines.logPath }}
        - name: extensionsync
          image: {{ include "pipelines.getImageInfoByValue" (list . "pipelines" "extensionSync" ) }}
          imagePullPolicy: {{ .Values.pipelines.extensionSync.image.pullPolicy }}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - NET_RAW
          workingDir: /opt/jfrog/pipelines/app/micro/extensionSync
          env:
            - name: COMPONENT
              value: extensionsync
          {{- if .Values.rabbitmq.auth.tls.enabled }}
        {{- include "pipelines.rabbitmqTlsEnvVariables" . | indent 12 -}}
          {{ end }}
            - name: PIPELINES_NODE_ID
              valueFrom:
                fieldRef:
                  fieldPath: "metadata.name"
            {{- if or .Values.pipelines.customCertificates.enabled .Values.global.customCertificates.enabled }}
            - name: NODE_EXTRA_CA_CERTS
              value: "{{ .Values.pipelines.mountPath }}/security/keys/trusted/pipelines_custom_certs.crt"
            {{- end }}
{{- if .Values.pipelines.extraEnvironmentVariables }}
{{- with .Values.pipelines.extraEnvironmentVariables }}
{{ tpl (toYaml .) $ | indent 12 }}
{{- end }}
{{- end }}
{{- if .Values.pipelines.extensionSync.extraEnvironmentVariables }}
{{- with .Values.pipelines.extensionSync.extraEnvironmentVariables }}
{{ tpl (toYaml .) $ | indent 12 }}
{{- end }}
{{- end }}
          resources:
            {{- toYaml .Values.pipelines.extensionSync.resources | nindent 12 }}
          volumeMounts:
          - name: jfrog-pipelines-folder
            mountPath: {{ .Values.pipelines.mountPath }}
          - name: jfrog-pipelines-logs
            mountPath: {{ .Values.pipelines.logPath }}
        - name: reqsealer
          image: {{ include "pipelines.getImageInfoByValue" (list . "pipelines" "reqSealer" ) }}
          imagePullPolicy: {{ .Values.pipelines.reqSealer.image.pullPolicy }}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - NET_RAW
          workingDir: /opt/jfrog/pipelines/app/micro/reqSealer
          env:
          {{- if .Values.rabbitmq.auth.tls.enabled }}
        {{- include "pipelines.rabbitmqTlsEnvVariables" . | indent 12 }}
          {{ end }}
            - name: COMPONENT
              value: reqsealer
            - name: PIPELINES_NODE_ID
              valueFrom:
                fieldRef:
                  fieldPath: "metadata.name"
            {{- if or .Values.pipelines.customCertificates.enabled .Values.global.customCertificates.enabled }}
            - name: NODE_EXTRA_CA_CERTS
              value: "{{ .Values.pipelines.mountPath }}/security/keys/trusted/pipelines_custom_certs.crt"
            {{- end }}
{{- if .Values.pipelines.extraEnvironmentVariables }}
{{- with .Values.pipelines.extraEnvironmentVariables }}
{{ tpl (toYaml .) $ | indent 12 }}
{{- end }}
{{- end }}
{{- if .Values.pipelines.reqSealer.extraEnvironmentVariables }}
{{- with .Values.pipelines.reqSealer.extraEnvironmentVariables }}
{{ tpl (toYaml .) $ | indent 12 }}
{{- end }}
{{- end }}
          resources:
            {{- toYaml .Values.pipelines.reqSealer.resources | nindent 12 }}
          volumeMounts:
          - name: jfrog-pipelines-folder
            mountPath: {{ .Values.pipelines.mountPath }}
          - name: jfrog-pipelines-logs
            mountPath: {{ .Values.pipelines.logPath }}
        - name: templatesync
          image: {{ include "pipelines.getImageInfoByValue" (list . "pipelines" "templateSync" ) }}
          imagePullPolicy: {{ .Values.pipelines.templateSync.image.pullPolicy }}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - NET_RAW
          workingDir: /opt/jfrog/pipelines/app/micro/templateSync
          env:
          {{- if .Values.rabbitmq.auth.tls.enabled }}
        {{- include "pipelines.rabbitmqTlsEnvVariables" . | indent 12 }}
          {{ end }}
            - name: COMPONENT
              value: templatesync
            - name: PIPELINES_NODE_ID
              valueFrom:
                fieldRef:
                  fieldPath: "metadata.name"
            {{- if or .Values.pipelines.customCertificates.enabled .Values.global.customCertificates.enabled }}
            - name: NODE_EXTRA_CA_CERTS
              value: "{{ .Values.pipelines.mountPath }}/security/keys/trusted/pipelines_custom_certs.crt"
            {{- end }}
{{- if .Values.pipelines.extraEnvironmentVariables }}
{{- with .Values.pipelines.extraEnvironmentVariables }}
{{ tpl (toYaml .) $ | indent 12 }}
{{- end }}
{{- end }}
{{- if .Values.pipelines.templateSync.extraEnvironmentVariables }}
{{- with .Values.pipelines.templateSync.extraEnvironmentVariables }}
{{ tpl (toYaml .) $ | indent 12 }}
{{- end }}
{{- end }}
          resources:
            {{- toYaml .Values.pipelines.templateSync.resources | nindent 12 }}
          volumeMounts:
            - name: jfrog-pipelines-folder
              mountPath: {{ .Values.pipelines.mountPath }}
            - name: jfrog-pipelines-logs
              mountPath: {{ .Values.pipelines.logPath }}
{{- end }}
          {{- if or .Values.pipelines.customSidecarContainers .Values.global.customSidecarContainers }}
{{ tpl (include "pipelines.customSidecarContainers" .) . | nindent 8 }}
          {{- end }}
    {{- if or .Values.pipelines.nodeSelector .Values.global.nodeSelector }}
{{ tpl (include "pipelines.nodeSelector" .) . | indent 6 }}
    {{- end }}
    {{- if .Values.pipelines.affinity }}
    {{- with .Values.pipelines.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- else if eq .Values.pipelines.podAntiAffinity.type "soft" }}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                topologyKey: {{ .Values.pipelines.podAntiAffinity.topologyKey }}
                labelSelector:
                  matchLabels:
                    app: {{ template "pipelines.name" . }}
                    release: {{ .Release.Name }}
    {{- else if eq .Values.pipelines.podAntiAffinity.type "hard" }}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - topologyKey: {{ .Values.pipelines.podAntiAffinity.topologyKey }}
              labelSelector:
                matchLabels:
                  app: {{ template "pipelines.name" . }}
                  release: {{ .Release.Name }}
    {{- end }}
    {{- with .Values.pipelines.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}


      volumes:

      ########## External secrets ###########
      {{- if or .Values.pipelines.customCertificates.enabled .Values.global.customCertificates.enabled }}
      - name: ca-certs
        secret:
          secretName: {{ default .Values.global.customCertificates.certificateSecretName .Values.pipelines.customCertificates.certificateSecretName }}
      {{- end }}

      # system yaml
      {{- if .Values.systemYamlOverride.existingSecret }}
      - name: systemyaml
        secret:
          secretName: {{ .Values.systemYamlOverride.existingSecret }}
      {{- end }}

      {{- if and .Values.buildPlane.dynamic.provider.aws.enabled .Values.buildPlane.dynamic.provider.aws.existingSecret }}
      - name: buildplane-creds-aws
        secret:
          secretName: {{ .Values.buildPlane.dynamic.provider.aws.existingSecret }}
      {{- end }}

      {{- if and .Values.buildPlane.dynamic.provider.k8s.enabled .Values.buildPlane.dynamic.provider.k8s.existingSecret }}
      - name: buildplane-creds-k8s
        secret:
          secretName: {{ .Values.buildPlane.dynamic.provider.k8s.existingSecret }}
      {{- end }}

      {{- if .Values.rabbitmq.auth.tls.enabled }}
      - name: rabbitmq-ca-certs
        secret:
          secretName: {{ template "pipelines.rabbitmqCustomCertificateshandler" . }}
      {{- end}}

    #########  unifiedSecretInstallation ###########
    {{- if and .Values.pipelines.unifiedSecretInstallation (eq (include "pipelines.checkDuplicateUnifiedCustomVolume" .) "false" ) }}
      - name: {{ include "pipelines.unifiedCustomSecretVolumeName" . }}
        secret:
          secretName: {{ template "pipelines.name" . }}-unified-secret
    {{- else if not .Values.pipelines.unifiedSecretInstallation }}
      {{- if and (not .Values.systemYamlOverride.existingSecret) .Values.pipelines.systemYaml }}
      - name: systemyaml
        secret:
          secretName: {{ printf "%s-%s" (include "pipelines.fullname" .) "system-yaml" }}
      {{- end }}

      {{- if and .Values.buildPlane.dynamic.provider.aws.enabled (not .Values.buildPlane.dynamic.provider.aws.existingSecret) }}
      - name: buildplane-creds-aws
        secret:
          secretName: {{ printf "%s-dynamic-buildplane-creds-aws" (include "pipelines.fullname" .) }}
      {{- end }}

      {{- if and .Values.buildPlane.dynamic.provider.k8s.enabled (not .Values.buildPlane.dynamic.provider.k8s.existingSecret) }}
      - name: buildplane-creds-k8s
        secret:
          secretName: {{ printf "%s-dynamic-buildplane-creds-k8s" (include "pipelines.fullname" .) }}
      {{- end }}
    {{- end }}

      ############ Config map, Volumes and Custom Volumes ##############
      {{- if or .Values.pipelines.customVolumes .Values.global.customVolumes }}
{{ tpl (include "pipelines.customVolumes" .) . | indent 6 }}
      {{- end }}
      {{- if .Values.buildPlane.dynamic.provider.aws.enabled }}
      - name: buildplane-config-aws
        configMap:
          name: {{ include "pipelines.fullname" . }}-dynamic-buildplane-config-aws
      {{- end }}

      {{- if .Values.buildPlane.dynamic.provider.k8s.enabled }}
      - name: buildplane-config-k8s
        configMap:
          name: {{ include "pipelines.fullname" . }}-dynamic-buildplane-config-k8s
      {{- end }}

      - name: jfrog-pipelines-folder
        emptyDir: {}
      - name: jfrog-pipelines-logs
        emptyDir: {}
      - name: data-volume
        emptyDir: {}
      - name: pipelines-utility-scripts
        configMap:
          name: {{ template "pipelines.fullname" . }}-utility-scripts
      {{- if .Values.pipelines.configMaps }}
      - name: pipelines-configmaps
        configMap:
          name: {{ include "pipelines.fullname" . }}-configmaps
      {{- end }}
      {{- if .Values.filebeat.enabled }}
      - name: filebeat-config
        configMap:
          name: {{ include "pipelines.fullname" . }}-filebeat-config
      {{- end }}
      {{- if .Values.pipelines.customPersistentVolumeClaim }}
      - name: {{ .Values.pipelines.customPersistentVolumeClaim.name }}
        persistentVolumeClaim:
          claimName: {{ .Values.pipelines.customPersistentVolumeClaim.name }}
      {{- end }}