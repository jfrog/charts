databaseUpgradeReady: true
# To Fix ct tool --reuse-values - PASSWORDS ERROR: you must provide your current passwords when upgrade the release
postgresql:
  postgresqlPassword: password
  persistence:
    enabled: false
artifactory:
  persistence:
    enabled: false
  customInitContainersBegin: |
   - name: "custom-init-begin-local"
     image: "{{ .Values.initContainerImage }}"
     imagePullPolicy: "{{ .Values.artifactory.image.pullPolicy }}"
     command:
       - 'sh'
       - '-c'
       - echo "running in local"
     volumeMounts:
       - mountPath: "{{ .Values.artifactory.persistence.mountPath }}"
         name: artifactory-volume
  customInitContainers: |
   - name: "custom-init-local"
     image: "{{ .Values.initContainerImage }}"
     imagePullPolicy: "{{ .Values.artifactory.image.pullPolicy }}"
     command:
       - 'sh'
       - '-c'
       - echo "running in local"
     volumeMounts:
       - mountPath: "{{ .Values.artifactory.persistence.mountPath }}"
         name: artifactory-volume
  # Add custom volumes
  customVolumes: |
   - name: custom-script-local
     emptyDir:
       sizeLimit: 100Mi
  # Add custom volumesMounts
  customVolumeMounts: |
   - name: custom-script-local
     mountPath: "/scriptslocal"
  # Add custom sidecar containers
  customSidecarContainers: |
   - name: "sidecar-list-local"
     image: "{{ .Values.initContainerImage }}"
     imagePullPolicy: "{{ .Values.artifactory.image.pullPolicy }}"
     securityContext:
       allowPrivilegeEscalation: false
     command: ["sh","-c","echo 'Sidecar is running in local' >> /scriptslocal/sidecarlocal.txt; cat /scriptslocal/sidecarlocal.txt; while true; do sleep 30; done"]
     volumeMounts:
       - mountPath: "/scriptslocal"
         name: custom-script-local
     resources:
       requests:
         memory: "32Mi"
         cpu: "50m"
       limits:
         memory: "128Mi"
         cpu: "100m"

global:
  masterKey: FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  joinKey: EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE
  customInitContainersBegin: |
   - name: "custom-init-begin-global"
     image: "{{ .Values.initContainerImage }}"
     imagePullPolicy: "{{ .Values.artifactory.image.pullPolicy }}"
     command:
       - 'sh'
       - '-c'
       - echo "running in global"
     volumeMounts:
       - mountPath: "{{ .Values.artifactory.persistence.mountPath }}"
         name: artifactory-volume
  customInitContainers: |
   - name: "custom-init-global"
     image: "{{ .Values.initContainerImage }}"
     imagePullPolicy: "{{ .Values.artifactory.image.pullPolicy }}"
     command:
       - 'sh'
       - '-c'
       - echo "running in global"
     volumeMounts:
       - mountPath: "{{ .Values.artifactory.persistence.mountPath }}"
         name: artifactory-volume
  # Add custom volumes
  customVolumes: |
   - name: custom-script-global
     emptyDir:
       sizeLimit: 100Mi
  # Add custom volumesMounts
  customVolumeMounts: |
   - name: custom-script-global
     mountPath: "/scripts"
  # Add custom sidecar containers
  customSidecarContainers: |
   - name: "sidecar-list-global"
     image: "{{ .Values.initContainerImage }}"
     imagePullPolicy: "{{ .Values.artifactory.image.pullPolicy }}"
     securityContext:
       allowPrivilegeEscalation: false
     command: ["sh","-c","echo 'Sidecar is running in global' >> /scripts/sidecarglobal.txt; cat /scripts/sidecarglobal.txt; while true; do sleep 30; done"]
     volumeMounts:
       - mountPath: "/scripts"
         name: custom-script-global
     resources:
       requests:
         memory: "32Mi"
         cpu: "50m"
       limits:
         memory: "128Mi"
         cpu: "100m"
