{{- if .Values.jfbus.enabled -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "jfbus.fullname" . }}
  labels:
    app: {{ template "artifactory.name" . }}
    chart: {{ template "artifactory.chart" . }}
    heritage: {{ .Release.Service }}
    release: {{ .Release.Name }}
    component: {{ .Values.jfbus.name }}
{{- if .Values.jfbus.deployment.labels }}
{{ toYaml .Values.jfbus.deployment.labels | indent 4 }}
{{- end }}
{{- with .Values.jfbus.deployment.annotations }}
  annotations:
{{ toYaml . | indent 4 }}
{{- end }}
spec:
  replicas: {{ .Values.jfbus.replicaCount }}
  strategy:
    type: "RollingUpdate"
  selector:
    matchLabels:
      app: {{ template "artifactory.name" . }}
      release: {{ .Release.Name }}
      component: {{ .Values.jfbus.name }}
  template:
    metadata:
      annotations:
      {{- if not .Values.artifactory.unifiedSecretInstallation }}
        checksum/database-secrets: {{ include (print $.Template.BasePath "/artifactory-database-secrets.yaml") . | sha256sum }}
        checksum/systemyaml: {{ include (print $.Template.BasePath "/artifactory-system-yaml.yaml") . | sha256sum }}
      {{- else }}
        checksum/artifactory-unified-secret: {{ include (print $.Template.BasePath "/artifactory-unified-secret.yaml") . | sha256sum }}
      {{- end }}
      {{- with .Values.jfbus.pod.annotations }}
{{ toYaml . | indent 8 }}
      {{- end }}
      labels:
        app: {{ template "artifactory.name" . }}
        chart: {{ template "artifactory.chart" . }}
        component: {{ .Values.jfbus.name }}
        heritage: {{ .Release.Service }}
        release: {{ .Release.Name }}
      {{- with .Values.jfbus.pod.labels }}
{{ toYaml . | indent 8 }}
      {{- end }}
    spec:
      {{- if or .Values.imagePullSecrets .Values.global.imagePullSecrets }}
  {{- include "artifactory.imagePullSecrets" . | indent 6 }}
      {{- end }}
      {{- if .Values.jfbus.podSecurityContext.enabled }}
      securityContext: {{- omit .Values.jfbus.podSecurityContext "enabled" | toYaml | nindent 8 }}
      {{- end }}
      {{- if .Values.jfbus.serviceAccountName }}
      serviceAccountName: {{ .Values.jfbus.serviceAccountName }}
      {{- end}}
      initContainers:
        {{- if .Values.jfbus.customInitContainers }}
{{ tpl (include "artifactory.jfbus.customInitContainers" .)  . | indent 8 }}
        {{- end }}
        - name: 'copy-system-yaml'
          image: {{ include "artifactory.getImageInfoByValue" (list . "initContainers") }}
          imagePullPolicy: {{ .Values.initContainers.image.pullPolicy | quote }}
          {{- if .Values.jfbus.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.jfbus.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          {{- if .Values.initContainers.resources }}
          resources:
            {{- toYaml .Values.initContainers.resources | nindent 12 }}
          {{- end }}
          command:
            - '/bin/bash'
            - '-c'
            - >
              echo "Copy system.yaml to {{ .Values.jfbus.persistence.mountPath }}/etc";
              mkdir -p {{ .Values.jfbus.persistence.mountPath }}/etc;
              mkdir -p {{ .Values.jfbus.persistence.mountPath }}/etc/access/keys/trusted;
              {{- if .Values.systemYamlOverride.existingSecret }}
              cp -fv /tmp/etc/{{ .Values.systemYamlOverride.dataKey }} {{ .Values.jfbus.persistence.mountPath }}/etc/system.yaml;
              {{- else }}
              cp -fv /tmp/etc/system.yaml {{ .Values.jfbus.persistence.mountPath }}/etc/system.yaml;
              {{- end }}

              echo "Copy certificate access-root-ca.crt to {{ .Values.jfbus.persistence.mountPath }}/data/router/keys/trusted if needed";
              mkdir -p {{ .Values.jfbus.persistence.mountPath }}/data/router/keys/trusted;
              cp /tmp/etc/trusted/access-root-ca.crt {{ .Values.jfbus.persistence.mountPath }}/data/router/keys/trusted/access-root-ca.crt || echo "Could not copy certificate";
              echo "Remove {{ .Values.jfbus.persistence.mountPath }}/lost+found folder if exists";
              rm -rfv {{ .Values.jfbus.persistence.mountPath }}/lost+found;
          {{- if or .Values.artifactory.joinKey .Values.global.joinKey .Values.artifactory.joinKeySecretName .Values.global.joinKeySecretName }}
              echo "Copy joinKey to {{ .Values.jfbus.persistence.mountPath }}/etc/security";
              mkdir -p {{ .Values.jfbus.persistence.mountPath }}/etc/security;
              echo -n ${ARTIFACTORY_JOIN_KEY} > {{ .Values.jfbus.persistence.mountPath }}/etc/security/join.key;
          {{- end }}
          {{- if or .Values.artifactory.masterKey .Values.global.masterKey .Values.artifactory.masterKeySecretName .Values.global.masterKeySecretName }}
              echo "Copy masterKey to {{ .Values.jfbus.persistence.mountPath }}/etc/security";
              mkdir -p {{ .Values.jfbus.persistence.mountPath }}/etc/security;
              echo -n ${ARTIFACTORY_MASTER_KEY} > {{ .Values.jfbus.persistence.mountPath }}/etc/security/master.key;
          {{- end }}
          env:
          {{- if or .Values.artifactory.joinKey .Values.global.joinKey .Values.artifactory.joinKeySecretName .Values.global.joinKeySecretName }}
          - name: ARTIFACTORY_JOIN_KEY
            valueFrom:
              secretKeyRef:
              {{- if or (not .Values.artifactory.unifiedSecretInstallation) .Values.artifactory.joinKeySecretName .Values.global.joinKeySecretName }}
                name: {{ include "artifactory.joinKeySecretName" . }}
              {{- else }}
                name: "{{ template "artifactory.unifiedSecretPrependReleaseName" . }}-unified-secret"
              {{- end }}
                key: join-key
          {{- end }}
          {{- if or .Values.artifactory.masterKey .Values.global.masterKey .Values.artifactory.masterKeySecretName .Values.global.masterKeySecretName }}
          - name: ARTIFACTORY_MASTER_KEY
            valueFrom:
              secretKeyRef:
                {{- if or (not .Values.artifactory.unifiedSecretInstallation) .Values.artifactory.masterKeySecretName .Values.global.masterKeySecretName }}
                name: {{ include "artifactory.masterKeySecretName" . }}
                {{- else }}
                name: "{{ template "artifactory.unifiedSecretPrependReleaseName" . }}-unified-secret"
                {{- end }}
                key: master-key
          {{- end }}
          volumeMounts:
            - name: data
              mountPath: {{ .Values.jfbus.persistence.mountPath | quote }}
            {{- if or (not .Values.artifactory.unifiedSecretInstallation) .Values.systemYamlOverride.existingSecret }}
            - name: systemyaml
            {{- else }}
            - name: {{ include "artifactory.unifiedCustomSecretVolumeName" . }}
            {{- end }}
              {{- if .Values.systemYamlOverride.existingSecret }}
              mountPath: "/tmp/etc/{{.Values.systemYamlOverride.dataKey }}"
              subPath: {{ .Values.systemYamlOverride.dataKey }}
              {{- else  }}
              mountPath: "/tmp/etc/system.yaml"
              subPath: "system.yaml"
              {{- end }}
        {{- if .Values.jfbus.waitForArtifactory }}
        - name: wait-for-artifactory
          image: {{ include "artifactory.getImageInfoByValue" (list . "initContainers") }}
          imagePullPolicy: {{ .Values.initContainers.image.pullPolicy | quote }}
          {{- if .Values.jfbus.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.jfbus.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          {{- if .Values.initContainers.resources }}
          resources:
            {{- toYaml .Values.initContainers.resources | nindent 12 }}
          {{- end }}
          command:
          - /bin/sh
          - -c
          - |
            echo "Waiting for Artifactory service to be ready..."
            ready=false;
            while ! $ready; do echo waiting;
              curl --silent --output /dev/null --max-time 3 --fail http://{{ template "artifactory.fullname" . }}:{{ .Values.artifactory.internalPort }}/artifactory/api/v1/system/readiness; exit_status=$?;
              if [[ $exit_status -eq 0 ]]; then ready=true; echo "Artifactory is ready. Proceeding..."; fi; sleep 1;
            done
        {{- end }}
      containers:
        - name: jfbus
          image: {{ include "artifactory.getImageInfoByValue" (list . "jfbus") }}
          imagePullPolicy: {{ .Values.initContainers.image.pullPolicy | quote }}
          {{- if .Values.jfbus.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.jfbus.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          {{- if .Values.jfbus.customCommand }}
          command:
{{- tpl (include "jfbus.command" .) . | indent 12 }}
          {{- end }}
          ports:
            - name: http
              containerPort: {{ .Values.jfbus.internalRestPort }}
              protocol: TCP
            - name: grpc
              containerPort: {{ .Values.jfbus.grpcPort }}
              protocol: TCP
          volumeMounts:
            - name: data
              mountPath: {{ .Values.jfbus.persistence.mountPath | quote }}
            {{- if .Values.jfbus.customVolumeMounts }}
{{ tpl (include "artifactory.jfbus.customVolumeMounts" .) . | indent 12 }}
            {{- end }}
          env:
            - name: SERVICE_JSON_LOGS
              value: {{.Values.logging.logToStdoutJson | quote }}
            - name: JAVA_TOOL_OPTIONS
              value: "-Dio.opentelemetry.javaagent.slf4j.simpleLogger.defaultLogLevel=off"
            - name: JF_SHARED_NODE_ID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          {{- if or .Values.database.secrets.user .Values.database.user }}
            - name: JF_SHARED_DATABASE_USERNAME
              valueFrom:
                secretKeyRef:
            {{- if .Values.database.secrets.user }}
                  name: {{ tpl .Values.database.secrets.user.name . }}
                  key: {{ tpl .Values.database.secrets.user.key . }}
            {{- else if .Values.database.user }}
                  {{- if not .Values.artifactory.unifiedSecretInstallation }}
                  name: {{ template "artifactory.fullname" . }}-database-creds
                  {{- else }}
                  name: "{{ template "artifactory.unifiedSecretPrependReleaseName" . }}-unified-secret"
                  {{- end }}
                  key: db-user
            {{- end }}
          {{- end }}
          {{ if or .Values.database.secrets.password .Values.database.password .Values.postgresql.enabled }}
            - name: JF_SHARED_DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
            {{- if .Values.database.secrets.password }}
                  name: {{ tpl .Values.database.secrets.password.name . }}
                  key: {{ tpl .Values.database.secrets.password.key . }}
            {{- else if .Values.database.password }}
                  {{- if not .Values.artifactory.unifiedSecretInstallation }}
                  name: {{ template "artifactory.fullname" . }}-database-creds
                  {{- else }}
                  name: "{{ template "artifactory.unifiedSecretPrependReleaseName" . }}-unified-secret"
                  {{- end }}
                  key: db-password
            {{- else if .Values.postgresql.enabled }}
                  name: {{ .Release.Name }}-postgresql
                  key: password
            {{- end }}
          {{- end }}
          {{- if or .Values.database.secrets.url .Values.database.url }}
            - name: JF_SHARED_DATABASE_URL
              valueFrom:
                secretKeyRef:
            {{- if .Values.database.secrets.url }}
                  name: {{ tpl .Values.database.secrets.url.name . }}
                  key: {{ tpl .Values.database.secrets.url.key . }}
            {{- else if .Values.database.url }}
                  {{- if not .Values.artifactory.unifiedSecretInstallation }}
                  name: {{ template "artifactory.fullname" . }}-database-creds
                  {{- else }}
                  name: "{{ template "artifactory.unifiedSecretPrependReleaseName" . }}-unified-secret"
                  {{- end }}
                  key: db-url
            {{- end }}
          {{- end }}
            {{- if or .Values.artifactory.masterKey .Values.global.masterKey .Values.artifactory.masterKeySecretName .Values.global.masterKeySecretName }}
            - name: JF_SHARED_SECURITY_MASTERKEY
              valueFrom:
                secretKeyRef:
                {{- if or (not .Values.artifactory.unifiedSecretInstallation) .Values.artifactory.masterKeySecretName .Values.global.masterKeySecretName }}
                  name: {{ include "artifactory.masterKeySecretName" . }}
                {{- else }}
                  name: "{{ template "artifactory.unifiedSecretPrependReleaseName" . }}-unified-secret"
                {{- end }}
                  key: master-key
            {{- end }}
            {{- if or .Values.artifactory.joinKey .Values.global.joinKey .Values.artifactory.joinKeySecretName .Values.global.joinKeySecretName }}
            - name: JF_SHARED_SECURITY_JOINKEY
              valueFrom:
                secretKeyRef:
                {{- if or (not .Values.artifactory.unifiedSecretInstallation) .Values.artifactory.joinKeySecretName .Values.global.joinKeySecretName }}
                  name: {{ include "artifactory.joinKeySecretName" . }}
                {{- else }}
                  name: "{{ template "artifactory.unifiedSecretPrependReleaseName" . }}-unified-secret"
                {{- end }}
                  key: join-key
            {{- end }}
            - name: SPRING_PROFILES_ACTIVE
              value: {{ .Values.jfbus.activeProfile | quote }}
            {{- if .Values.jfbus.javaOpts }}
            - name: EXTRA_JAVA_OPTS
              value: {{ .Values.jfbus.javaOpts }}
            {{- end }}
{{- with .Values.jfbus.extraEnvironmentVariables }}
{{ tpl (toYaml .) $ | indent 12 }}
{{- end }}
          resources: {{- toYaml .Values.jfbus.resources | nindent 12 }}
          {{- if .Values.jfbus.startupProbe.enabled }}
          startupProbe:
{{ tpl .Values.jfbus.startupProbe.config . | indent 12 }}
          {{- end }}
          {{- if .Values.jfbus.readinessProbe.enabled }}
          readinessProbe:
{{ tpl .Values.jfbus.readinessProbe.config . | indent 12 }}
          {{- end }}
          {{- if .Values.jfbus.livenessProbe.enabled }}
          livenessProbe:
{{ tpl .Values.jfbus.livenessProbe.config . | indent 12 }}
          {{- end }}
          {{- with .Values.jfbus.lifecycle }}
          lifecycle:
{{ toYaml . | indent 12 }}
          {{- end }}
        - name: router
          image: {{ include "artifactory.getImageInfoByValue" (list . "router") }}
          imagePullPolicy: {{ .Values.router.image.pullPolicy }}
          resources: {{- toYaml .Values.router.resources | nindent 12 }}
          {{- if .Values.jfbus.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.jfbus.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          command:
            - '/bin/bash'
            - '-c'
            - >
              exec /opt/jfrog/router/app/bin/entrypoint-router.sh
          env:
            - name: JF_SHARED_JFROGURL
              value: {{ tpl (include "jfbus.jfrogUrl" .) . }}
            - name: JF_SHARED_NODE_ID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: JF_ROUTER_TOPOLOGY_LOCAL_REQUIREDSERVICETYPES
              value: "jfbus"
            {{- if or .Values.artifactory.masterKey .Values.global.masterKey .Values.artifactory.masterKeySecretName .Values.global.masterKeySecretName }}
            - name: JF_SHARED_SECURITY_MASTERKEY
              valueFrom:
                secretKeyRef:
                {{- if or (not .Values.artifactory.unifiedSecretInstallation) .Values.artifactory.masterKeySecretName .Values.global.masterKeySecretName }}
                  name: {{ include "artifactory.masterKeySecretName" . }}
                {{- else }}
                  name: "{{ template "artifactory.unifiedSecretPrependReleaseName" . }}-unified-secret"
                {{- end }}
                  key: master-key
            {{- end }}
            {{- if or .Values.artifactory.joinKey .Values.global.joinKey .Values.artifactory.joinKeySecretName .Values.global.joinKeySecretName }}
            - name: JF_SHARED_SECURITY_JOINKEY
              valueFrom:
                secretKeyRef:
                {{- if or (not .Values.artifactory.unifiedSecretInstallation) .Values.artifactory.joinKeySecretName .Values.global.joinKeySecretName }}
                  name: {{ include "artifactory.joinKeySecretName" . }}
                {{- else }}
                  name: "{{ template "artifactory.unifiedSecretPrependReleaseName" . }}-unified-secret"
                {{- end }}
                  key: join-key
            {{- end }}
{{- with .Values.router.extraEnvironmentVariables }}
{{ tpl (toYaml .) $ | indent 12 }}
{{- end }}
          ports:
            - name: http-router
              containerPort: {{ .Values.router.externalPort }}
          volumeMounts:
            - name: data
              mountPath: {{ .Values.router.persistence.mountPath | quote }}
              {{- with .Values.router.customVolumeMounts }}
{{ tpl . $ | indent 12 }}
              {{- end }}
            {{- if .Values.router.startupProbe.enabled }}
          startupProbe:
{{ tpl .Values.router.startupProbe.config . | indent 12 }}
            {{- end }}
            {{- if .Values.router.readinessProbe.enabled }}
          readinessProbe: 
{{ tpl .Values.router.readinessProbe.config . | indent 12 }}
            {{- end }}
            {{- if .Values.router.livenessProbe.enabled }}
          livenessProbe: 
{{ tpl .Values.router.livenessProbe.config . | indent 12 }}
            {{- end }}
            {{- with .Values.router.lifecycle }}
          lifecycle:
{{ toYaml . | indent 12 }}
            {{- end }}
      {{- if .Values.jfbus.customSidecarContainers }}
{{ tpl (include "artifactory.jfbus.customSidecarContainers" .)  . | indent 8 }}
      {{- end }}
      volumes:
        # system yaml
        {{- if .Values.systemYamlOverride.existingSecret }}
        - name: systemyaml
          secret:
            secretName: {{ .Values.systemYamlOverride.existingSecret }}
        {{- end }}

        #########  unifiedSecretInstallation ###########
      {{- if and .Values.artifactory.unifiedSecretInstallation (eq (include "artifactory.checkDuplicateUnifiedCustomVolume" .) "false" ) }}
        - name: {{ include "artifactory.unifiedCustomSecretVolumeName" . }}
          secret:
            secretName: "{{ template "artifactory.unifiedSecretPrependReleaseName" . }}-unified-secret"
      {{- else if not .Values.artifactory.unifiedSecretInstallation }}
        {{- if not .Values.systemYamlOverride.existingSecret }}
        - name: systemyaml
          secret:
            secretName: {{ printf "%s-%s" (include "artifactory.fullname" .) "systemyaml" }}
        {{- end }}
      {{- end }}
        {{- if .Values.jfbus.customVolumes }}
{{ tpl (include "artifactory.jfbus.customVolumes" .)  . | indent 8 }}
        {{- end }}
        - name: data
          emptyDir: {}
      {{- with .Values.jfbus.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.jfbus.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.jfbus.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end }}
