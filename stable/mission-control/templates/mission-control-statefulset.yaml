apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "mission-control.fullname" . }}
  labels:
    app: {{ template "mission-control.name" . }}
    chart: {{ template "mission-control.chart" . }}
    component: {{ .Values.missionControl.name }}
    heritage: {{ .Release.Service }}
    release: {{ .Release.Name }}
    {{- with .Values.missionControl.labels }}
{{ toYaml . | indent 4 }}
    {{- end }}
  {{- if .Release.IsUpgrade }}
    unifiedUpgradeAllowed: {{ required "\n\n**************************************\nSTOP! UPGRADE from Mission Control 3.x currently not supported!\nIf this is an upgrade over an existing Mission Control 4.x, explicitly pass 'unifiedUpgradeAllowed=true' to upgrade.\n**************************************\n" .Values.unifiedUpgradeAllowed | quote }}
  {{- end }}
  {{- if and .Release.IsUpgrade .Values.postgresql.enabled }}
    databaseUpgradeReady: {{ required "\n\n*********\nIMPORTANT: UPGRADE STOPPED to prevent data loss!\nReview CHANGELOG.md (https://github.com/jfrog/charts/blob/master/stable/mission-control/CHANGELOG.md), pass postgresql.image.tag '9.6.18-debian-10-r7' or '10.13.0-debian-10-r38' and databaseUpgradeReady=true if you are upgrading from chart version which has postgresql version 9.6.x or 10.13.x" .Values.databaseUpgradeReady | quote }}
  {{- end }}
spec:
  serviceName: {{ template "mission-control.fullname" . }}
  replicas: {{ .Values.replicaCount }}
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: {{ template "mission-control.name" . }}
      component: {{ .Values.missionControl.name }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "mission-control.name" . }}
        component: {{ .Values.missionControl.name }}
        release: {{ .Release.Name }}
        {{- with .Values.missionControl.labels }}
{{ toYaml . | indent 8 }}
        {{- end }}
      annotations:
        checksum/database-secrets: {{ include (print $.Template.BasePath "/database-secrets.yaml") . | sha256sum }}
        checksum/systemyaml: {{ include (print $.Template.BasePath "/mission-control-system-yaml.yaml") . | sha256sum }}
    spec:
      serviceAccountName: {{ template "mission-control.serviceAccountName" . }}
    {{- if or .Values.imagePullSecrets .Values.global.imagePullSecrets }}
{{- include "mission-control.imagePullSecrets" . | indent 6 }}
    {{- end }}
      securityContext:
        fsGroup: {{ .Values.common.uid }}
      initContainers:
    {{- if or .Values.common.customInitContainersBegin .Values.global.customInitContainersBegin }}
{{ tpl (include "mission-control.customInitContainersBegin" .)  . | indent 6 }}
    {{- end }}      
    {{- if .Values.elasticsearch.enabled }}
      - name: elasticsearch-init
        image: "{{ .Values.elasticsearch.initContainerImage }}"
        {{- if .Values.elasticsearch.configureDockerHost }}
        securityContext:
          privileged: true
        {{- end }}
        command:
        - '/bin/sh'
        - '-c'
        - >
          chmod -R 777 {{ .Values.elasticsearch.persistence.mountPath }};
          mkdir -p /usr/share/elasticsearch/data/certs;
          cp -fv /tmp/certs/* /usr/share/elasticsearch/data/certs;
        {{- if .Values.elasticsearch.configureDockerHost }}
          sysctl -w vm.max_map_count={{ .Values.elasticsearch.env.maxMapCount }}
        {{- end }}
        volumeMounts:
        - name: elastic-certs
          mountPath: /tmp/certs
        - name: elasticsearch-data
          mountPath: {{ .Values.elasticsearch.persistence.mountPath | quote }}
        resources:
{{ toYaml .Values.initContainers.resources | indent 10 }}
    {{- end }}
      - name: copy-system-yaml
        image: '{{ .Values.initContainerImage }}'
        securityContext:
          runAsUser: {{ .Values.common.uid }}
        command:
        - '/bin/sh'
        - '-c'
        - >
          echo "Copy system.yaml to {{ .Values.missionControl.persistence.mountPath }}/etc";
          mkdir -p {{ .Values.missionControl.persistence.mountPath }}/etc;
          {{- if .Values.systemYamlOverride.existingSecret }}
          cp -fv /tmp/etc/{{ .Values.systemYamlOverride.dataKey }} {{ .Values.missionControl.persistence.mountPath }}/etc/system.yaml;
          {{- else }}
          cp -fv /tmp/etc/system.yaml {{ .Values.missionControl.persistence.mountPath }}/etc/system.yaml;
          {{- end }}
          echo "Copy application.yaml to {{ .Values.missionControl.persistence.mountPath }}/bootstrap/mc";
          mkdir -p {{ .Values.missionControl.persistence.mountPath }}/bootstrap/mc;
          cp -fv /tmp/etc/application.yaml {{ .Values.missionControl.persistence.mountPath }}/bootstrap/mc/application.yaml;
          echo "Remove {{ .Values.missionControl.persistence.mountPath }}/lost+found folder if exists";
          rm -rfv {{ .Values.missionControl.persistence.mountPath }}/lost+found;
        {{- if or .Values.missionControl.joinKey .Values.missionControl.joinKeySecretName .Values.global.joinKey .Values.global.joinKeySecretName }}
          echo "Copy joinKey to {{ .Values.missionControl.persistence.mountPath }}/etc/security";
          mkdir -p {{ .Values.missionControl.persistence.mountPath }}/etc/security;
          echo ${MC_JOIN_KEY} > {{ .Values.missionControl.persistence.mountPath }}/etc/security/join.key;
        {{- end }}
        {{- if or .Values.missionControl.masterKey .Values.missionControl.masterKeySecretName .Values.global.masterKey .Values.global.masterKeySecretName }}
          echo "Copy masterKey to {{ .Values.missionControl.persistence.mountPath }}/etc/security";
          mkdir -p {{ .Values.missionControl.persistence.mountPath }}/etc/security;
          echo ${MC_MASTER_KEY} > {{ .Values.missionControl.persistence.mountPath }}/etc/security/master.key;
        {{- end }}
        env:
        {{- if or .Values.missionControl.joinKey .Values.missionControl.joinKeySecretName .Values.global.joinKey .Values.global.joinKeySecretName }}
        - name: MC_JOIN_KEY
          valueFrom:
            secretKeyRef:
              name: {{ include "mission-control.joinKeySecretName" . }}
              key: join-key
        {{- end }}
        {{- if or .Values.missionControl.masterKey .Values.missionControl.masterKeySecretName .Values.global.masterKey .Values.global.masterKeySecretName }}
        - name: MC_MASTER_KEY
          valueFrom:
            secretKeyRef:
              name: {{ include "mission-control.masterKeySecretName" . }}
              key: master-key
        {{- end }}
        volumeMounts:
        - name: mission-control-data
          mountPath: {{ .Values.missionControl.persistence.mountPath | quote }}
      {{- if or .Values.systemYamlOverride.existingSecret .Values.missionControl.systemYaml }}
        - name: systemyaml
          {{- if .Values.systemYamlOverride.existingSecret }}
          mountPath: "/tmp/etc/{{.Values.systemYamlOverride.dataKey}}"
          subPath: {{ .Values.systemYamlOverride.dataKey }}
          {{- else if .Values.missionControl.systemYaml }}
          mountPath: "/tmp/etc/system.yaml"
          subPath: system.yaml
          {{- end }}
      {{- end }}
        - name: applicationyaml
          mountPath: "/tmp/etc/application.yaml"
          subPath: application.yaml
        resources:
{{ toYaml .Values.initContainers.resources | indent 10 }}
      {{- if or .Values.missionControl.customCertificates.enabled .Values.global.customCertificates.enabled }}
      - name: copy-custom-certificates
        image: "{{ .Values.initContainerImage }}"
        resources:
{{ toYaml .Values.initContainers.resources | indent 10 }}
        command:
        - 'sh'
        - '-c'
        - >
{{ include "mission-control.copyCustomCerts" . | indent 10 }}
        volumeMounts:
          - name: mission-control-data
            mountPath: {{ .Values.missionControl.persistence.mountPath }}
          - name: ca-certs
            mountPath: "/tmp/certs"
      {{- end }}
      {{- if or .Values.postgresql.enabled ( and .Values.database.host .Values.database.port ) }}
      - name: wait-for-db
        image: "{{ .Values.initContainerImage }}"
        command:
        - 'sh'
        - '-c'
        - >
      {{- if .Values.postgresql.enabled }}
          until nc -z -w 2 {{ .Release.Name }}-postgresql {{ .Values.postgresql.service.port }} && echo database ok; do
      {{- else }}
        {{- if and .Values.database.host .Values.database.port }}
          until nc -z -w 2 {{ .Values.database.host }} {{ .Values.database.port }} && echo database ok; do
        {{- else }}
          until true; do
        {{- end }}
      {{- end }}
            sleep 2;
          done;
    {{- end }}
        resources:
{{ toYaml .Values.initContainers.resources | indent 10 }}
    {{- if .Values.postgresql.enabled }}
      - name: postgresql-setup
        image: "{{ .Values.dbSetup.postgresql.image.repository }}:{{ .Values.dbSetup.postgresql.image.tag }}"
        env:
        - name: DB_PORT
          value: '{{ .Values.postgresql.service.port }}'
        - name: DB_HOST
          value: '{{ .Release.Name }}-postgresql'
        - name: DB_NAME
          value: '{{ .Values.postgresql.db.name }}'
        - name: DB_SSLMODE
          value: '{{ .Values.postgresql.db.sslmode }}'
        - name: DB_TABLESPACE
          value: '{{ .Values.postgresql.db.tablespace }}'
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-postgresql
              key: postgresql-password
        - name: JFMC_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "mission-control.fullname" . }}-database-creds
              key: db-password
        - name: JFMC_DB_USERNAME
          value: '{{ .Values.postgresql.db.user }}'
        - name: JFMC_DB_SCHEMA
          value: '{{ .Values.postgresql.db.jfmcSchema }}'
        - name: JFSC_DB_USERNAME
          value: '{{ .Values.postgresql.db.user }}'
        - name: JFSC_DB_SCHEMA
          value: '{{ .Values.postgresql.db.jfscSchema }}'
        - name: JFSC_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "mission-control.fullname" . }}-database-creds
              key: db-password
        - name: JFIS_DB_USERNAME
          value: '{{ .Values.postgresql.db.user }}'
        - name: JFIS_DB_SCHEMA
          value: '{{ .Values.postgresql.db.jfisSchema }}'
        - name: JFIS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "mission-control.fullname" . }}-database-creds
              key: db-password
        command:
        - 'bash'
        - '-c'
        - 'su postgres -c "PGPASSWORD=${PGPASSWORD} bash /scripts/createPostgresUsers.sh all"'
        volumeMounts:
        - name: postgresql-setup
          mountPath: "/scripts"
        resources:
{{ toYaml .Values.initContainers.resources | indent 10 }}
    {{- end }}
    {{- if or .Values.common.customInitContainers .Values.global.customInitContainers }}
{{ tpl (include "mission-control.customInitContainers" .)  . | indent 6 }}
    {{- end }}
      {{- if .Values.hostAliases }}
      hostAliases:
{{ toYaml .Values.hostAliases | indent 6 }}
      {{- end }}
      containers:
    {{- if .Values.elasticsearch.enabled }}
      - name: {{ .Values.elasticsearch.name }}
        image: {{ include "mission-control.getImageInfoByValue" (list . "elasticsearch") }}
        imagePullPolicy: {{ .Values.elasticsearch.imagePullPolicy }}
        command:
        - '/bin/sh'
        - '-c'
        - >
          sleep 10;
          if [[ $mission_control_pod_name == *"-0"* ]] ; then echo "Setting clustersetup to no" && export ELASTICSEARCH_CLUSTERSETUP=NO; else echo "Setting clustersetup to yes" && export ELASTICSEARCH_CLUSTERSETUP=YES; fi;
          (/usr/local/bin/initializeSearchGuard.sh &) && docker-entrypoint.sh 'elasticsearch';        
        env:  
        - name: 'mission_control_pod_name'
          valueFrom:
            fieldRef:
              fieldPath: metadata.name        
        - name: 'cluster.name'
          value: '{{ .Values.elasticsearch.env.clusterName }}'
        - name: 'network.host'
          value: '{{ .Values.elasticsearch.env.networkHost }}'
        - name: 'transport.host'
          value: '{{ .Values.elasticsearch.env.transportHost }}'
        - name: 'transport.port'	
          value: '{{ .Values.elasticsearch.transportPort }}'
        - name: 'discovery.seed_hosts'
          value: '{{ template "mission-control.fullname" . }}'
        - name: 'cluster.initial_master_nodes'
          value: '{{ template "elasticsearch.endpoints" . }}'
        - name: ELASTICSEARCH_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "mission-control.fullname" . }}-elasticsearch-cred
              key: password
        - name: ELASTICSEARCH_USERNAME
          valueFrom:
            secretKeyRef:
              name: {{ template "mission-control.fullname" . }}-elasticsearch-cred
              key: username
        - name: JF_SHARED_ELASTICSEARCH_USERNAME
          valueFrom:
            secretKeyRef:
              name: {{ template "mission-control.fullname" . }}-elasticsearch-cred
              key: username
        - name: JF_SHARED_ELASTICSEARCH_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "mission-control.fullname" . }}-elasticsearch-cred
              key: password
        - name: ES_JAVA_OPTS
          value: "
          {{- if .Values.elasticsearch.javaOpts.xms }}
              -Xms{{ .Values.elasticsearch.javaOpts.xms }}
          {{- end }}
          {{- if .Values.elasticsearch.javaOpts.xmx }}
              -Xmx{{ .Values.elasticsearch.javaOpts.xmx }}
          {{- end }}
          "
        - name: JF_SHARED_ELASTICSEARCH_URL
          valueFrom:
            secretKeyRef:
              name: {{ template "mission-control.fullname" . }}-elasticsearch-cred
              key: url
        ports:
        - name: tcp-estransprt
          containerPort: {{ .Values.elasticsearch.transportPort }}
        volumeMounts:
        - name: elasticsearch-data
          mountPath: {{ .Values.elasticsearch.persistence.mountPath | quote }}
        resources:
{{ toYaml .Values.elasticsearch.resources | indent 10 }}
{{- if .Values.elasticsearch.startupProbe.enabled }}
        startupProbe:
{{ tpl .Values.elasticsearch.startupProbe.config . | indent 10 }}
{{- end }}
{{- if .Values.elasticsearch.livenessProbe.enabled }}
        livenessProbe:
{{ tpl .Values.elasticsearch.livenessProbe.config . | indent 10 }}
{{- end }}
{{- if .Values.elasticsearch.readinessProbe.enabled }}
        readinessProbe:
{{ tpl .Values.elasticsearch.readinessProbe.config . | indent 10 }}
{{- end }}
    {{- end }}
      - name: {{ .Values.router.name }}
        image: {{ include "mission-control.getImageInfoByValue" (list . "router") }}
        imagePullPolicy: {{ .Values.router.image.imagePullPolicy }}
        command:
        - '/bin/sh'
        - '-c'
        - >
          exec /opt/jfrog/router/app/bin/entrypoint-router.sh;
        ports:
        - name: http-router
          containerPort: {{ .Values.router.internalPort }}
        securityContext:
          allowPrivilegeEscalation: false
          runAsUser: {{ .Values.common.uid }}
        volumeMounts:
        - name: mission-control-data
          mountPath: {{ .Values.router.persistence.mountPath | quote }}
      {{- if or .Values.common.customVolumeMounts .Values.global.customVolumeMounts }}
{{ tpl (include "mission-control.customVolumeMounts" .) . | indent 8 }}
      {{- end }}
        resources:
{{ toYaml .Values.router.resources | indent 10 }}
{{- if .Values.router.startupProbe.enabled }}
        startupProbe:
{{ tpl .Values.router.startupProbe.config . | indent 10 }}
{{- end }}
{{- if .Values.router.livenessProbe.enabled }}
        livenessProbe:
{{ tpl .Values.router.livenessProbe.config . | indent 10 }}
{{- end }}
{{- if .Values.router.readinessProbe.enabled }}
        readinessProbe:
{{ tpl .Values.router.readinessProbe.config . | indent 10 }}
{{- end }}
      - name: {{ .Values.missionControl.name }}
        image: {{ include "mission-control.getImageInfoByValue" (list . "missionControl") }}
        imagePullPolicy: {{ .Values.imagePullPolicy }}
        command:
        - '/bin/bash'
        - '-c'
        - >
        {{- with .Values.missionControl.preStartCommand }}
          echo "Running custom preStartCommand command";
          {{ tpl . $ }};
        {{- end }}
          exec /opt/jfrog/mc/app/bin/entrypoint-mc.sh;
        env:
      {{- if or .Values.database.secrets.user .Values.database.user }}
        - name: JF_SHARED_DATABASE_USERNAME
          valueFrom:
            secretKeyRef:
        {{- if .Values.database.secrets.user }}
              name: {{ tpl .Values.database.secrets.user.name .}}
              key: {{ tpl .Values.database.secrets.user.key .}}
        {{- else if .Values.database.user }}
              name: {{ template "mission-control.fullname" . }}-database-creds
              key: db-user
        {{- end }}
      {{- end }}
      {{ if or .Values.database.secrets.password .Values.database.password .Values.postgresql.enabled }}
        - name: JF_SHARED_DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
        {{- if .Values.database.secrets.password }}
              name: {{ tpl .Values.database.secrets.password.name . }}
              key: {{ tpl .Values.database.secrets.password.key . }}
        {{- else if or .Values.database.password .Values.postgresql.enabled }}
              name: {{ template "mission-control.fullname" . }}-database-creds
              key: db-password
        {{- end }}
      {{- end }}
      {{- if or .Values.database.secrets.url .Values.database.url }}
        - name: JF_SHARED_DATABASE_URL
          valueFrom:
            secretKeyRef:
        {{- if .Values.database.secrets.url }}
              name: {{ tpl .Values.database.secrets.url.name .}}
              key: {{ tpl .Values.database.secrets.url.key .}}
        {{- else if .Values.database.url }}
              name: {{ template "mission-control.fullname" . }}-database-creds
              key: db-url
        {{- end }}
      {{- end }}
        ports:
        - containerPort: {{ .Values.missionControl.internalPort }}
          protocol: TCP
          name: http-mc
        volumeMounts:
        - name: mission-control-data
          mountPath: {{ .Values.missionControl.persistence.mountPath | quote }}
      {{- if or .Values.common.customVolumeMounts .Values.global.customVolumeMounts }}
{{ tpl (include "mission-control.customVolumeMounts" .) . | indent 8 }}
      {{- end }}
        resources:
{{ toYaml .Values.missionControl.resources | indent 10 }}
{{- if .Values.missionControl.startupProbe.enabled }}
        startupProbe:
{{ tpl .Values.missionControl.startupProbe.config . | indent 10 }}
{{- end }}
{{- if .Values.missionControl.livenessProbe.enabled }}
        livenessProbe:
{{ tpl .Values.missionControl.livenessProbe.config . | indent 10 }}
{{- end }}
{{- if .Values.missionControl.readinessProbe.enabled }}
        readinessProbe:
{{ tpl .Values.missionControl.readinessProbe.config . | indent 10 }}
{{- end }}
      {{- if .Values.filebeat.enabled }}
      - name: {{ .Values.filebeat.name }}
        image: "{{ .Values.filebeat.image.repository }}:{{ .Values.filebeat.image.version }}"
        imagePullPolicy: {{ .Values.filebeat.image.pullPolicy }}
        args:
        - "-e"
        - "-E"
        - "http.enabled=true"
        securityContext:
          runAsUser: 0
        volumeMounts:
        - name: filebeat-config
          mountPath: /usr/share/filebeat/filebeat.yml
          readOnly: true
          subPath: filebeat.yml
        - name: mission-control-data
          mountPath: "{{ .Values.missionControl.persistence.mountPath }}"
        livenessProbe:
{{ toYaml .Values.filebeat.livenessProbe | indent 10 }}
        readinessProbe:
{{ toYaml .Values.filebeat.readinessProbe | indent 10 }}
        resources:
{{ toYaml .Values.filebeat.resources | indent 10 }}
        terminationGracePeriodSeconds: {{ .Values.terminationGracePeriod }}
      {{- end }}
        resources:
{{ toYaml .Values.missionControl.resources | indent 10 }}
      - name: {{ .Values.insightServer.name }}
        image: {{ include "mission-control.getImageInfoByValue" (list . "insightServer") }}
        imagePullPolicy: {{ .Values.imagePullPolicy }}
        env:
        {{- if or .Values.database.secrets.user .Values.database.user }}
        - name: JF_SHARED_DATABASE_USERNAME
          valueFrom:
            secretKeyRef:
        {{- if .Values.database.secrets.user }}
              name: {{ tpl .Values.database.secrets.user.name .}}
              key: {{ tpl .Values.database.secrets.user.key .}}
        {{- else if .Values.database.user }}
              name: {{ template "mission-control.fullname" . }}-database-creds
              key: db-user
        {{- end }}
      {{- end }}
      {{ if or .Values.database.secrets.password .Values.database.password .Values.postgresql.enabled }}
        - name: JF_SHARED_DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
        {{- if .Values.database.secrets.password }}
              name: {{ tpl .Values.database.secrets.password.name . }}
              key: {{ tpl .Values.database.secrets.password.key . }}
        {{- else if or .Values.database.password .Values.postgresql.enabled }}
              name: {{ template "mission-control.fullname" . }}-database-creds
              key: db-password
        {{- end }}
      {{- end }}
      {{- if or .Values.database.secrets.url .Values.database.url }}
        - name: JF_SHARED_DATABASE_URL
          valueFrom:
            secretKeyRef:
        {{- if .Values.database.secrets.url }}
              name: {{ tpl .Values.database.secrets.url.name .}}
              key: {{ tpl .Values.database.secrets.url.key .}}
        {{- else if .Values.database.url }}
              name: {{ template "mission-control.fullname" . }}-database-creds
              key: db-url
        {{- end }}
      {{- end }}
        ports:
        - containerPort: {{ .Values.insightServer.internalPort }}
          protocol: TCP
          name: http-inserver
        volumeMounts:
        - name: mission-control-data
          mountPath: {{ .Values.missionControl.persistence.mountPath | quote }}
      {{- if or .Values.common.customVolumeMounts .Values.global.customVolumeMounts }}
{{ tpl (include "mission-control.customVolumeMounts" .) . | indent 8 }}
      {{- end }}
        resources:
{{ toYaml .Values.insightServer.resources | indent 10 }}
{{- if .Values.insightServer.startupProbe.enabled }}
        startupProbe:
{{ tpl .Values.insightServer.startupProbe.config . | indent 10 }}
{{- end }}
{{- if .Values.insightServer.livenessProbe.enabled }}
        livenessProbe:
{{ tpl .Values.insightServer.livenessProbe.config . | indent 10 }}
{{- end }}
{{- if .Values.insightServer.readinessProbe.enabled }}
        readinessProbe:
{{ tpl .Values.insightServer.readinessProbe.config . | indent 10 }}
{{- end }}
      - name: {{ .Values.insightScheduler.name }}
        image: {{ include "mission-control.getImageInfoByValue" (list . "insightScheduler") }}
        imagePullPolicy: {{ .Values.imagePullPolicy }}
        env:
        - name: JFMC_EXTRA_JAVA_OPTS
          value: "
          {{- if .Values.insightScheduler.javaOpts.other }}
              {{ .Values.insightScheduler.javaOpts.other }}
          {{- end}}
          {{- if .Values.insightScheduler.javaOpts.xms }}
              -Xms{{ .Values.insightScheduler.javaOpts.xms }}
          {{- end}}
          {{- if .Values.insightScheduler.javaOpts.xmx }}
              -Xmx{{ .Values.insightScheduler.javaOpts.xmx }}
          {{- end}}
          -Dserver.port={{ .Values.insightScheduler.internalPort }}
          "
        {{- if or .Values.database.secrets.user .Values.database.user }}
        - name: JF_SHARED_DATABASE_USERNAME
          valueFrom:
            secretKeyRef:
        {{- if .Values.database.secrets.user }}
              name: {{ tpl .Values.database.secrets.user.name .}}
              key: {{ tpl .Values.database.secrets.user.key .}}
        {{- else if .Values.database.user }}
              name: {{ template "mission-control.fullname" . }}-database-creds
              key: db-user
        {{- end }}
      {{- end }}
      {{ if or .Values.database.secrets.password .Values.database.password .Values.postgresql.enabled }}
        - name: JF_SHARED_DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
        {{- if .Values.database.secrets.password }}
              name: {{ tpl .Values.database.secrets.password.name . }}
              key: {{ tpl .Values.database.secrets.password.key . }}
        {{- else if or .Values.database.password .Values.postgresql.enabled }}
              name: {{ template "mission-control.fullname" . }}-database-creds
              key: db-password
        {{- end }}
      {{- end }}
      {{- if or .Values.database.secrets.url .Values.database.url }}
        - name: JF_SHARED_DATABASE_URL
          valueFrom:
            secretKeyRef:
        {{- if .Values.database.secrets.url }}
              name: {{ tpl .Values.database.secrets.url.name .}}
              key: {{ tpl .Values.database.secrets.url.key .}}
        {{- else if .Values.database.url }}
              name: {{ template "mission-control.fullname" . }}-database-creds
              key: db-url
        {{- end }}
      {{- end }}
        ports:
        - containerPort: {{ .Values.insightScheduler.internalPort }}
          protocol: TCP
          name: http-insched
        volumeMounts:
        - name: mission-control-data
          mountPath: {{ .Values.missionControl.persistence.mountPath | quote }}
      {{- if or .Values.common.customVolumeMounts .Values.global.customVolumeMounts }}
{{ tpl (include "mission-control.customVolumeMounts" .) . | indent 8 }}
      {{- end }}
        resources:
{{ toYaml .Values.insightScheduler.resources | indent 10 }}
{{- if .Values.insightScheduler.startupProbe.enabled }}
        startupProbe:
{{ tpl .Values.insightScheduler.startupProbe.config . | indent 10 }}
{{- end }}
{{- if .Values.insightScheduler.livenessProbe.enabled }}
        livenessProbe:
{{ tpl .Values.insightScheduler.livenessProbe.config . | indent 10 }}
{{- end }}
{{- if .Values.insightScheduler.readinessProbe.enabled }}
        readinessProbe:
{{ tpl .Values.insightScheduler.readinessProbe.config . | indent 10 }}
{{- end }}
      {{- $image := .Values.logger.image.repository }}
      {{- $tag := .Values.logger.image.tag }}
      {{- $uid := .Values.common.uid }}
      {{- $context := .Values.missionControl.appContext }}
      {{- $name := .Values.missionControl.name }}
      {{- $mountPath := .Values.missionControl.persistence.mountPath }}
      {{- range .Values.missionControl.loggers }}
      - name: {{ $name }}-{{ . | replace "_" "-" | replace "." "-" }}
        image: {{ include "mission-control.getImageInfoByValue" (list $ "logger") }}
        securityContext:
          runAsUser: {{ $uid }}
          allowPrivilegeEscalation: false
        command:
          - tail
        args:
          - '-F'
          - '{{ $mountPath }}/logs/{{ $context }}/{{ . }}'
        volumeMounts:
          - name: mission-control-data
            mountPath: {{ $mountPath }}
        resources:
{{ toYaml $.Values.missionControl.loggersResources | indent 10 }}
      {{- end }}
      {{- $name := .Values.insightServer.name }}
      {{- $context := .Values.insightServer.appContext }}
      {{- $mountPath := .Values.insightServer.persistence.mountPath }}
      {{- range .Values.insightServer.loggers }}
      - name: {{ $name }}-{{ . | replace "_" "-" | replace "." "-" }}
        image: {{ include "mission-control.getImageInfoByValue" (list $ "logger") }}
        securityContext:
          runAsUser: {{ $uid }}
          allowPrivilegeEscalation: false
        command:
          - tail
        args:
          - '-F'
          - '{{ $mountPath }}/logs/{{ $context }}/{{ . }}'
        volumeMounts:
          - name: mission-control-data
            mountPath: {{ $mountPath }}
        resources:
 {{ toYaml $.Values.insightServer.loggersResources | indent 10 }}
      {{- end }}
      {{- $name := .Values.insightScheduler.name }}
      {{- $context := .Values.insightScheduler.appContext }}
      {{- $mountPath := .Values.insightScheduler.persistence.mountPath }}
      {{- range .Values.insightScheduler.loggers }}
      - name: {{ $name }}-{{ . | replace "_" "-" | replace "." "-" }}
        image: {{ include "mission-control.getImageInfoByValue" (list $ "logger") }}
        securityContext:
          runAsUser: {{ $uid }}
          allowPrivilegeEscalation: false
        command:
          - tail
        args:
          - '-F'
          - '{{ $mountPath }}/logs/{{ $context }}/{{ . }}'
        volumeMounts:
          - name: mission-control-data
            mountPath: {{ $mountPath }}
        resources:
{{ toYaml $.Values.insightScheduler.loggersResources | indent 10 }}
      {{- end }}
    {{- if or .Values.common.customSidecarContainers .Values.global.customSidecarContainers }}
{{ tpl (include "mission-control.customSidecarContainers" .) . | indent 6 }}
    {{- end }}
    {{- with .Values.missionControl.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.missionControl.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.missionControl.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}
      volumes:
      {{- if or .Values.missionControl.customCertificates.enabled .Values.global.customCertificates.enabled }}
      - name: ca-certs
        secret:
          secretName: {{ default .Values.global.customCertificates.certificateSecretName .Values.missionControl.customCertificates.certificateSecretName }}
      {{- end }}
      {{- if .Values.elasticsearch.enabled }}
      - name: elastic-certs
        secret:
          secretName: {{ default (printf "%s-%s" (include "mission-control.fullname" .) "elasticsearch-certs") .Values.elasticsearch.certificatesSecretName }}
      {{- end }}
      - name: applicationyaml
        secret:
          secretName: {{ template "mission-control.fullname" . }}-applicationyaml
      {{- if or .Values.systemYamlOverride.existingSecret .Values.missionControl.systemYaml }}
      - name: systemyaml
        secret:
          secretName: {{ default (printf "%s-%s" (include "mission-control.fullname" .) "systemyaml") .Values.systemYamlOverride.existingSecret }}
      {{- end }}
      {{- if .Values.postgresql.enabled }}
      - name: postgresql-setup
        configMap:
          name: {{ template "mission-control.fullname" . }}-postgresql-setup-script
      {{- end }}
      - name: jfmc-setup-scripts
        configMap:
          name: {{ template "mission-control.fullname" . }}-jfmc-setup-scripts
    {{- if .Values.filebeat.enabled }}
      - name: filebeat-config
        configMap:
          name: {{ template "mission-control.fullname" . }}-filebeat-config
    {{- end }}
      {{- if .Values.common.configMaps }}
      - name: mission-control-configmaps
        configMap:
          name: {{ template "mission-control.fullname" . }}-configmaps
      {{- end }}
      {{- if or .Values.common.customVolumes .Values.global.customVolumes }}
{{ tpl (include "mission-control.customVolumes" .) . | indent 6 }}
      {{- end }}
    {{- if not .Values.missionControl.persistence.enabled }}
      - name: mission-control-data
        emptyDir: {}
    {{- end }}
    {{- if and (.Values.missionControl.persistence.enabled) (.Values.missionControl.persistence.existingClaim) }}
      - name: mission-control-data
        persistentVolumeClaim:
          claimName: {{ .Values.missionControl.persistence.existingClaim }}
    {{- end }}
    {{- if not .Values.elasticsearch.persistence.enabled }}
      - name: elasticsearch-data
        emptyDir: {}
    {{- end }}
    {{- if and (.Values.elasticsearch.persistence.enabled) (.Values.elasticsearch.persistence.existingClaim) }}
      - name: elasticsearch-data
        persistentVolumeClaim:
          claimName: {{ .Values.elasticsearch.persistence.existingClaim }}
    {{- end }}    
  volumeClaimTemplates:
    {{- if and (.Values.missionControl.persistence.enabled) (not .Values.missionControl.persistence.existingClaim) }}
    - metadata:
        name: mission-control-data
      spec:
        {{- if .Values.missionControl.persistence.storageClass }}
        {{- if (eq "-" .Values.missionControl.persistence.storageClass) }}
        storageClassName: ''
        {{- else }}
        storageClassName: '{{ .Values.missionControl.persistence.storageClass }}'
        {{- end }}
        {{- end }}
        accessModes: [ '{{ .Values.missionControl.persistence.accessMode }}' ]
        resources:
          requests:
            storage: {{ .Values.missionControl.persistence.size }}
    {{- end }}
    {{- if and (.Values.elasticsearch.persistence.enabled) (not .Values.elasticsearch.persistence.existingClaim) }}
    - metadata:
        name: elasticsearch-data
      spec:
        {{- if .Values.elasticsearch.persistence.storageClass }}
        {{- if (eq "-" .Values.elasticsearch.persistence.storageClass) }}
        storageClassName: ''
        {{- else }}
        storageClassName: '{{ .Values.elasticsearch.persistence.storageClass }}'
        {{- end }}
        {{- end }}
        accessModes: [ '{{ .Values.elasticsearch.persistence.accessMode }}' ]
        resources:
          requests:
            storage: {{ .Values.elasticsearch.persistence.size }}
    {{- end }}
