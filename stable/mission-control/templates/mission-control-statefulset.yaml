apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "mission-control.fullname" . }}
  labels:
    app: {{ template "mission-control.name" . }}
    chart: {{ template "mission-control.chart" . }}
    component: {{ .Values.missionControl.name }}
    version: {{ default .Chart.AppVersion .Values.missionControl.version }}
    heritage: {{ .Release.Service }}
    release: {{ .Release.Name }}
  {{- if .Release.IsUpgrade }}
    unifiedUpgradeAllowed: {{ required "\n\n**************************************\nSTOP! UPGRADE from Mission Control 3.x currently not supported!\nIf this is an upgrade over an existing Mission Control 4.x, explicitly pass 'unifiedUpgradeAllowed=true' to upgrade.\n**************************************\n" .Values.unifiedUpgradeAllowed | quote }}
  {{- end }}
spec:
  serviceName: {{ template "mission-control.fullname" . }}
  replicas: {{ .Values.replicaCount }}
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: {{ template "mission-control.name" . }}
      component: {{ .Values.missionControl.name }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "mission-control.name" . }}
        component: {{ .Values.missionControl.name }}
        release: {{ .Release.Name }}
      annotations:
        checksum/systemyaml: {{ include (print $.Template.BasePath "/mission-control-system-yaml.yaml") . | sha256sum }}
    spec:
      serviceAccountName: {{ template "mission-control.serviceAccountName" . }}
    {{- if .Values.imagePullSecrets }}
      imagePullSecrets:
      - name: {{ .Values.imagePullSecrets }}
    {{- end }}
      securityContext:
        fsGroup: {{ .Values.uid }}
      initContainers:
    {{- if .Values.elasticsearch.enabled }}
      - name: elasticsearch-init
        image: "{{ .Values.elasticsearch.initContainerImage }}"
        {{- if .Values.elasticsearch.configureDockerHost }}
        securityContext:
          privileged: true
        {{- end }}
        command:
        - '/bin/sh'
        - '-c'
        - >
          chmod -R 777 {{ .Values.elasticsearch.persistence.mountPath }};
        {{- if .Values.elasticsearch.configureDockerHost }}
          sysctl -w vm.max_map_count={{ .Values.elasticsearch.env.maxMapCount }}
        {{- end }}
        volumeMounts:
        - name: elasticsearch-data
          mountPath: {{ .Values.elasticsearch.persistence.mountPath | quote }}
        resources:
{{ toYaml .Values.initContainers.resources | indent 10 }}
    {{- end }}
      - name: copy-system-yaml
        image: '{{ .Values.initContainerImage }}'
        securityContext:
          runAsUser: {{ .Values.uid }}
        command:
        - '/bin/sh'
        - '-c'
        - >
          echo "Copy system.yaml to {{ .Values.missionControl.persistence.mountPath }}/etc";
          mkdir -p {{ .Values.missionControl.persistence.mountPath }}/etc;
          cp -fv /tmp/etc/system.yaml {{ .Values.missionControl.persistence.mountPath }}/etc/system.yaml;
          echo "Copy application.yaml to {{ .Values.missionControl.persistence.mountPath }}/bootstrap/mc";
          mkdir -p {{ .Values.missionControl.persistence.mountPath }}/bootstrap/mc;
          cp -fv /tmp/etc/application.yaml {{ .Values.missionControl.persistence.mountPath }}/bootstrap/mc/application.yaml;
          echo "Remove {{ .Values.missionControl.persistence.mountPath }}/lost+found folder if exists";
          rm -rfv {{ .Values.missionControl.persistence.mountPath }}/lost+found;
        {{- if or .Values.missionControl.joinKey .Values.missionControl.joinKeySecretName }}
          echo "Copy joinKey to {{ .Values.missionControl.persistence.mountPath }}/etc/security";
          mkdir -p {{ .Values.missionControl.persistence.mountPath }}/etc/security;
          echo ${MC_JOIN_KEY} > {{ .Values.missionControl.persistence.mountPath }}/etc/security/join.key;
        {{- end }}
        {{- if or .Values.missionControl.masterKey .Values.missionControl.masterKeySecretName }}
          echo "Copy masterKey to {{ .Values.missionControl.persistence.mountPath }}/etc/security";
          mkdir -p {{ .Values.missionControl.persistence.mountPath }}/etc/security;
          echo ${MC_MASTER_KEY} > {{ .Values.missionControl.persistence.mountPath }}/etc/security/master.key;
        {{- end }}
        env:
        {{- if or .Values.missionControl.joinKey .Values.missionControl.joinKeySecretName }}
        - name: MC_JOIN_KEY
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.missionControl.joinKeySecretName | default (include "mission-control.fullname" .) }}"
              key: join-key
        {{- end }}
        {{- if or .Values.missionControl.mcKey .Values.missionControl.masterKey .Values.missionControl.masterKeySecretName }}
        - name: MC_MASTER_KEY
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.missionControl.masterKeySecretName | default (include "mission-control.fullname" .) }}"
              key: master-key
        {{- end }}
        volumeMounts:
        - name: mission-control-data
          mountPath: {{ .Values.missionControl.persistence.mountPath | quote }}
        - name: systemyaml
          mountPath: "/tmp/etc/system.yaml"
          subPath: system.yaml
        - name: applicationyaml
          mountPath: "/tmp/etc/application.yaml"
          subPath: application.yaml
      {{- if or .Values.postgresql.enabled ( and .Values.database.host .Values.database.port ) }}
      - name: wait-for-db
        image: "{{ .Values.initContainerImage }}"
        command:
        - 'sh'
        - '-c'
        - >
      {{- if .Values.postgresql.enabled }}
          until nc -z -w 2 {{ .Release.Name }}-postgresql {{ .Values.postgresql.service.port }} && echo database ok; do
      {{- else }}
        {{- if and .Values.database.host .Values.database.port }}
          until nc -z -w 2 {{ .Values.database.host }} {{ .Values.database.port }} && echo database ok; do
        {{- else }}
          until true; do
        {{- end }}
      {{- end }}
            sleep 2;
          done;
    {{- end }}
        resources:
{{ toYaml .Values.initContainers.resources | indent 10 }}
    {{- if .Values.postgresql.enabled }}
      - name: postgresql-setup
        image: "{{ .Values.dbSetup.postgresql.image.repository }}:{{ .Values.dbSetup.postgresql.image.tag }}"
        env:
        - name: DB_PORT
          value: '{{ .Values.postgresql.service.port }}'
        - name: DB_HOST
          value: '{{ .Release.Name }}-postgresql'
        - name: DB_NAME
          value: '{{ .Values.postgresql.db.name }}'
        - name: DB_SSLMODE
          value: '{{ .Values.postgresql.db.sslmode }}'
        - name: DB_TABLESPACE
          value: '{{ .Values.postgresql.db.tablespace }}'
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              {{- if .Values.postgresql.postgresqlPassword }}
              name: {{ template "mission-control.fullname" . }}-db-cred
              key: postgres-password
            {{- else }}
              name: {{ .Release.Name }}-postgresql
              key: postgresql-password
            {{- end }}
        - name: JFMC_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "mission-control.fullname" . }}-db-cred
              key: jfmcPassword
        - name: JFMC_DB_USERNAME
          value: '{{ .Values.postgresql.db.jfmcUsername }}'
        - name: JFMC_DB_SCHEMA
          value: '{{ .Values.postgresql.db.jfmcSchema }}'
        - name: JFEX_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "mission-control.fullname" . }}-db-cred
              key: jfexPassword
        - name: JFEX_DB_USERNAME
          value: '{{ .Values.postgresql.db.jfexUsername }}'
        - name: JFEX_DB_SCHEMA
          value: '{{ .Values.postgresql.db.jfexSchema }}'
        - name: JFSC_DB_USERNAME
          value: '{{ .Values.postgresql.db.jfscUsername }}'
        - name: JFSC_DB_SCHEMA
          value: '{{ .Values.postgresql.db.jfscSchema }}'
        - name: JFSC_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "mission-control.fullname" . }}-db-cred
              key: jfscPassword
        - name: JFIS_DB_USERNAME
          value: '{{ .Values.postgresql.db.jfisUsername }}'
        - name: JFIS_DB_SCHEMA
          value: '{{ .Values.postgresql.db.jfisSchema }}'
        - name: JFIS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "mission-control.fullname" . }}-db-cred
              key: jfisPassword
        command:
        - 'bash'
        - '-c'
        - 'su postgres -c "PGPASSWORD=${PGPASSWORD} bash /scripts/createPostgresUsers.sh all"'
        volumeMounts:
        - name: postgresql-setup
          mountPath: "/scripts"
        resources:
{{ toYaml .Values.initContainers.resources | indent 10 }}
    {{- end }}
      - name: prepare-storage
        image: "{{ .Values.initContainerImage }}"
        command:
        - 'sh'
        - '-c'
        - >
          mkdir -p {{ .Values.missionControl.persistence.mountPath }};
          chown -R {{ .Values.uid }}:{{ .Values.uid }} {{ .Values.missionControl.persistence.mountPath }}
        volumeMounts:
        - name: mission-control-data
          mountPath: {{ .Values.missionControl.persistence.mountPath | quote }}
    {{- if .Values.missionControl.customInitContainers }}
{{ tpl .Values.missionControl.customInitContainers . | indent 6}}
    {{- end }}
      containers:
    {{- if .Values.elasticsearch.enabled }}
      - name: {{ .Values.elasticsearch.name }}
        image: "{{ .Values.elasticsearch.image.repository }}:{{ .Values.elasticsearch.image.tag }}"
        imagePullPolicy: {{ .Values.elasticsearch.imagePullPolicy }}
        env:
        - name: 'cluster.name'
          value: '{{ .Values.elasticsearch.env.clusterName }}'
        - name: 'network.host'
          value: '{{ .Values.elasticsearch.env.networkHost }}'
        - name: 'transport.host'
          value: '{{ .Values.elasticsearch.env.transportHost }}'
        - name: 'http.port'
          value: '{{ .Values.elasticsearch.httpPort }}'
        - name: 'transport.port'
          value: '{{ .Values.elasticsearch.transportPort }}'
        - name: 'discovery.seed_hosts'
          value: '{{ template "mission-control.fullname" . }}'
        - name: 'cluster.initial_master_nodes'
          value: '{{ template "elasticsearch.endpoints" . }}'
        - name: ELASTIC_SEARCH_USERNAME
          value: '{{ .Values.elasticsearch.username }}'
        - name: ELASTIC_SEARCH_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "mission-control.fullname" . }}-elasticsearch-cred
              key: password
        - name: ES_JAVA_OPTS
          value: "
          {{- if .Values.elasticsearch.javaOpts.xms }}
              -Xms{{ .Values.elasticsearch.javaOpts.xms }}
          {{- end }}
          {{- if .Values.elasticsearch.javaOpts.xmx }}
              -Xmx{{ .Values.elasticsearch.javaOpts.xmx }}
          {{- end }}
          "
        - name: ELASTIC_SEARCH_URL
          value: '{{ .Values.elasticsearch.url }}'
        ports:
        - name: eshttp
          containerPort: {{ .Values.elasticsearch.httpPort }}
        - name: estransport
          containerPort: {{ .Values.elasticsearch.transportPort }}
        volumeMounts:
        - name: elasticsearch-data
          mountPath: {{ .Values.elasticsearch.persistence.mountPath | quote }}
        - name: elasticsearch-scripts
          mountPath: "/scripts"
        resources:
{{ toYaml .Values.elasticsearch.resources | indent 10 }}
        # livenessProbe:
        #   httpGet:
        #     path: /_cluster/health?local=true
        #     port: 9200
        #   initialDelaySeconds: 90
        #   periodSeconds: 10
        # readinessProbe:
        #   httpGet:
        #     path: /_cluster/health?local=true
        #     port: 9200
        #   initialDelaySeconds: 60
    {{- end }}
      - name: {{ .Values.router.name }}
        image: '{{ .Values.router.image.repository }}:{{ default .Chart.AppVersion .Values.router.image.version }}'
        imagePullPolicy: {{ .Values.router.image.imagePullPolicy }}
        ports:
        - name: router
          containerPort: {{ .Values.router.internalPort }}
        securityContext:
          allowPrivilegeEscalation: false
          runAsUser: {{ .Values.uid }}
        volumeMounts:
        - name: mission-control-data
          mountPath: {{ .Values.router.persistence.mountPath | quote }}
        resources:
{{ toYaml .Values.router.resources | indent 10 }}
{{- if .Values.router.livenessProbe.enabled }}
        livenessProbe:
{{ tpl .Values.router.livenessProbe.config . | indent 10 }}
{{- end }}
{{- if .Values.router.readinessProbe.enabled }}
        readinessProbe:
{{ tpl .Values.router.readinessProbe.config . | indent 10 }}
{{- end }}
      - name: {{ .Values.missionControl.name }}
        image: {{ .Values.missionControl.image.repository }}:{{ default .Chart.AppVersion .Values.missionControl.version }}
        imagePullPolicy: {{ .Values.imagePullPolicy }}
        command:
        - '/bin/sh'
        - '-c'
        - >
        {{- with .Values.missionControl.preStartCommand }}
          echo "Running custom preStartCommand command";
          {{ tpl . $ }};
        {{- end }}
          /opt/jfrog/mc/app/bin/entrypoint-mc.sh;
        {{- if or .Values.postgresql.enabled .Values.database.password .Values.database.jfmcPassword }}
        env:
        - name: JF_SHARED_DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "mission-control.fullname" . }}-db-cred
              key: jfmcPassword
        {{- end }}
        ports:
        - containerPort: {{ .Values.missionControl.internalPort }}
          protocol: TCP
        volumeMounts:
        - name: mission-control-data
          mountPath: {{ .Values.missionControl.persistence.mountPath | quote }}
      {{- with .Values.missionControl.customVolumeMounts }}
{{ tpl . $ | indent 8 }}
      {{- end }}
        resources:
{{ toYaml .Values.missionControl.resources | indent 10 }}
      {{- if .Values.filebeat.enabled }}
      - name: {{ .Values.filebeat.name }}
        image: "{{ .Values.filebeat.image.repository }}:{{ .Values.filebeat.image.version }}"
        imagePullPolicy: {{ .Values.filebeat.image.pullPolicy }}
        args:
        - "-e"
        - "-E"
        - "http.enabled=true"
        securityContext:
          runAsUser: 0
        volumeMounts:
        - name: filebeat-config
          mountPath: /usr/share/filebeat/filebeat.yml
          readOnly: true
          subPath: filebeat.yml
        - name: mission-control-data
          mountPath: "{{ .Values.missionControl.persistence.mountPath }}"
        livenessProbe:
{{ toYaml .Values.filebeat.livenessProbe | indent 10 }}
        readinessProbe:
{{ toYaml .Values.filebeat.readinessProbe | indent 10 }}
        resources:
{{ toYaml .Values.filebeat.resources | indent 10 }}
        terminationGracePeriodSeconds: {{ .Values.terminationGracePeriod }}
      {{- end }}
        resources:
{{ toYaml .Values.missionControl.resources | indent 10 }}
        # livenessProbe:
        #   httpGet:
        #     path: /api/v3/ping
        #     port: {{ .Values.missionControl.internalPort }}
        #   periodSeconds: 10
        #   initialDelaySeconds: 600
        # readinessProbe:
        #   httpGet:
        #     path: /api/v3/ping
        #     port: {{ .Values.missionControl.internalPort }}
        #   periodSeconds: 20
        #   initialDelaySeconds: 60
      - name: {{ .Values.insightServer.name }}
        image: {{ .Values.insightServer.image.repository }}:{{ default .Chart.AppVersion .Values.insightServer.version }}
        imagePullPolicy: {{ .Values.imagePullPolicy }}
        {{- if or .Values.postgresql.enabled .Values.database.password .Values.database.jfisPassword }}
        env:
        - name: JF_SHARED_DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "mission-control.fullname" . }}-db-cred
              key: jfisPassword
        {{- end }}
        ports:
        - containerPort: {{ .Values.insightServer.internalHttpPort }}
          protocol: TCP
        volumeMounts:
        - name: mission-control-data
          mountPath: {{ .Values.missionControl.persistence.mountPath | quote }}
        resources:
{{ toYaml .Values.insightServer.resources | indent 10 }}
        # livenessProbe:
        #   httpGet:
        #     path: /api/status
        #     port: {{ .Values.insightServer.internalHttpPort }}
        #   initialDelaySeconds: 600
        #   periodSeconds: 10
        # readinessProbe:
        #   httpGet:
        #     path: /api/status
        #     port: {{ .Values.insightServer.internalHttpPort }}
        #   initialDelaySeconds: 30
        #   periodSeconds: 20
      - name: {{ .Values.insightScheduler.name }}
        image: {{ .Values.insightScheduler.image.repository }}:{{ default .Chart.AppVersion .Values.insightScheduler.version }}
        imagePullPolicy: {{ .Values.imagePullPolicy }}
        env:
        - name: JFMC_EXTRA_JAVA_OPTS
          value: "
          {{- if .Values.insightScheduler.javaOpts.other }}
              {{ .Values.insightScheduler.javaOpts.other }}
          {{- end}}
          {{- if .Values.insightScheduler.javaOpts.xms }}
              -Xms{{ .Values.insightScheduler.javaOpts.xms }}
          {{- end}}
          {{- if .Values.insightScheduler.javaOpts.xmx }}
              -Xmx{{ .Values.insightScheduler.javaOpts.xmx }}
          {{- end}}
          -Dserver.port={{ .Values.insightScheduler.internalPort }}
          "
        {{- if or .Values.postgresql.enabled .Values.database.password .Values.database.jfscPassword }}
        - name: JF_SHARED_DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "mission-control.fullname" . }}-db-cred
              key: jfscPassword
        {{- end }}
        ports:
        - containerPort: {{ .Values.insightScheduler.internalPort }}
          protocol: TCP
        volumeMounts:
        - name: mission-control-data
          mountPath: {{ .Values.missionControl.persistence.mountPath | quote }}
        resources:
{{ toYaml .Values.insightScheduler.resources | indent 10 }}
        # livenessProbe:
        #   httpGet:
        #     path: /api/status
        #     port: {{ .Values.insightScheduler.internalPort }}
        #   initialDelaySeconds: 600
        #   periodSeconds: 10
        # readinessProbe:
        #   httpGet:
        #     path: /api/status
        #     port: {{ .Values.insightScheduler.internalPort }}
        #   initialDelaySeconds: 60
        #   periodSeconds: 20
      - name: {{ .Values.insightExecutor.name }}
        image: {{ .Values.insightExecutor.image.repository }}:{{ default .Chart.AppVersion .Values.insightExecutor.version }}
        imagePullPolicy: {{ .Values.imagePullPolicy }}
        {{- if or .Values.postgresql.enabled .Values.database.password .Values.database.jfexPassword }}
        env:
        - name: JF_SHARED_DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "mission-control.fullname" . }}-db-cred
              key: jfexPassword
        {{- end }}
        ports:
        - containerPort: {{ .Values.insightExecutor.internalPort }}
          protocol: TCP
        volumeMounts:
        - name: mission-control-data
          mountPath: {{ .Values.missionControl.persistence.mountPath | quote }}
        resources:
{{ toYaml .Values.insightExecutor.resources | indent 10 }}
        # livenessProbe:
        #   httpGet:
        #     path: /executorservice/api
        #     port: {{ .Values.insightExecutor.internalPort }}
        #   initialDelaySeconds: 600
        #   periodSeconds: 10
        # readinessProbe:
        #   httpGet:
        #     path: /executorservice/api
        #     port: {{ .Values.insightExecutor.internalPort }}
        #   initialDelaySeconds: 60
        #   periodSeconds: 20
      {{- $image := .Values.logger.image.repository }}
      {{- $tag := .Values.logger.image.tag }}
      {{- $uid := .Values.uid }}
      {{- $context := .Values.missionControl.appContext }}
      {{- $name := .Values.missionControl.name }}
      {{- $mountPath := .Values.missionControl.persistence.mountPath }}
      {{- range .Values.missionControl.loggers }}
      - name: {{ $name }}-{{ . | replace "_" "-" | replace "." "-" }}
        image: '{{ $image }}:{{ $tag }}'
        securityContext:
          runAsUser: {{ $uid }}
          allowPrivilegeEscalation: false
        command:
          - tail
        args:
          - '-F'
          - '{{ $mountPath }}/logs/{{ $context }}/{{ . }}'
        volumeMounts:
          - name: mission-control-data
            mountPath: {{ $mountPath }}
        resources:
{{ toYaml $.Values.missionControl.loggersResources | indent 10 }}
      {{- end }}
      {{- $name := .Values.insightServer.name }}
      {{- $context := .Values.insightServer.appContext }}
      {{- $mountPath := .Values.insightServer.persistence.mountPath }}
      {{- range .Values.insightServer.loggers }}
      - name: {{ $name }}-{{ . | replace "_" "-" | replace "." "-" }}
        image: '{{ $image }}:{{ $tag }}'
        securityContext:
          runAsUser: {{ $uid }}
          allowPrivilegeEscalation: false
        command:
          - tail
        args:
          - '-F'
          - '{{ $mountPath }}/logs/{{ $context }}/{{ . }}'
        volumeMounts:
          - name: mission-control-data
            mountPath: {{ $mountPath }}
        resources:
 {{ toYaml $.Values.insightServer.loggersResources | indent 10 }}
      {{- end }}
      {{- $name := .Values.insightScheduler.name }}
      {{- $context := .Values.insightScheduler.appContext }}
      {{- $mountPath := .Values.insightScheduler.persistence.mountPath }}
      {{- range .Values.insightScheduler.loggers }}
      - name: {{ $name }}-{{ . | replace "_" "-" | replace "." "-" }}
        image: '{{ $image }}:{{ $tag }}'
        securityContext:
          runAsUser: {{ $uid }}
          allowPrivilegeEscalation: false
        command:
          - tail
        args:
          - '-F'
          - '{{ $mountPath }}/logs/{{ $context }}/{{ . }}'
        volumeMounts:
          - name: mission-control-data
            mountPath: {{ $mountPath }}
        resources:
{{ toYaml $.Values.insightScheduler.loggersResources | indent 10 }}
      {{- end }}
      {{- $name := .Values.insightExecutor.name }}
      {{- $context := .Values.insightExecutor.appContext }}
      {{- $mountPath := .Values.insightExecutor.persistence.mountPath }}
      {{- range .Values.insightExecutor.loggers }}
      - name: {{ $name }}-{{ . | replace "_" "-" | replace "." "-" }}
        image: '{{ $image }}:{{ $tag }}'
        securityContext:
          runAsUser: {{ $uid }}
          allowPrivilegeEscalation: false
        command:
          - tail
        args:
          - '-F'
          - '{{ $mountPath }}/logs/{{ $context }}/{{ . }}'
        volumeMounts:
          - name: mission-control-data
            mountPath: {{ $mountPath }}
        resources:
{{ toYaml $.Values.insightExecutor.loggersResources | indent 10 }}
      {{- end }}
    {{- with .Values.missionControl.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.missionControl.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.missionControl.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}
      volumes:
      - name: applicationyaml
        secret:
          secretName: {{ template "mission-control.fullname" . }}-applicationyaml
      - name: systemyaml
        secret:
          secretName: {{ template "mission-control.fullname" . }}-systemyaml
      {{- if .Values.postgresql.enabled }}
      - name: postgresql-setup
        configMap:
          name: {{ template "mission-control.fullname" . }}-postgresql-setup-script
      {{- end }}
      - name: jfmc-setup-scripts
        configMap:
          name: {{ template "mission-control.fullname" . }}-jfmc-setup-scripts
    {{- if .Values.elasticsearch.enabled }}
      - name: elasticsearch-scripts
        configMap:
          name: {{ template "mission-control.fullname" . }}-elasticsearch-scripts
    {{- end }}
    {{- with .Values.missionControl.customVolumes }}
{{ tpl . $ | indent 6 }}
    {{- end }}
    {{- if .Values.filebeat.enabled }}
      - name: filebeat-config
        configMap:
          name: {{ template "mission-control.fullname" . }}-filebeat-config
    {{- end }}
    {{- if .Values.missionControl.customVolumes }}
{{ tpl .Values.missionControl.customVolumes . | indent 6 }}
    {{- end }}
    {{- if not .Values.missionControl.persistence.enabled }}
      - name: mission-control-data
        emptyDir: {}
    {{- end }}
    {{- if not .Values.elasticsearch.persistence.enabled }}
      - name: elasticsearch-data
        emptyDir: {}
    {{- end }}
  volumeClaimTemplates:
    {{- if .Values.missionControl.persistence.enabled }}
    - metadata:
        name: mission-control-data
        labels:
          app: {{ template "mission-control.name" . }}
          chart: {{ template "mission-control.chart" . }}
          release: {{ .Release.Name  }}
          heritage: {{ .Release.Service }}
      spec:
      {{- if .Values.missionControl.persistence.existingClaim }}
        selector:
          matchLabels:
            app: {{ template "mission-control.name" . }}
      {{- else }}
        {{- if .Values.missionControl.persistence.storageClass }}
        {{- if (eq "-" .Values.missionControl.persistence.storageClass) }}
        storageClassName: ''
        {{- else }}
        storageClassName: '{{ .Values.missionControl.persistence.storageClass }}'
        {{- end }}
        {{- end }}
        accessModes: [ '{{ .Values.missionControl.persistence.accessMode }}' ]
        resources:
          requests:
            storage: {{ .Values.missionControl.persistence.size }}
      {{- end }}
    {{- end }}
    {{- if .Values.elasticsearch.persistence.enabled }}
    - metadata:
        name: elasticsearch-data
        labels:
          app: {{ template "mission-control.name" . }}
          chart: {{ template "mission-control.chart" . }}
          release: {{ .Release.Name  }}
          heritage: {{ .Release.Service }}
      spec:
      {{- if .Values.elasticsearch.persistence.existingClaim }}
        selector:
          matchLabels:
            app: {{ template "mission-control.name" . }}
      {{- else }}
        {{- if .Values.elasticsearch.persistence.storageClass }}
        {{- if (eq "-" .Values.elasticsearch.persistence.storageClass) }}
        storageClassName: ''
        {{- else }}
        storageClassName: '{{ .Values.elasticsearch.persistence.storageClass }}'
        {{- end }}
        {{- end }}
        accessModes: [ '{{ .Values.elasticsearch.persistence.accessMode }}' ]
        resources:
          requests:
            storage: {{ .Values.elasticsearch.persistence.size }}
      {{- end }}
    {{- end }}
