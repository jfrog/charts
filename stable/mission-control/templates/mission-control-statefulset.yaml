apiVersion: apps/v1beta2
kind: StatefulSet
metadata:
  name: {{ template "mission-control.fullname" . }}
  labels:
    app: {{ template "mission-control.name" . }}
    chart: {{ template "mission-control.chart" . }}
    component: {{ .Values.missionControl.name }}
    heritage: {{ .Release.Service }}
    release: {{ .Release.Name }}
spec:
  serviceName: {{ template "mission-control.fullname" . }}
  replicas: {{ .Values.replicaCount }}
  updateStrategy:
      type: RollingUpdate
  selector:
    matchLabels:
      app: {{ template "mission-control.name" . }}
      component: {{ .Values.missionControl.name }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "mission-control.name" . }}
        component: {{ .Values.missionControl.name }}
        release: {{ .Release.Name }}
    spec:
      serviceAccountName: {{ template "mission-control.serviceAccountName" . }}
    {{- if .Values.imagePullSecrets }}
      imagePullSecrets:
      - name: {{ .Values.imagePullSecrets }}
    {{- end }}
      securityContext:
        fsGroup: {{ .Values.uid }}
      initContainers:
    {{- if .Values.elasticsearch.enabled }}
      - name: es-init
        image: "{{ .Values.elasticsearch.initContainerImage }}"
        securityContext:
          privileged: true
        command:
        - '/bin/sh'
        - '-c'
        - >
          chmod -R 777 {{ .Values.elasticsearch.persistence.mountPath }};
          sysctl -w vm.max_map_count={{ .Values.elasticsearch.env.maxMapCount }}
        volumeMounts:
        - name: elasticsearch-data
          mountPath: {{ .Values.elasticsearch.persistence.mountPath | quote }}
    {{- end }}
      - name: "wait-for-db"
        image: "{{ .Values.initContainerImage }}"
        command:
        - 'sh'
        - '-c'
        - >
      {{- if .Values.postgresql.enabled }}
          until nc -z -w 2 {{ .Release.Name }}-postgresql {{ .Values.postgresql.service.port }} && echo database ok; \
      {{- else }}
          until true; \
      {{- end }}
            do sleep 2;
          done;
    {{- if .Values.postgresql.enabled }}
      - name: postgresql-setup
        image: "{{ .Values.dbSetup.postgresql.image.repository }}:{{ .Values.dbSetup.postgresql.image.tag }}"
        env:
        - name: DB_PORT
          value: '{{ .Values.postgresql.service.port }}'
        - name: DB_HOST
          value: '{{ .Release.Name }}-postgresql'
        - name: DB_NAME
          value: '{{ .Values.postgresql.db.name }}'
        - name: DB_SSLMODE
          value: '{{ .Values.postgresql.db.sslmode }}'
        - name: DB_TABLESPACE
          value: '{{ .Values.postgresql.db.tablespace }}'
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
            {{- if .Values.postgresql.postgresPassword }}
              name: {{ template "mission-control.fullname" . }}-postgresql-cred
              key: postgresPassword
            {{- else }}
              name: {{ .Release.Name }}-postgresql
            {{- end }}
              key: postgres-password
        - name: JFMC_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "mission-control.fullname" . }}-postgresql-cred
              key: jfmcPassword
        - name: JFMC_DB_USERNAME
          value: '{{ .Values.postgresql.db.jfmcUsername }}'
        - name: JFMC_DB_SCHEMA
          value: '{{ .Values.postgresql.db.jfmcSchema }}'
        - name: JFEX_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "mission-control.fullname" . }}-postgresql-cred
              key: jfexPassword
        - name: JFEX_DB_USERNAME
          value: '{{ .Values.postgresql.db.jfexUsername }}'
        - name: JFEX_DB_SCHEMA
          value: '{{ .Values.postgresql.db.jfexSchema }}'
        - name: JFSC_DB_USERNAME
          value: '{{ .Values.postgresql.db.jfscUsername }}'
        - name: JFSC_DB_SCHEMA
          value: '{{ .Values.postgresql.db.jfscSchema }}'
        - name: JFSC_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "mission-control.fullname" . }}-postgresql-cred
              key: jfscPassword
        - name: JFIS_DB_USERNAME
          value: '{{ .Values.postgresql.db.jfisUsername }}'
        - name: JFIS_DB_SCHEMA
          value: '{{ .Values.postgresql.db.jfisSchema }}'
        - name: JFIS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "mission-control.fullname" . }}-postgresql-cred
              key: jfisPassword
        command:
        - 'bash'
        - '-c'
        - 'su postgres -c "PGPASSWORD=${PGPASSWORD} bash /scripts/createPostgresUsers.sh all"'
        volumeMounts:
        - name: postgresql-setup
          mountPath: "/scripts"
    {{- end }}
      - name: "set-properties"
        image: "{{ .Values.initContainerImage }}"
        env:
        - name: ELASTIC_SEARCH_USERNAME
          value: '{{ .Values.elasticsearch.username }}'
        - name: ELASTIC_SEARCH_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "mission-control.fullname" . }}-elasticsearch-cred
              key: password
      {{- if .Values.postgresql.enabled }}
        - name: JFMC_DB_USERNAME
          value: '{{ .Values.postgresql.db.jfmcUsername }}'
        - name: JFMC_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "mission-control.fullname" . }}-postgresql-cred
              key: jfmcPassword
        - name: JFEX_DB_USERNAME
          value: '{{ .Values.postgresql.db.jfexUsername }}'
        - name: JFEX_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "mission-control.fullname" . }}-postgresql-cred
              key: jfexPassword
        - name: JFSC_DB_USERNAME
          value: '{{ .Values.postgresql.db.jfscUsername }}'
        - name: JFSC_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "mission-control.fullname" . }}-postgresql-cred
              key: jfscPassword
        - name: JFIS_DB_USERNAME
          value: '{{ .Values.postgresql.db.jfisUsername }}'
        - name: JFIS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "mission-control.fullname" . }}-postgresql-cred
              key: jfisPassword
      {{- else }}
        {{- if .Values.database.secrets.user }}
        - name: JFMC_DB_USERNAME
          valueFrom:
            secretKeyRef:
              name: {{ .Values.database.secrets.user.name }}
              key: {{ .Values.database.secrets.user.key }}
        - name: JFEX_DB_USERNAME
          valueFrom:
            secretKeyRef:
              name: {{ .Values.database.secrets.user.name }}
              key: {{ .Values.database.secrets.user.key }}
        - name: JFSC_DB_USERNAME
          valueFrom:
            secretKeyRef:
              name: {{ .Values.database.secrets.user.name }}
              key: {{ .Values.database.secrets.user.key }}
        - name: JFIS_DB_USERNAME
          valueFrom:
            secretKeyRef:
              name: {{ .Values.database.secrets.user.name }}
              key: {{ .Values.database.secrets.user.key }}
        {{- end }}
        {{- if .Values.database.secrets.password }}
        - name: JFMC_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.database.secrets.password.name }}
              key: {{ .Values.database.secrets.password.key }}
        - name: JFEX_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.database.secrets.password.name }}
              key: {{ .Values.database.secrets.password.key }}
        - name: JFSC_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.database.secrets.password.name }}
              key: {{ .Values.database.secrets.password.key }}
        - name: JFIS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.database.secrets.password.name }}
              key: {{ .Values.database.secrets.password.key }}
        {{- else }}
          {{- if and .Values.database.user .Values.database.password }}
        - name: JFMC_DB_USERNAME
          value: '{{ .Values.database.user }}'
        - name: JFMC_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "mission-control.fullname" . }}-db-cred
              key: dbPassword
        - name: JFEX_DB_USERNAME
          value: '{{ .Values.database.user }}'
        - name: JFEX_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "mission-control.fullname" . }}-db-cred
              key: dbPassword
        - name: JFSC_DB_USERNAME
          value: '{{ .Values.database.user }}'
        - name: JFSC_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "mission-control.fullname" . }}-db-cred
              key: dbPassword
        - name: JFIS_DB_USERNAME
          value: '{{ .Values.database.user }}'
        - name: JFIS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "mission-control.fullname" . }}-db-cred
              key: dbPassword
          {{- else }}
        - name: JFMC_DB_USERNAME
          value: '{{ .Values.database.jfmcUsername }}'
        - name: JFMC_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "mission-control.fullname" . }}-db-cred
              key: jfmcPassword
        - name: JFEX_DB_USERNAME
          value: '{{ .Values.database.jfexUsername }}'
        - name: JFEX_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "mission-control.fullname" . }}-db-cred
              key: jfexPassword
        - name: JFSC_DB_USERNAME
          value: '{{ .Values.database.jfscUsername }}'
        - name: JFSC_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "mission-control.fullname" . }}-db-cred
              key: jfscPassword
        - name: JFIS_DB_USERNAME
          value: '{{ .Values.database.jfisUsername }}'
        - name: JFIS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "mission-control.fullname" . }}-db-cred
              key: jfisPassword
          {{- end }}
        {{- end }}
      {{- end }}
        command:
        - 'sh'
        - '-c'
        - 'sh /scripts/setProperties.sh'
        volumeMounts:
        - name: jfmc-setup-scripts
          mountPath: "/scripts"
        - name: mission-control-data
          mountPath: {{ .Values.missionControl.persistence.mountPath | quote }}
      - name: "prepare-storage"
        image: "{{ .Values.initContainerImage }}"
        command:
        - 'sh'
        - '-c'
        - >
          mkdir -p {{ .Values.missionControl.persistence.mountPath }}; 
          chown -R {{ .Values.uid }}:{{ .Values.uid }} {{ .Values.missionControl.persistence.mountPath }}
        volumeMounts:
        - name: mission-control-data
          mountPath: {{ .Values.missionControl.persistence.mountPath | quote }}
    {{- if .Values.missionControl.customInitContainers }}
{{ tpl .Values.missionControl.customInitContainers . | indent 6}}
    {{- end }}
      containers:
    {{- if .Values.elasticsearch.enabled }}
      - name: {{ .Values.elasticsearch.name }}
        image: "{{ .Values.elasticsearch.image.repository }}:{{ .Values.elasticsearch.image.tag }}"
        imagePullPolicy: {{ .Values.elasticsearch.imagePullPolicy }}
        env:
        - name: 'cluster.name'
          value: '{{ .Values.elasticsearch.env.clusterName }}'
        - name: 'network.host'
          value: '{{ .Values.elasticsearch.env.networkHost }}'
        - name: 'transport.host'
          value: '{{ .Values.elasticsearch.env.transportHost }}'
        - name: 'http.port'
          value: '{{ .Values.elasticsearch.httpPort }}'
        - name: 'transport.port'
          value: '{{ .Values.elasticsearch.transportPort }}'
        - name: 'discovery.zen.minimum_master_nodes'
          value: '{{ .Values.elasticsearch.env.minimumMasterNodes }}'
        - name: 'discovery.zen.ping.unicast.hosts'
          value: '{{ .Release.Name }}-mission-control'
        - name: ELASTIC_SEARCH_USERNAME
          value: '{{ .Values.elasticsearch.username }}'
        - name: ELASTIC_SEARCH_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "mission-control.fullname" . }}-elasticsearch-cred
              key: password
        - name: ES_JAVA_OPTS
          value: "
          {{- if .Values.elasticsearch.javaOpts.xms }}
              -Xms{{ .Values.elasticsearch.javaOpts.xms }}
          {{- end }}
          {{- if .Values.elasticsearch.javaOpts.xmx }}
              -Xmx{{ .Values.elasticsearch.javaOpts.xmx }}
          {{- end }}
          "
        - name: ELASTIC_SEARCH_URL
          value: '{{ .Values.elasticsearch.url }}'
        lifecycle:
          postStart:
            exec:
              command:
              - '/bin/bash'
              - '-c'
              - 'sh /scripts/initSG.sh'
        ports:
        - name: eshttp
          containerPort: {{ .Values.elasticsearch.httpPort }}
        - name: estransport
          containerPort: {{ .Values.elasticsearch.transportPort }}
        volumeMounts:
        - name: elasticsearch-data
          mountPath: {{ .Values.elasticsearch.persistence.mountPath | quote }}
        - name: elasticsearch-scripts
          mountPath: "/scripts"
        resources:
{{ toYaml .Values.elasticsearch.resources | indent 10 }}
        livenessProbe:
          exec:
            command:
            - '/bin/bash'
            - '-c'
            - 'curl -s --fail -u${ELASTIC_SEARCH_USERNAME}:${ELASTIC_SEARCH_PASSWORD} "{{ .Values.elasticsearch.url }}/_cluster/health?local=true" --output /dev/null'
          initialDelaySeconds: 90
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - '/bin/bash'
            - '-c'
            - 'curl -s --fail -u${ELASTIC_SEARCH_USERNAME}:${ELASTIC_SEARCH_PASSWORD} "{{ .Values.elasticsearch.url }}/_cluster/health?local=true" --output /dev/null'
          initialDelaySeconds: 40
    {{- end }}
      - name: {{ .Values.missionControl.name }}
        image: {{ .Values.missionControl.image }}:{{ default .Chart.AppVersion .Values.missionControl.version }}
        imagePullPolicy: {{ .Values.imagePullPolicy }}
        env:
      {{- if .Values.postgresql.enabled }}
        - name: DB_TYPE
          value: 'postgresql'
        - name: DB_SSLMODE
          value: '{{ .Values.postgresql.db.sslmode }}'
        - name: DB_NAME
          value: '{{ .Values.postgresql.db.name }}'
        - name: DB_TABLESPACE
          value: '{{ .Values.postgresql.db.tablespace }}'
        - name: JFMC_DB_URL
          value: 'jdbc:postgresql://{{ .Release.Name }}-postgresql:{{ .Values.postgresql.service.port }}/{{ .Values.postgresql.db.name }}?currentSchema={{ .Values.postgresql.db.jfmcSchema }}'
      {{- else }}
        - name: DB_TYPE
          value: '{{ .Values.database.type }}'
        - name: DB_NAME
          value: '{{ .Values.database.name }}'
        - name: DB_HOST
          value: '{{ .Values.database.host }}'
        - name: DB_PORT
          value: '{{ .Values.database.port }}'
        - name: JFMC_DB_URL
          value: 'jdbc:postgresql://{{ .Values.database.host }}:{{ .Values.database.port }}/{{ .Values.database.name }}?currentSchema={{ .Values.database.jfmcSchema }}'
      {{- end }}
        - name: INSIGHT_URL
          value: "http://localhost:{{ .Values.insightServer.internalHttpPort }}"
        - name: POD_RESTART_TIME
          value: "{{ .Values.podRestartTime }}"
        - name: ARTIFACTORY_CLIENT_CONNECTIONTIMEOUT
          value: '20'
        - name: XRAY_CLIENT_CONNECTIONTIMEOUT
          value: '20'
        - name: JENKINS_CLIENT_CONNECTIONTIMEOUT
          value: '20'
        - name: GIT_CLIENT_CONNECTIONTIMEOUT
          value: '20'
        - name: INSIGHT_CLIENT_CONNECTIONTIMEOUT
          value: '20'
        - name: MC_URL
          value: "{{ .Values.missionControl.missionControlUrl }}"
        - name: JFMC_EXTRA_JAVA_OPTS
          value: "
          {{- if .Values.missionControl.javaOpts.other }}
              {{ .Values.missionControl.javaOpts.other }}
          {{- end}}
          {{- if .Values.missionControl.javaOpts.xms }}
              -Xms{{ .Values.missionControl.javaOpts.xms }}
          {{- end }}
          {{- if .Values.missionControl.javaOpts.xmx }}
              -Xmx{{ .Values.missionControl.javaOpts.xmx }}
          {{- end }}
          "
        - name: JFMC_SERVER_HOME
          value: "{{ .Values.missionControl.home }}"
        - name: JFMC_KEY
          value: "{{ .Values.missionControl.mcKey }}"
        - name: JFMC_REPOSITORY
          value: "{{ .Values.missionControl.repository }}"
        - name: JFMC_PACKAGE
          value: "{{ .Values.missionControl.package }}"
        - name: JFMC_DIST
          value: "{{ .Values.missionControl.dist }}"
        - name: JFMC_OS_VERSION
          value: "{{ .Values.missionControl.osVersion }}"
        - name: JFMC_OS_TYPE
          value: "{{ .Values.missionControl.osType }}"
        - name: JFMC_OS_DIST
          value: "{{ .Values.missionControl.osDist }}"
        - name: JFMC_CREATE_DATE
          value: "{{ .Values.podRestartTime }}"
        ports:
        - containerPort: {{ .Values.missionControl.internalPort }}
          protocol: TCP
        volumeMounts:
        - name: mission-control-data
          mountPath: {{ .Values.missionControl.persistence.mountPath | quote }}
      {{- if .Values.missionControl.customVolumeMounts }}
{{ tpl .Values.missionControl.customVolumeMounts . | indent 8 }}
      {{- end }}
        resources:
{{ toYaml .Values.missionControl.resources | indent 10 }}
        livenessProbe:
          httpGet:
            path: /api/v3/ping
            port: {{ .Values.missionControl.internalPort }}
          periodSeconds: 10
          initialDelaySeconds: 600
        readinessProbe:
          httpGet:
            path: /api/v3/ping
            port: {{ .Values.missionControl.internalPort }}
          periodSeconds: 20
          initialDelaySeconds: 60
      - name: {{ .Values.insightServer.name }}
        image: {{ .Values.insightServer.image }}:{{ default .Chart.AppVersion .Values.insightServer.version }}
        imagePullPolicy: {{ .Values.imagePullPolicy }}
        env:
        - name: JFIS_URL
          value: 'http://localhost:{{ .Values.insightServer.internalHttpPort }}'
        - name: JFMC_ES_CLUSTER_SETUP
          value: 'NO'
        - name: JFEX_URL
          value: 'http://localhost:{{ .Values.insightExecutor.internalPort }}'
        - name: JFSC_URL
          value: 'http://localhost:{{ .Values.insightScheduler.internalPort }}'
        - name: GOMAXPROCS
          value: "1"
      {{- if .Values.postgresql.enabled }}
        - name: DB_TYPE
          value: 'postgresql'
        - name: DB_URL
          value: '{{ .Release.Name }}-postgresql:{{ .Values.postgresql.service.port }}'
        - name: DB_NAME
          value: '{{ .Values.postgresql.db.name }}'
        - name: DB_SSLMODE
          value: '{{ .Values.postgresql.db.sslmode }}'
        - name: DB_TABLESPACE
          value: '{{ .Values.postgresql.db.tablespace }}'
        - name: JFIS_DB_SCHEMA
          value: '{{ .Values.postgresql.db.jfisSchema }}'
        - name: JFSC_DB_SCHEMA
          value: '{{ .Values.postgresql.db.jfscSchema }}'
        - name: JFEX_DB_SCHEMA
          value: '{{ .Values.postgresql.db.jfexSchema }}'
      {{- else }}
        - name: DB_TYPE
          value: '{{ .Values.database.type }}'
        - name: DB_NAME
          value: '{{ .Values.database.name }}'
        - name: DB_HOST
          value: '{{ .Values.database.host }}'
        - name: DB_PORT
          value: '{{ .Values.database.port }}'
        - name: DB_URL
          value: '{{ .Values.database.host }}:{{ .Values.database.port }}'
        - name: JFIS_DB_SCHEMA
          value: '{{ .Values.database.jfisSchema }}'
        - name: JFSC_DB_SCHEMA
          value: '{{ .Values.database.jfscSchema }}'
        - name: JFEX_DB_SCHEMA
          value: '{{ .Values.database.jfexSchema }}'
      {{- end }}
        - name: ELASTIC_SEARCH_URL
          value: '{{ .Values.elasticsearch.url }}'
        - name: ELASTIC_SEARCH_WRITE_URL
          value: '{{ .Values.elasticsearch.url }}'
        - name: ELASTIC_SEARCH_READ_URL
          value: '{{ .Values.elasticsearch.url }}'
        - name: ELASTIC_LB_WRITE_URL
          value: ''
        - name: ELASTIC_LB_READ_URL
          value: ''
        - name: ELASTIC_CLUSTER_NAME
          value: '{{ .Values.elasticsearch.env.clusterName }}'
        - name: JFIS_ALLOW_IP
          value: "{{ .Values.insightServer.allowIP }}"
        - name: JFMC_INSIGHT_SERVER_PORT
          value: "{{ .Values.insightServer.internalHttpPort }}"
        ports:
        - containerPort: {{ .Values.insightServer.internalHttpPort }}
          protocol: TCP
        volumeMounts:
        - name: insight-server-logs
          mountPath: {{ .Values.insightServer.persistence.mountPath }}
        livenessProbe:
          httpGet:
            path: /api/status
            port: {{ .Values.insightServer.internalHttpPort }}
          initialDelaySeconds: 600
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/status
            port: {{ .Values.insightServer.internalHttpPort }}
          initialDelaySeconds: 30
          periodSeconds: 20
      - name: {{ .Values.insightScheduler.name }}
        image: {{ .Values.insightScheduler.image }}:{{ default .Chart.AppVersion .Values.insightScheduler.version }}
        imagePullPolicy: {{ .Values.imagePullPolicy }}
        env:
        - name: JFIS_URL
          value: 'http://localhost:{{ .Values.insightServer.internalHttpPort }}'
        - name: JFMC_EXTRA_JAVA_OPTS
          value: "
          {{- if .Values.insightScheduler.javaOpts.other }}
              {{ .Values.insightScheduler.javaOpts.other }}
          {{- end}}
          {{- if .Values.insightScheduler.javaOpts.xms }}
              -Xms{{ .Values.insightScheduler.javaOpts.xms }}
          {{- end}}
          {{- if .Values.insightScheduler.javaOpts.xmx }}
              -Xmx{{ .Values.insightScheduler.javaOpts.xmx }}
          {{- end}}
          -Dserver.port={{ .Values.insightScheduler.internalPort }}
          "        
        ports:
        - containerPort: {{ .Values.insightScheduler.internalPort }}
          protocol: TCP
        volumeMounts:
        - name: insight-scheduler-logs
          mountPath: {{ .Values.insightScheduler.persistence.mountPath }}
        livenessProbe:
          httpGet:
            path: /api/status
            port: {{ .Values.insightScheduler.internalPort }}
          initialDelaySeconds: 600
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/status
            port: {{ .Values.insightScheduler.internalPort }}
          initialDelaySeconds: 60
          periodSeconds: 20
      - name: {{ .Values.insightExecutor.name }}
        image: {{ .Values.insightExecutor.image }}:{{ default .Chart.AppVersion .Values.insightExecutor.version }}
        imagePullPolicy: {{ .Values.imagePullPolicy }}
        env:
        - name: JFIS_URL
          value: 'http://localhost:{{ .Values.insightServer.internalHttpPort }}'
        - name: JFMC_EXTRA_JAVA_OPTS
          value: "
          {{- if .Values.insightExecutor.javaOpts.other }}
              {{ .Values.insightExecutor.javaOpts.other }}
          {{- end}}
          {{- if .Values.insightExecutor.javaOpts.xms }}
              -Xms{{ .Values.insightExecutor.javaOpts.xms }}
          {{- end}}
          {{- if .Values.insightExecutor.javaOpts.xmx }}
              -Xmx{{ .Values.insightExecutor.javaOpts.xmx }}
          {{- end}}
          -Dserver.port={{ .Values.insightExecutor.internalPort }}
          "
        ports:
        - containerPort: {{ .Values.insightExecutor.internalPort }}
          protocol: TCP
        volumeMounts:
        - name: insight-executor-logs
          mountPath: {{ .Values.insightExecutor.persistence.mountPath }}
        livenessProbe:
          httpGet:
            path: /executorservice/api
            port: {{ .Values.insightExecutor.internalPort }}
          initialDelaySeconds: 600
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /executorservice/api
            port: {{ .Values.insightExecutor.internalPort }}
          initialDelaySeconds: 60
          periodSeconds: 20
      {{- $image := .Values.logger.image.repository }}
      {{- $tag := .Values.logger.image.tag }}
      {{- $uid := .Values.uid }}
      {{- $name := .Values.missionControl.name }}
      {{- $mountPath := .Values.missionControl.persistence.mountPath }}
      {{- range .Values.missionControl.loggers }}
      - name: {{ $name }}-{{ . | replace "_" "-" | replace "." "-" }}
        image: '{{ $image }}:{{ $tag }}'
        securityContext:
          runAsUser: {{ $uid }}
          allowPrivilegeEscalation: false
        command:
          - tail
        args:
          - '-F'
          - '{{ $mountPath }}/logs/jfmc-server/{{ . }}'
        volumeMounts:
          - name: mission-control-data
            mountPath: {{ $mountPath }}
      {{- end }}
      {{- $name := .Values.insightServer.name }}
      {{- $mountPath := .Values.insightServer.persistence.mountPath }}
      {{- range .Values.insightServer.loggers }}
      - name: {{ $name }}-{{ . | replace "_" "-" | replace "." "-" }}
        image: '{{ $image }}:{{ $tag }}'
        securityContext:
          runAsUser: {{ $uid }}
          allowPrivilegeEscalation: false
        command:
          - tail
        args:
          - '-F'
          - '{{ $mountPath }}/{{ . }}'
        volumeMounts:
          - name: insight-server-logs
            mountPath: {{ $mountPath }}
      {{- end }}
      {{- $name := .Values.insightScheduler.name }}
      {{- $mountPath := .Values.insightScheduler.persistence.mountPath }}
      {{- range .Values.insightScheduler.loggers }}
      - name: {{ $name }}-{{ . | replace "_" "-" | replace "." "-" }}
        image: '{{ $image }}:{{ $tag }}'
        securityContext:
          runAsUser: {{ $uid }}
          allowPrivilegeEscalation: false
        command:
          - tail
        args:
          - '-F'
          - '{{ $mountPath }}/{{ . }}'
        volumeMounts:
          - name: insight-scheduler-logs
            mountPath: {{ $mountPath }}
      {{- end }}
      {{- $name := .Values.insightExecutor.name }}
      {{- $mountPath := .Values.insightExecutor.persistence.mountPath }}
      {{- range .Values.insightExecutor.loggers }}
      - name: {{ $name }}-{{ . | replace "_" "-" | replace "." "-" }}
        image: '{{ $image }}:{{ $tag }}'
        securityContext:
          runAsUser: {{ $uid }}
          allowPrivilegeEscalation: false
        command:
          - tail
        args:
          - '-F'
          - '{{ $mountPath }}/{{ . }}'
        volumeMounts:
          - name: insight-executor-logs
            mountPath: {{ $mountPath }}
      {{- end }}
    {{- with .Values.missionControl.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.missionControl.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.missionControl.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}
      volumes:
      {{- if .Values.postgresql.enabled }}
      - name: postgresql-setup
        configMap:
          name: {{ template "mission-control.fullname" . }}-postgresql-setup-script
      {{- end }}
      - name: jfmc-setup-scripts
        configMap:
          name: {{ template "mission-control.fullname" . }}-jfmc-setup-scripts
    {{- if .Values.elasticsearch.enabled }}
      - name: elasticsearch-scripts
        configMap:
          name: {{ template "mission-control.fullname" . }}-elasticsearch-scripts
    {{- end }}
    {{- if .Values.missionControl.customVolumes }}
{{ tpl .Values.missionControl.customVolumes . | indent 6 }}
    {{- end }}
  {{- if not .Values.missionControl.persistence.enabled }}
      - name: mission-control-data
        emptyDir: {}
      - name: insight-server-logs
        emptyDir: {}
      - name: insight-scheduler-logs
        emptyDir: {}
      - name: insight-executor-logs
        emptyDir: {}
      - name: elasticsearch-data
        emptyDir: {}
  {{- else }}
  volumeClaimTemplates:
    - metadata:
        name: mission-control-data
        labels:
          app: {{ template "mission-control.name" . }}
          chart: {{ template "mission-control.chart" . }}
          release: {{ .Release.Name  }}
          heritage: {{ .Release.Service }}
      spec:
      {{- if .Values.missionControl.persistence.existingClaim }}
        selector:
          matchLabels:
            app: {{ template "mission-control.name" . }}
      {{- else }}
        {{- if .Values.missionControl.persistence.storageClass }}
        {{- if (eq "-" .Values.missionControl.persistence.storageClass) }}
        storageClassName: ''
        {{- else }}
        storageClassName: '{{ .Values.missionControl.persistence.storageClass }}'
        {{- end }}
        {{- end }}
        accessModes: [ '{{ .Values.missionControl.persistence.accessMode }}' ]
        resources:
          requests:
            storage: {{ .Values.missionControl.persistence.size }}
      {{- end }}
    - metadata:
        name: insight-server-logs
        labels:
          app: {{ template "mission-control.name" . }}
          chart: {{ template "mission-control.chart" . }}
          release: {{ .Release.Name  }}
          heritage: {{ .Release.Service }}
      spec:
      {{- if .Values.insightServer.persistence.existingClaim }}
        selector:
          matchLabels:
            app: {{ template "mission-control.name" . }}
      {{- else }}
        {{- if .Values.insightServer.persistence.storageClass }}
        {{- if (eq "-" .Values.insightServer.persistence.storageClass) }}
        storageClassName: ''
        {{- else }}
        storageClassName: '{{ .Values.insightServer.persistence.storageClass }}'
        {{- end }}
        {{- end }}
        accessModes: [ '{{ .Values.insightServer.persistence.accessMode }}' ]
        resources:
          requests:
            storage: {{ .Values.insightServer.persistence.size }}
      {{- end }}
    - metadata:
        name: insight-scheduler-logs
        labels:
          app: {{ template "mission-control.name" . }}
          chart: {{ template "mission-control.chart" . }}
          release: {{ .Release.Name  }}
          heritage: {{ .Release.Service }}
      spec:
      {{- if .Values.insightScheduler.persistence.existingClaim }}
        selector:
          matchLabels:
            app: {{ template "mission-control.name" . }}
      {{- else }}
        {{- if .Values.insightScheduler.persistence.storageClass }}
        {{- if (eq "-" .Values.insightScheduler.persistence.storageClass) }}
        storageClassName: ''
        {{- else }}
        storageClassName: '{{ .Values.insightScheduler.persistence.storageClass }}'
        {{- end }}
        {{- end }}
        accessModes: [ '{{ .Values.insightScheduler.persistence.accessMode }}' ]
        resources:
          requests:
            storage: {{ .Values.insightScheduler.persistence.size }}
      {{- end }}
    - metadata:
        name: insight-executor-logs
        labels:
          app: {{ template "mission-control.name" . }}
          chart: {{ template "mission-control.chart" . }}
          release: {{ .Release.Name  }}
          heritage: {{ .Release.Service }}
      spec:
      {{- if .Values.insightExecutor.persistence.existingClaim }}
        selector:
          matchLabels:
            app: {{ template "mission-control.name" . }}
      {{- else }}
        {{- if .Values.insightExecutor.persistence.storageClass }}
        {{- if (eq "-" .Values.insightExecutor.persistence.storageClass) }}
        storageClassName: ''
        {{- else }}
        storageClassName: '{{ .Values.insightExecutor.persistence.storageClass }}'
        {{- end }}
        {{- end }}
        accessModes: [ '{{ .Values.insightExecutor.persistence.accessMode }}' ]
        resources:
          requests:
            storage: {{ .Values.insightExecutor.persistence.size }}
      {{- end }}
    {{- if .Values.elasticsearch.enabled }}
    - metadata:
        name: elasticsearch-data
        labels:
          app: {{ template "mission-control.name" . }}
          chart: {{ template "mission-control.chart" . }}
          release: {{ .Release.Name  }}
          heritage: {{ .Release.Service }}
      spec:
      {{- if .Values.elasticsearch.persistence.existingClaim }}
        selector:
          matchLabels:
            app: {{ template "mission-control.name" . }}
      {{- else }}
        {{- if .Values.elasticsearch.persistence.storageClass }}
        {{- if (eq "-" .Values.elasticsearch.persistence.storageClass) }}
        storageClassName: ''
        {{- else }}
        storageClassName: '{{ .Values.elasticsearch.persistence.storageClass }}'
        {{- end }}
        {{- end }}
        accessModes: [ '{{ .Values.elasticsearch.persistence.accessMode }}' ]
        resources:
          requests:
            storage: {{ .Values.elasticsearch.persistence.size }}
      {{- end }}
    {{- end }}
  {{- end }}
