# Default values for Mission Control.
# This is a YAML-formatted file.
# Beware when changing values here. You should know what you are doing!
# Access the values with {{ .Values.key.subkey }}

# Common
initContainerImage: "alpine:3.11"
# Init containers
initContainers:
  resources: {}
#    requests:
#      memory: "64Mi"
#      cpu: "10m"
#    limits:
#      memory: "128Mi"
#      cpu: "250m"

imagePullPolicy: IfNotPresent


uid: 1050
gid: 1050
uname: jfmc

imagePullSecrets:

# For HA
replicaCount: 1

shared:
  node:
    id:

## Role Based Access Control
## Ref: https://kubernetes.io/docs/admin/authorization/rbac/
rbac:
  create: true
  role:
    ## Rules to create. It follows the role specification
    rules:
    - apiGroups:
      - ''
      resources:
      - services
      - endpoints
      - pods
      verbs:
      - get
      - watch
      - list

networkpolicy:
  # Allows all ingress and egress
  - name: mission-control
    podSelector:
      matchLabels:
        app: mission-control
    egress:
      - {}
    ingress:
      - {}
  # Uncomment to allow only mission-control pods to communicate with postgresql (if postgresql.enabled is true)
  # - name: postgres
  #   podSelector:
  #     matchLabels:
  #       app: postgresql
  #   ingress:
  #   - from:
  #     - podSelector:
  #         matchLabels:
  #           app: mission-control

## Service Account
## Ref: https://kubernetes.io/docs/admin/service-accounts-admin/
##
serviceAccount:
  create: true
  ## The name of the ServiceAccount to use.
  ## If not set and create is true, a name is generated using the fullname template
  name:

## Details required for initialization/setup of database
dbSetup:
  postgresql:
    image:
      repository: postgres
      tag: 9.6.18-alpine
      pullPolicy: IfNotPresent

# PostgreSQL

## Configuration values for the PostgreSQL dependency sub-chart
## ref: https://github.com/kubernetes/charts/blob/master/stable/postgresql/README.md
postgresql:
  enabled: true
  image:
    registry: docker.bintray.io
    repository: bitnami/postgresql
    tag: 9.6.18-debian-10-r7
  postgresqlUsername: postgres
  postgresqlPassword: ""
  postgresqlDatabase: mission_control
  postgresqlExtendedConf:
    listenAddresses: "'*'"
    maxConnections: "1500"

  db:
    name: mission_control
    sslmode: "false"
    tablespace: "pg_default"
    ## Use single user and password for all the services
    user: mc
    password: ""
    jfmcSchema: jfmc_server
    jfisSchema: insight_server
    jfscSchema: insight_scheduler
    jfexSchema: insight_executor
  service:
    port: 5432
  persistence:
    enabled: true
    size: 50Gi
    existingClaim:
  resources: {}
  #  requests:
  #    memory: "1Gi"
  #    cpu: "250m"
  #  limits:
  #    memory: "2Gi"
  #    cpu: "1"
  nodeSelector: {}
  affinity: {}
  tolerations: []

### If NOT using the PostgreSQL in this chart (postgresql.enabled=false),
## specify custom database details here or leave empty
database:
  type: postgresql
  driver: org.postgresql.Driver
  ## Please make sure these are created under the provided database
  name: mission_control
  jfisSchema: insight_server
  jfmcSchema: jfmc_server
  jfscSchema: insight_scheduler
  jfexSchema: insight_executor
  ## Use single user and password for all the services
  user:
  password:
  url:
  ## If you have existing Kubernetes secrets containing db credentials, use
  ## these values
  secrets: {}
  #  user:
  #    name: "mc-database-creds"
  #    key: "db-user"
  #  password:
  #    name: "mc-database-creds"
  #    key: "db-password"
  #  url:
  #    name: "mc-database-creds"
  #    key: "db-url"


elasticsearch:
  enabled: true
  name: elasticsearch
  initContainerImage: "alpine:3.11"
  configureDockerHost: true
  image:
    repository: docker.bintray.io/jfrog/elasticsearch-oss
    tag: 7.6.1
    pullPolicy: IfNotPresent
  ## Enter elasticsearch connection details
  url: http://localhost:9200
  httpPort: 9200
  transportPort: 9300
  username: "admin"
  password: "admin"
  env:
    clusterName: "es-cluster"
    networkHost: "0.0.0.0"
    transportHost: "0.0.0.0"
    maxMapCount: 262144

  persistence:
    enabled: true
    ## A manually managed Persistent Volume and Claim
    ## Requires persistence.enabled: true
    ## If defined, PVC must be created manually before volume will be bound
    # existingClaim:

    mountPath: "/usr/share/elasticsearch/data"
    accessMode: ReadWriteOnce
    size: 100Gi
    ## ElasticSearch data Persistent Volume Storage Class
    ## If defined, storageClassName: <storageClass>
    ## If set to "-", storageClassName: "", which disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is
    ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
    ##   GKE, AWS & OpenStack)
    ##
    # storageClass: "-"

  ## ElasticSearch xms and xmx should be same!
  javaOpts: {}
  #  xms: "2g"
  #  xmx: "2g"

  resources: {}
  #  requests:
  #    memory: "2Gi"
  #    cpu: "100m"
  #  limits:
  #    memory: "2.5Gi"
  #    cpu: "500m"

podRestartTime:

applicationConfigs: {}

logger:
  image:
    repository: "busybox"
    tag: "1.30"

missionControl:
  name: mission-control
  ## Note that by default we use appVersion to get image tag/version
  image:
    repository: docker.bintray.io/jfrog/mission-control
    # version:
  appContext: mc
  appName: jfmc-server
  home: /var/opt/jfrog/mc

  # env:

  # Set this to true if you want to override credentials in mission-control.properties on startup
  propertyOverride: true

  ## Add custom init containers
  customInitContainers: |
  #  - name: "custom-setup"
  #    image: "{{ .Values.initContainerImage }}"
  #    imagePullPolicy: "{{ .Values.imagePullPolicy }}"
  #    command:
  #      - 'sh'
  #      - '-c'
  #      - 'touch {{ .Values.missionControl.persistence.mountPath }}/example-custom-setup'
  #    volumeMounts:
  #      - mountPath: "{{ .Values.missionControl.persistence.mountPath }}"
  #        name: mission-control-data

  ## Add custom volumes
  customVolumes: |
  #  - name: custom-script
  #    configMap:
  #      name: custom-script

  ## Add custom volumeMounts
  customVolumeMounts: |
  #  - name: custom-script
  #    mountPath: "/scripts/script.sh"
  #    subPath: script.sh

  ## Add any of the loggers to a sidecar if you want to be able to see them with kubectl logs or a log collector in your k8s cluster
  loggers: []
  # - audit.log
  # - http.log
  # - init-debug.log
  # - init-err.log
  # - init.log
  # - mc-debug.log
  # - mc-err.log
  # - mc.log
  # - monitoring.log

  # Loggers containers resources
  loggersResources: {}
  #  requests:
  #    memory: "64Mi"
  #    cpu: "25m"
  #  limits:
  #    memory: "128Mi"
  #    cpu: "50m"

  ## Mission Control requires a unique master.key
  # This will be used to encript sensitive data to be stored in database
  ## You can generate one with the command:
  ## 'openssl rand -hex 32'
  ## Pass it to helm with '--set missionControl.masterKey=${MASTER_KEY}'
  ## IMPORTANT: You should NOT use the example masterKey for a production deployment!
  masterKey: bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
  ## Alternatively, you can use a pre-existing secret with a key called master-key by specifying masterKeySecretName
  # masterKeySecretName:

  joinKey: EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE
  ## Alternatively, you can use a pre-existing secret with a key called join-key by specifying joinKeySecretName
  # joinKeySecretName:
  ## If false, all service console logs will not redirect to a common console.log
  consoleLog: false
  ## Artifactory URL . Mandatory
  jfrogUrl:

  podRestartTime:
  repository: jfrog-mission-control
  package: mc-docker-installer
  dist: helm
  osVersion: "NA"
  osType: "NA"
  osDist: "NA"

  systemYaml: |
    shared:
      logging:
        consoleLog:
          enabled: {{ .Values.missionControl.consoleLog }}
      jfrogUrl: "{{ required "\n\nmissionControl.jfrogUrl is required! This allows to connect to Artifactory.\n(You can copy the JFrog URL from Admin > Security > Settings)" .Values.missionControl.jfrogUrl }}"
      database:
      {{- if .Values.postgresql.enabled }}
        type: postgresql
        driver: org.postgresql.Driver
        url: jdbc:postgresql://{{ .Release.Name }}-postgresql:{{ .Values.postgresql.service.port }}/{{ .Values.postgresql.db.name }}?sslmode=disable
      {{ else }}
        type: "{{ .Values.database.type }}"
        driver: "{{ .Values.database.driver }}"
      {{- end }}

    {{- if .Values.postgresql.enabled }}
    mc:
      database:
        username: {{ .Values.postgresql.db.user }}
        schema: {{ .Values.postgresql.db.jfmcSchema }}

    insight-scheduler:
      database:
        username: {{ .Values.postgresql.db.user }}
        schema: {{ .Values.postgresql.db.jfscSchema }}

    insight-executor:
      database:
        username: {{ .Values.postgresql.db.user }}
        schema: {{ .Values.postgresql.db.jfexSchema }}

    insight:
      database:
        username: {{ .Values.postgresql.db.user }}
        schema: {{ .Values.postgresql.db.jfisSchema }}
    {{- end }}


  persistence:
    enabled: true
    ## A manually managed Persistent Volume and Claim
    ## Requires persistence.enabled: true
    ## If defined, PVC must be created manually before volume will be bound
    # existingClaim:

    mountPath: "/var/opt/jfrog/mc"
    accessMode: ReadWriteOnce
    size: 100Gi
    ## Mission Control data Persistent Volume Storage Class
    ## If defined, storageClassName: <storageClass>
    ## If set to "-", storageClassName: "", which disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is
    ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
    ##   GKE, AWS & OpenStack)
    ##
    # storageClass: "-"

  ## Control Java options (JAVA_OPTIONS)
  ## IMPORTANT: keep resources.limits.memory higher than javaOpts.xmx by 0.5G
  javaOpts:
    other: "-server -XX:+UseG1GC -Dfile.encoding=UTF8"
  #  xms: "2g"
  #  xmx: "3g"
  resources: {}
  #  requests:
  #    memory: "2Gi"
  #    cpu: "100m"
  #  limits:
  #    memory: "3.5Gi"
  #    cpu: "1"
  nodeSelector: {}

  tolerations: []

  affinity: {}

  service:
    type: ClusterIP
    annotations: {}
  internalPort: 8080
  externalPort: 80

  ## Extra pre start command to run extra commands before container starts
  # preStartCommand:
  ## For example, to import trusted keystore ( Need to mount the certificates first )
  # preStartCommand: "/java/jdk-11.0.2+9/bin/keytool -importcert -keystore /java/jdk-11.0.2+9/lib/security/cacerts -storepass changeit -file /tmp/trusted-certificates/root.crt -alias 'newcerts'"

insightServer:
  name: insight-server
  ## Note that by default we use appVersion to get image tag/version
  image:
    repository: docker.bintray.io/jfrog/insight-server
    # version:
  appContext: insight
  home: /opt/jfrog
  internalHttpPort: 8082
  ## This can be used to whitelist the range of IPs allowed to be served by Insight Server service
  ## The value must follow CIDR format
  allowIP: "0.0.0.0/0"
  resources: {}
  #  requests:
  #    memory: "500Mi"
  #    cpu: "100m"
  #  limits:
  #    memory: "1Gi"
  #    cpu: "1"

  # Persistence for the logs
  persistence:
    enabled: false
    ## A manually managed Persistent Volume and Claim
    ## Requires persistence.enabled: true
    ## If defined, PVC must be created manually before volume will be bound
    # existingClaim:

    mountPath: "/var/opt/jfrog/mc"
    accessMode: ReadWriteOnce
    size: 10Gi
    ## Insight Server logs Persistent Volume Storage Class
    ## If defined, storageClassName: <storageClass>
    ## If set to "-", storageClassName: "", which disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is
    ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
    ##   GKE, AWS & OpenStack)
    ##
    # storageClass: "-"

  ## Add any of the loggers to a sidecar if you want to be able to see them with kubectl logs or a log collector in your k8s cluster
  loggers: []
  # - insight-server.log

  # Loggers containers resources
  loggersResources: {}
  #  requests:
  #    memory: "64Mi"
  #    cpu: "25m"
  #  limits:
  #    memory: "128Mi"
  #    cpu: "50m"

insightScheduler:
  name: insight-scheduler
  ## Note that by default we use appVersion to get image tag/version
  image:
    repository: docker.bintray.io/jfrog/insight-scheduler
    # version:
  appContext: insight-scheduler
  home: /opt/jfrog
  internalPort: 8085

  ## Control Java options (JFMC_EXTRA_JAVA_OPTS)
  ## IMPORTANT: keep resources.limits.memory higher than javaOpts.xmx by 0.5G
  javaOpts: {}
  #  other:
  #  xms: "500m"
  #  xmx: "1g"
  resources: {}
  #  requests:
  #    memory: "500Mi"
  #    cpu: "100m"
  #  limits:
  #    memory: "1.5Gi"
  #    cpu: "1"

  # Persistence for the logs
  persistence:
    enabled: false
    ## A manually managed Persistent Volume and Claim
    ## Requires persistence.enabled: true
    ## If defined, PVC must be created manually before volume will be bound
    # existingClaim:

    mountPath: "/var/opt/jfrog/mc"
    accessMode: ReadWriteOnce
    size: 10Gi
    ## Insight Scheduler logs Persistent Volume Storage Class
    ## If defined, storageClassName: <storageClass>
    ## If set to "-", storageClassName: "", which disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is
    ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
    ##   GKE, AWS & OpenStack)
    ##
    # storageClass: "-"

  ## Add any of the loggers to a sidecar if you want to be able to see them with kubectl logs or a log collector in your k8s cluster
  loggers: []
  # - insight-scheduler.log
  # - access.log

  # Loggers containers resources
  loggersResources: {}
  #  requests:
  #    memory: "64Mi"
  #    cpu: "25m"
  #  limits:
  #    memory: "128Mi"
  #    cpu: "50m"

insightExecutor:
  name: insight-executor
  ## Note that by default we use appVersion to get image tag/version
  image:
    repository: docker.bintray.io/jfrog/insight-executor
    # version:
  appContext: insight-executor
  home: /opt/jfrog
  internalPort: 8087

  ## Control Java options (JFMC_EXTRA_JAVA_OPTS)
  ## IMPORTANT: keep resources.limits.memory higher than javaOpts.xmx by 0.5G
  javaOpts: {}
  #  other:
  #  xms: "500m"
  #  xmx: "2g"
  resources: {}
  #  requests:
  #    memory: "500Mi"
  #    cpu: "100m"
  #  limits:
  #    memory: "2.5Gi"
  #    cpu: "1"

  # Persistence for the logs
  persistence:
    enabled: false
    ## A manually managed Persistent Volume and Claim
    ## Requires persistence.enabled: true
    ## If defined, PVC must be created manually before volume will be bound
    # existingClaim:

    mountPath: "/var/opt/jfrog/mc"
    accessMode: ReadWriteOnce
    size: 10Gi
    ## Insight Executor logs Persistent Volume Storage Class
    ## If defined, storageClassName: <storageClass>
    ## If set to "-", storageClassName: "", which disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is
    ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
    ##   GKE, AWS & OpenStack)
    ##
    # storageClass: "-"

  ## Add any of the loggers to a sidecar if you want to be able to see them with kubectl logs or a log collector in your k8s cluster
  loggers: []
  # - insight-executor.log
  # - access.log

  # Loggers containers resources
  loggersResources: {}
  #  requests:
  #    memory: "64Mi"
  #    cpu: "25m"
  #  limits:
  #    memory: "128Mi"
  #    cpu: "50m"

router:
  name: router
  image:
    repository: docker.bintray.io/jfrog/router
    version: 1.4.0
    imagePullPolicy: IfNotPresent
  internalPort: 8082
  externalPort: 8082
  resources: {}
  #  requests:
  #    memory: "100Mi"
  #    cpu: "100m"
  #  limits:
  #    memory: "1Gi"
  #    cpu: "1"

  livenessProbe:
    enabled: true
    config: |
      httpGet:
        path: /router/api/v1/system/health
        port: {{ .Values.router.internalPort }}
      initialDelaySeconds: 90
      periodSeconds: 10
      timeoutSeconds: 1
      failureThreshold: 3
      successThreshold: 1

  readinessProbe:
    enabled: true
    config: |
      httpGet:
        path: /router/api/v1/system/health
        port: {{ .Values.router.internalPort }}
      initialDelaySeconds: 60
      periodSeconds: 10
      timeoutSeconds: 1
      failureThreshold: 10
      successThreshold: 1

  persistence:
    accessMode: ReadWriteOnce
    mountPath: "/var/opt/jfrog/router"
    size: 5Gi

  # Add any of the loggers to a sidecar if you want to be able to see them with kubectl logs or a log collector in your k8s cluster
  loggers: []

  nodeSelector: {}
  tolerations: []
  affinity: {}

# Filebeat Sidecar container
## The provided filebeat configuration is for Mission-Control logs. It assumes you have a logstash installed and configured properly.
filebeat:
  enabled: false
  name: mission-control-filebeat
  image:
    repository: "docker.elastic.co/beats/filebeat"
    version: 7.5.1
  logstashUrl: "logstash:5044"

  terminationGracePeriod: 10

  livenessProbe:
    exec:
      command:
        - sh
        - -c
        - |
          #!/usr/bin/env bash -e
          curl --fail 127.0.0.1:5066
    failureThreshold: 3
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 5

  readinessProbe:
    exec:
      command:
        - sh
        - -c
        - |
          #!/usr/bin/env bash -e
          filebeat test output
    failureThreshold: 3
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 5

  resources: {}
#    requests:
#      memory: "100Mi"
#      cpu: "100m"
#    limits:
#      memory: "100Mi"
#      cpu: "100m"

  filebeatYml: |
    logging.level: info
    path.data: {{ .Values.missionControl.persistence.mountPath }}/log/filebeat
    name: missionControl-filebeat
    queue.spool: ~
    filebeat.inputs:
    - type: log
      enabled: true
      close_eof: ${CLOSE:false}
      paths:
         - {{ .Values.missionControl.persistence.mountPath }}/log/*.log
      fields:
        service: "jfmc"
        log_type: "missionControl"
    output:
      logstash:
         hosts: ["{{ .Values.filebeat.logstashUrl }}"]
