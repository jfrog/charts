{{- if and .Values.catalog.createCatalogDb.enabled .Values.catalog.enabled .Values.postgresql.enabled -}}
apiVersion: batch/v1
kind: Job
metadata:
  labels:
    app: {{ template "xray.name" . }}
    chart: {{ template "xray.chart" . }}
    heritage: {{ .Release.Service }}
    release: {{ .Release.Name }}
  name: {{ template "xray.fullname" . }}-catalog-create-db
  annotations:
    "helm.sh/hook": "post-upgrade,post-install"
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  template:
    metadata:
      labels:
        app: {{ template "xray.name" . }}
        chart: {{ template "xray.chart" . }}
        heritage: {{ .Release.Service }}
        release: {{ .Release.Name }}
    spec:
      {{- if .Values.podSecurityContext.enabled }}
      securityContext: {{- omit .Values.podSecurityContext "enabled" | toYaml | nindent 8 }}
      {{- end }}
      {{- if or .Values.imagePullSecrets .Values.global.imagePullSecrets }}
      {{- include "xray.imagePullSecrets" . | indent 6 }}
      {{- end }}
      serviceAccountName: {{ template "xray.serviceAccountName" . }}
      restartPolicy: OnFailure
      terminationGracePeriodSeconds: 0
      containers:
        - name: catalog-create-db
          image: {{ .Values.catalog.createCatalogDb.image }}
          imagePullPolicy: IfNotPresent
          {{- if .Values.containerSecurityContext.enabled }}
          securityContext:
            {{- toYaml (omit .Values.containerSecurityContext "enabled") | nindent 12 }}
          {{- end }}
          {{- if .Values.initContainers.resources }}
          resources: {{- toYaml .Values.initContainers.resources | nindent 12 }}
          {{- end }}
          command:
          - 'bash'
          - '-c'
          - |
            echo "Waiting for postgresql to come up"
            ready=false;
            while ! $ready; do echo waiting;
              timeout 2s bash -c "</dev/tcp/{{ .Release.Name }}-postgresql/{{ .Values.postgresql.primary.service.ports.postgresql }}"; exit_status=$?;
              if [[ $exit_status -eq 0 ]]; then ready=true; echo "database ok"; fi; sleep 1; 
            done;

            psql "postgres://{{ .Values.catalog.database.user }}:${PGPASSWORD}@{{ .Release.Name }}-postgresql:5432/catalogdb?sslmode=disable" -c "\q" 2>/dev/null
            exit_status=$?
            if [[ $exit_status -eq 0 ]]; then
                ready=true
                echo "catalogdb database is available"
                exit 0
            fi

            psql -h {{ .Release.Name }}-postgresql --username "{{ .Values.postgresql.auth.username }}" -d {{ .Values.postgresql.auth.database }} -c "CREATE DATABASE catalogdb;" -c "GRANT ALL PRIVILEGES ON DATABASE catalogdb TO {{ .Values.postgresql.auth.username }};"
          env:
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: "{{ .Release.Name }}-postgresql"
                  key: password
{{- end -}}