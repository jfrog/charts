apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "xray.fullname" . }}-setup
  labels:
    app: {{ template "xray.name" . }}
    chart: {{ template "xray.chart" . }}
    heritage: {{ .Release.Service }}
    release: {{ .Release.Name }}
data:
  setup.sh: |
    #!/bin/sh
    # Setup script for Xray microservice

    SCRIPTS_DIR=/scripts
    XRAYCONFIGPATH={{ .Values.common.xrayConfigPath }}
    XRAY_CONFIG_DIR=${XRAYCONFIGPATH}/config
    XRAY_CONFIG_FILE=${XRAY_CONFIG_DIR}/xray_config.yaml

    echo "Creating directories"
    mkdir -pv ${XRAY_CONFIG_DIR}

    # Wait for DBs to be ready
    {{- if .Values.mongodb.enabled }}
    echo "Waiting for Mongo..."
    until nc -z -w 2 {{ .Release.Name }}-mongodb 27017 && echo mongodb ok; do
      sleep 2;
    done;
    {{- end }}
    {{- if .Values.postgresql.enabled }}
    echo "Waiting for Postgres..."
    until nc -z -w 2 {{ .Release.Name }}-postgresql {{ .Values.postgresql.service.port }} && echo postgresql ok; do
      sleep 2;
    done;
    {{- end }}
    echo "Waiting for Rabbit..."
    {{ if index .Values "rabbitmq-ha" "enabled" }}
    until nc -z -w 2 {{ .Release.Name }}-rabbitmq-ha {{ index .Values "rabbitmq-ha" "rabbitmqNodePort" }} && echo rabbitmq ok; do
    {{- end }}
    {{ if index .Values "rabbitmq" "enabled" }}
    until nc -z -w 2 {{ .Release.Name }}-rabbitmq {{ index .Values "rabbitmq" "rabbitmqNodePort" }} && echo rabbitmq ok; do
    {{- end }}
      sleep 2;
    done;

    # Prepare Xray config
    echo "Preparing Xray config (${XRAY_CONFIG_FILE})"
    if [ -f ${XRAY_CONFIG_FILE} ]; then
      echo "Config exist. Backing it up..."
      cp -vf ${XRAY_CONFIG_FILE} ${XRAY_CONFIG_FILE}-$(date +%Y%m%d-%H%M%S)
    fi

    # Creating Mongodb URL
    {{- if .Values.mongodb.enabled }}
    MONGODB_URL="mongodb://${MONGODB_USER}:${MONGODB_PASSWORD}@{{ .Release.Name }}-mongodb:27017/?authSource=${MONGODB_DATABASE}\&authMechanism=SCRAM-SHA-1"
    {{- else }}
    MONGODB_URL="${MONGODB_URL}"
    {{- end }}

    # Creating PostgreSQL URL
    {{- if .Values.postgresql.enabled }}
    POSTGRES_URL="postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@{{ .Release.Name }}-postgresql:{{ .Values.postgresql.service.port }}/${POSTGRES_DB}?sslmode=disable"
    {{- else }}
    POSTGRES_URL="${POSTGRES_URL}"
    {{- end }}

    # Creating Rabbitmq URL
    {{ if index .Values "rabbitmq-ha" "enabled" }}
    RABBITMQ_URL="amqp://${RABBITMQ_USER}:${RABBITMQ_DEFAULT_PASS}@{{ .Release.Name }}-rabbitmq-ha:{{ index .Values "rabbitmq-ha" "rabbitmqNodePort" }}/"
    {{- end }}
    {{ if index .Values "rabbitmq" "enabled" }}
    RABBITMQ_URL="amqp://${RABBITMQ_USER}:${RABBITMQ_DEFAULT_PASS}@{{ .Release.Name }}-rabbitmq:{{ index .Values "rabbitmq" "rabbitmqNodePort" }}/"
    {{- end }}
    cp -vf ${SCRIPTS_DIR}/xray_config.yaml ${XRAY_CONFIG_FILE}

    # Preparing xray_config.yaml
    sed -i "s RABBITMQ_URL ${RABBITMQ_URL} " ${XRAY_CONFIG_FILE}
    sed -i "s MONGODB_URL ${MONGODB_URL} " ${XRAY_CONFIG_FILE}
    sed -i "s POSTGRES_URL ${POSTGRES_URL} " ${XRAY_CONFIG_FILE}

  xray_config.yaml: |
    # Generated Xray config
    ---
        ver:            1.0
        XrayServerPort: "{{ .Values.server.internalPort }}"
        mqBaseUrl:      "RABBITMQ_URL"
        mongoUrl:       "MONGODB_URL"
        postgresqlUrl:  "POSTGRES_URL"
        stdOutEnabled:  {{ .Values.common.stdOutEnabled }}
        skipEntLicCheckForCloud: true
        indexAllBuilds: {{ .Values.common.indexAllBuilds }}
    # End generated config
