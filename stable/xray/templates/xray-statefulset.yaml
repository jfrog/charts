apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "xray.fullname" . }}
  labels:
    app: {{ template "xray.name" . }}
    chart: {{ template "xray.chart" . }}
    heritage: {{ .Release.Service }}
    release: {{ .Release.Name }}
    component: {{ .Values.xray.name }}
    {{- with .Values.xray.labels }}
{{ toYaml . | indent 4 }}
    {{- end }}
{{- if .Release.IsUpgrade }}
    unifiedUpgradeAllowed: {{ required "\n\n**************************************\nSTOP! UPGRADE from Xray 2.x (appVersion) currently not supported!\nIf this is an upgrade over an existing Xray 3.x, explicitly pass 'unifiedUpgradeAllowed=true' to upgrade.\n**************************************\n" .Values.unifiedUpgradeAllowed | quote }}
{{- end }}
{{- if and .Release.IsUpgrade .Values.postgresql.enabled }}
    databaseUpgradeReady: {{ required "\n\n*********\nIMPORTANT: UPGRADE STOPPED to prevent data loss!\nReview CHANGELOG.md (https://github.com/jfrog/charts/blob/master/stable/xray/CHANGELOG.md), pass postgresql.image.tag '9.6.18-debian-10-r7' or '10.13.0-debian-10-r38' or '12.5.0-debian-10-r25' and databaseUpgradeReady=true if you are upgrading from chart version which has postgresql version 9.6.x or 10.13.x or 12.5.x" .Values.databaseUpgradeReady | quote }}
{{- end }}
spec:
  serviceName: "{{ template "xray.fullname" . }}"
{{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
{{- end }}
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: {{ template "xray.name" . }}
      release: {{ .Release.Name }}
      component: {{ .Values.xray.name }}
  template:
    metadata:
      labels:
        app: {{ template "xray.name" . }}
        release: {{ .Release.Name }}
        component: {{ .Values.xray.name }}
    {{- with .Values.xray.labels }}
{{ toYaml . | indent 8 }}
    {{- end }}
      annotations:
        checksum/database-secrets: {{ include (print $.Template.BasePath "/xray-database-secrets.yaml") . | sha256sum }}
        checksum/systemyaml: {{ include (print $.Template.BasePath "/xray-system-yaml.yaml") . | sha256sum }}
        {{- with .Values.analysis.annotations }}
{{ toYaml . | indent 8 }}
        {{- end }}
        {{- with .Values.indexer.annotations }}
{{ toYaml . | indent 8 }}
        {{- end }}
        {{- with .Values.persist.annotations }}
{{ toYaml . | indent 8 }}
        {{- end }}
        {{- with .Values.server.annotations }}
{{ toYaml . | indent 8 }}
        {{- end }}
        {{- with .Values.router.annotations }}
{{ toYaml . | indent 8 }}
        {{- end }}
        {{- with .Values.filebeat.annotations }}
{{ toYaml . | indent 8 }}
        {{- end }}
    spec:
    {{- if or .Values.imagePullSecrets .Values.global.imagePullSecrets }}
{{- include "xray.imagePullSecrets" . | indent 6 }}
    {{- end }}
      serviceAccountName: {{ template "xray.serviceAccountName" . }}
      securityContext:
        runAsUser: {{ .Values.common.xrayUserId }}
        fsGroup: {{ .Values.common.xrayGroupId }}
      initContainers:
    {{- if or .Values.common.customInitContainersBegin .Values.global.customInitContainersBegin }}
{{ tpl (include "xray.customInitContainersBegin" .) . | indent 6 }}
    {{- end }}
      - name: 'copy-system-yaml'
        image: '{{ .Values.initContainerImage }}'
        resources:
{{ toYaml .Values.initContainers.resources | indent 10 }}
        command:
        - '/bin/sh'
        - '-c'
        - >
          echo "Copy system.yaml to {{ .Values.xray.persistence.mountPath }}/etc";
          mkdir -p {{ .Values.xray.persistence.mountPath }}/etc;
          {{- if .Values.systemYamlOverride.existingSecret }}
          cp -fv /tmp/etc/{{ .Values.systemYamlOverride.dataKey }} {{ .Values.xray.persistence.mountPath }}/etc/system.yaml;
          {{- else }}
          cp -fv /tmp/etc/system.yaml {{ .Values.xray.persistence.mountPath }}/etc/system.yaml;
          {{- end }}
          echo "Remove {{ .Values.xray.persistence.mountPath }}/lost+found folder if exists";
          rm -rfv {{ .Values.xray.persistence.mountPath }}/lost+found;
        {{- if or .Values.xray.joinKey .Values.xray.joinKeySecretName .Values.global.joinKey .Values.global.joinKeySecretName }}
          echo "Copy joinKey to {{ .Values.xray.persistence.mountPath }}/etc/security";
          mkdir -p {{ .Values.xray.persistence.mountPath }}/etc/security;
          echo ${XRAY_JOIN_KEY} > {{ .Values.xray.persistence.mountPath }}/etc/security/join.key;
        {{- end }}
        {{- if or .Values.xray.masterKey .Values.xray.masterKeySecretName .Values.global.masterKey .Values.global.masterKeySecretName }}
          echo "Copy masterKey to {{ .Values.xray.persistence.mountPath }}/etc/security";
          mkdir -p {{ .Values.xray.persistence.mountPath }}/etc/security;
          echo ${XRAY_MASTER_KEY} > {{ .Values.xray.persistence.mountPath }}/etc/security/master.key;
        {{- end }}
        env:
        {{- if or .Values.xray.joinKey .Values.xray.joinKeySecretName .Values.global.joinKey .Values.global.joinKeySecretName }}
        - name: XRAY_JOIN_KEY
          valueFrom:
            secretKeyRef:
              name: {{ include "xray.joinKeySecretName" . }}
              key: join-key
        {{- end }}
        {{- if or .Values.xray.masterKey .Values.xray.masterKeySecretName .Values.global.masterKey .Values.global.masterKeySecretName }}
        - name: XRAY_MASTER_KEY
          valueFrom:
            secretKeyRef:
              name: {{ include "xray.masterKeySecretName" . }}
              key: master-key
        {{- end }}
        volumeMounts:
        - name: data-volume
          mountPath: {{ .Values.xray.persistence.mountPath | quote }}
      {{- if or .Values.systemYamlOverride.existingSecret .Values.xray.systemYaml }}
        - name: systemyaml
          {{- if .Values.systemYamlOverride.existingSecret }}
          mountPath: "/tmp/etc/{{.Values.systemYamlOverride.dataKey}}"
          subPath: {{ .Values.systemYamlOverride.dataKey }}
          {{- else if .Values.xray.systemYaml }}
          mountPath: "/tmp/etc/system.yaml"
          subPath: system.yaml
          {{- end }}
      {{- end }}
      {{- if or .Values.xray.customCertificates.enabled .Values.global.customCertificates.enabled }}
      - name: copy-custom-certificates
        image: "{{ .Values.initContainerImage }}"
        resources:
{{ toYaml .Values.initContainers.resources | indent 10 }}
        command:
        - 'sh'
        - '-c'
        - >
{{ include "xray.copyCustomCerts" . | indent 10 }}
        volumeMounts:
          - name: data-volume
            mountPath: {{ .Values.xray.persistence.mountPath }}
          - name: ca-certs
            mountPath: "/tmp/certs"
      {{- end }}
      {{- if .Values.postgresql.enabled }}
      - name: "wait-for-db"
        image: "{{ .Values.initContainerImage }}"
        resources:
{{ toYaml .Values.initContainers.resources | indent 10 }}
        command:
        - 'sh'
        - '-c'
        - >
          until nc -z -w 2 {{ .Release.Name }}-postgresql {{ .Values.postgresql.service.port }} && echo database ok; do
            sleep 2;
          done;
      {{- end }}
    {{- if or .Values.common.customInitContainers .Values.global.customInitContainers }}
{{ tpl (include "xray.customInitContainers" .) . | indent 6 }}
    {{- end }}
      {{- if .Values.hostAliases }}
      hostAliases:
{{ toYaml .Values.hostAliases | indent 6 }}
      {{- end }}
      containers:
      - name: {{ .Values.router.name }}
        image: {{ include "xray.getImageInfoByValue" (list . "router") }}
        imagePullPolicy: {{ .Values.router.image.imagePullPolicy }}
        command:
          - '/bin/sh'
          - '-c'
          - >
          {{- with .Values.common.preStartCommand }}
            echo "Running custom common preStartCommand command";
            {{ tpl . $ }};
          {{- end }}
            exec /opt/jfrog/router/app/bin/entrypoint-router.sh;
        ports:
          - name: http-router
            containerPort: {{ .Values.router.internalPort }}
        securityContext:
          allowPrivilegeEscalation: false
        volumeMounts:
        - name: data-volume
          mountPath: {{ .Values.router.persistence.mountPath | quote }}
{{- if or .Values.common.customVolumeMounts .Values.global.customVolumeMounts }}
{{ tpl (include "xray.customVolumeMounts" .) . | indent 8 }}
{{- end }}
{{- with .Values.router.customVolumeMounts }}
{{ tpl . $ | indent 8 }}
{{- end }}
        resources:
{{ toYaml .Values.router.resources | indent 10 }}
{{- if .Values.router.startupProbe.enabled }}
        startupProbe:
{{ tpl .Values.router.startupProbe.config . | indent 10 }}
{{- end }}
{{- if .Values.router.livenessProbe.enabled }}
        livenessProbe:
{{ tpl .Values.router.livenessProbe.config . | indent 10 }}
{{- end }}
{{- if .Values.router.readinessProbe.enabled }}
        readinessProbe:
{{ tpl .Values.router.readinessProbe.config . | indent 10 }}
{{- end }}
      - name: {{ .Values.server.name }}
        image: {{ include "xray.getImageInfoByValue" (list . "server") }}
        imagePullPolicy: {{ .Values.imagePullPolicy }}
        command:
          - '/bin/bash'
          - '-c'
          - >
          {{- with .Values.common.preStartCommand }}
            echo "Running custom common preStartCommand command";
            {{ tpl . $ }};
          {{- end }}
          {{- with .Values.server.preStartCommand }}
            echo "Running custom Server preStartCommand command";
            {{ tpl . $ }};
          {{- end }}
            exec /opt/jfrog/xray/app/bin/wrapper.sh;
        env:
      {{- if and .Values.rabbitmq.external.secrets (not .Values.common.rabbitmq.connectionConfigFromEnvironment) }}
        - name: JF_SHARED_RABBITMQ_USERNAME
          valueFrom:
            secretKeyRef:
              name: {{ tpl .Values.rabbitmq.external.secrets.username.name . }}
              key: {{ tpl .Values.rabbitmq.external.secrets.username.key . }}
        - name: JF_SHARED_RABBITMQ_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ tpl .Values.rabbitmq.external.secrets.password.name . }}
              key: {{ tpl .Values.rabbitmq.external.secrets.password.key . }}
        - name: JF_SHARED_RABBITMQ_URL
          valueFrom:
            secretKeyRef:
              name: {{ tpl .Values.rabbitmq.external.secrets.url.name . }}
              key: {{ tpl .Values.rabbitmq.external.secrets.url.key . }}
      {{- end }}
      {{- if or .Values.database.secrets.user .Values.database.user }}
        - name: JF_SHARED_DATABASE_USERNAME
          valueFrom:
            secretKeyRef:
        {{- if .Values.database.secrets.user }}
              name: {{ tpl .Values.database.secrets.user.name . }}
              key: {{ tpl .Values.database.secrets.user.key . }}
        {{- else if .Values.database.user }}
              name: {{ template "xray.fullname" . }}-database-creds
              key: db-user
        {{- end }}
      {{- end }}
      {{- if or .Values.database.secrets.actualUsername .Values.database.actualUsername }}
        - name: JF_SHARED_DATABASE_ACTUALUSERNAME
          valueFrom:
            secretKeyRef:
        {{- if .Values.database.secrets.actualUsername }}
              name: {{ tpl .Values.database.secrets.actualUsername.name . }}
              key: {{ tpl .Values.database.secrets.actualUsername.key . }}
        {{- else if .Values.database.actualUsername }}
              name: {{ template "xray.fullname" . }}-database-creds
              key: db-actualUsername
        {{- end }}
      {{- end }}
      {{ if or .Values.database.secrets.password .Values.database.password .Values.postgresql.enabled }}
        - name: JF_SHARED_DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
        {{- if .Values.database.secrets.password }}
              name: {{ tpl .Values.database.secrets.password.name . }}
              key: {{ tpl .Values.database.secrets.password.key . }}
        {{- else if .Values.database.password }}
              name: {{ template "xray.fullname" . }}-database-creds
              key: db-password
        {{- else if .Values.postgresql.enabled }}
              name: {{ .Release.Name }}-postgresql
              key: postgresql-password
        {{- end }}
      {{- end }}
      {{- if or .Values.database.secrets.url .Values.database.url }}
        - name: JF_SHARED_DATABASE_URL
          valueFrom:
            secretKeyRef:
        {{- if .Values.database.secrets.url }}
              name: {{ tpl .Values.database.secrets.url.name . }}
              key: {{ tpl .Values.database.secrets.url.key . }}
        {{- else if .Values.database.url }}
              name: {{ template "xray.fullname" . }}-database-creds
              key: db-url
        {{- end }}
      {{- end }}
      {{- if .Values.common.rabbitmq.connectionConfigFromEnvironment }}
        - name: JF_SHARED_RABBITMQ_USERNAME
          value: {{ include "rabbitmq.user" .}}
        - name: JF_SHARED_RABBITMQ_URL
          value: {{ include "rabbitmq.url" .}}
        - name: JF_SHARED_RABBITMQ_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ include "rabbitmq.passwordSecretName" .}}
              key: rabbitmq-password
      {{- end }}
        ports:
        - containerPort: {{ .Values.server.internalPort }}
          name: http-server
        volumeMounts:
        - name: data-volume
          mountPath: "{{ .Values.xray.persistence.mountPath }}"
{{- if or .Values.common.customVolumeMounts .Values.global.customVolumeMounts }}
{{ tpl (include "xray.customVolumeMounts" .) . | indent 8 }}
{{- end }}
{{- with .Values.server.customVolumeMounts }}
{{ tpl . $ | indent 8 }}
{{- end }}
        securityContext:
          allowPrivilegeEscalation: false
        resources:
{{ toYaml .Values.server.resources | indent 10 }}
{{- if .Values.server.startupProbe.enabled }}
        startupProbe:
{{ tpl .Values.server.startupProbe.config . | indent 10 }}
{{- end }}
{{- if .Values.server.livenessProbe.enabled }}
        livenessProbe:
{{ tpl .Values.server.livenessProbe.config . | indent 10 }}
{{- end }}
{{- if .Values.server.readinessProbe.enabled }}
        readinessProbe:
{{ tpl .Values.server.readinessProbe.config . | indent 10 }}
{{- end }}
      - name: {{ .Values.analysis.name }}
        image: {{ include "xray.getImageInfoByValue" (list . "analysis") }}
        imagePullPolicy: {{ .Values.imagePullPolicy }}
        command:
          - '/bin/bash'
          - '-c'
          - >
          {{- with .Values.common.preStartCommand }}
            echo "Running custom common preStartCommand command";
            {{ tpl . $ }};
          {{- end }}
          {{- with .Values.analysis.preStartCommand }}
            echo "Running custom Analysis preStartCommand command";
            {{ tpl . $ }};
          {{- end }}
            exec /opt/jfrog/xray/app/bin/wrapper.sh;
        env:
      {{- if and .Values.rabbitmq.external.secrets (not .Values.common.rabbitmq.connectionConfigFromEnvironment) }}
        - name: JF_SHARED_RABBITMQ_USERNAME
          valueFrom:
            secretKeyRef:
              name: {{ tpl .Values.rabbitmq.external.secrets.username.name . }}
              key: {{ tpl .Values.rabbitmq.external.secrets.username.key . }}
        - name: JF_SHARED_RABBITMQ_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ tpl .Values.rabbitmq.external.secrets.password.name . }}
              key: {{ tpl .Values.rabbitmq.external.secrets.password.key . }}
        - name: JF_SHARED_RABBITMQ_URL
          valueFrom:
            secretKeyRef:
              name: {{ tpl .Values.rabbitmq.external.secrets.url.name . }}
              key: {{ tpl .Values.rabbitmq.external.secrets.url.key . }}
      {{- end }}
      {{- if or .Values.database.secrets.user .Values.database.user }}
        - name: JF_SHARED_DATABASE_USERNAME
          valueFrom:
            secretKeyRef:
        {{- if .Values.database.secrets.user }}
              name: {{ tpl .Values.database.secrets.user.name . }}
              key: {{ tpl .Values.database.secrets.user.key . }}
        {{- else if .Values.database.user }}
              name: {{ template "xray.fullname" . }}-database-creds
              key: db-user
        {{- end }}
      {{- end }}
      {{- if or .Values.database.secrets.actualUsername .Values.database.actualUsername }}
        - name: JF_SHARED_DATABASE_ACTUALUSERNAME
          valueFrom:
            secretKeyRef:
        {{- if .Values.database.secrets.actualUsername }}
              name: {{ tpl .Values.database.secrets.actualUsername.name . }}
              key: {{ tpl .Values.database.secrets.actualUsername.key . }}
        {{- else if .Values.database.actualUsername }}
              name: {{ template "xray.fullname" . }}-database-creds
              key: db-actualUsername
        {{- end }}
      {{- end }}
      {{ if or .Values.database.secrets.password .Values.database.password .Values.postgresql.enabled }}
        - name: JF_SHARED_DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
        {{- if .Values.database.secrets.password }}
              name: {{ tpl .Values.database.secrets.password.name . }}
              key: {{ tpl .Values.database.secrets.password.key . }}
        {{- else if .Values.database.password }}
              name: {{ template "xray.fullname" . }}-database-creds
              key: db-password
        {{- else if .Values.postgresql.enabled }}
              name: {{ .Release.Name }}-postgresql
              key: postgresql-password
        {{- end }}
      {{- end }}
      {{- if or .Values.database.secrets.url .Values.database.url }}
        - name: JF_SHARED_DATABASE_URL
          valueFrom:
            secretKeyRef:
        {{- if .Values.database.secrets.url }}
              name: {{ tpl .Values.database.secrets.url.name . }}
              key: {{ tpl .Values.database.secrets.url.key . }}
        {{- else if .Values.database.url }}
              name: {{ template "xray.fullname" . }}-database-creds
              key: db-url
        {{- end }}
      {{- end }}
      {{- if .Values.common.rabbitmq.connectionConfigFromEnvironment }}
        - name: JF_SHARED_RABBITMQ_USERNAME
          value: {{ include "rabbitmq.user" .}}
        - name: JF_SHARED_RABBITMQ_URL
          value: {{ include "rabbitmq.url" .}}
        - name: JF_SHARED_RABBITMQ_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ include "rabbitmq.passwordSecretName" .}}
              key: rabbitmq-password
      {{- end }}
        - name: XRAY_HA_NODE_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: XRAY_K8S_ENV
          value: "true"
        ports:
        - containerPort: {{ .Values.analysis.internalPort }}
          name: http-analysis
        volumeMounts:
        - name: data-volume
          mountPath: "{{ .Values.xray.persistence.mountPath }}"
{{- if or .Values.common.customVolumeMounts .Values.global.customVolumeMounts }}
{{ tpl (include "xray.customVolumeMounts" .) . | indent 8 }}
{{- end }}
{{- with .Values.analysis.customVolumeMounts }}
{{ tpl . $ | indent 8 }}
{{- end }}
        securityContext:
          allowPrivilegeEscalation: false
        resources:
{{ toYaml .Values.analysis.resources | indent 10 }}
{{- if .Values.analysis.startupProbe.enabled }}
        startupProbe:
{{ tpl .Values.analysis.startupProbe.config . | indent 10 }}
{{- end }}
{{- if .Values.analysis.livenessProbe.enabled }}
        livenessProbe:
{{ tpl .Values.analysis.livenessProbe.config . | indent 10 }}
{{- end }}
{{- if .Values.analysis.readinessProbe.enabled }}
        readinessProbe:
{{ tpl .Values.analysis.readinessProbe.config . | indent 10 }}
{{- end }}
      - name: {{ .Values.indexer.name }}
        image: {{ include "xray.getImageInfoByValue" (list . "indexer") }}
        imagePullPolicy: {{ .Values.imagePullPolicy }}
        command:
          - '/bin/bash'
          - '-c'
          - >
          {{- with .Values.common.preStartCommand }}
            echo "Running custom common preStartCommand command";
            {{ tpl . $ }};
          {{- end }}
          {{- with .Values.indexer.preStartCommand }}
            echo "Running custom Indexer preStartCommand command";
            {{ tpl . $ }};
          {{- end }}
            exec /opt/jfrog/xray/app/bin/wrapper.sh;
        env:
      {{- if and .Values.rabbitmq.external.secrets (not .Values.common.rabbitmq.connectionConfigFromEnvironment) }}
        - name: JF_SHARED_RABBITMQ_USERNAME
          valueFrom:
            secretKeyRef:
              name: {{ tpl .Values.rabbitmq.external.secrets.username.name . }}
              key: {{ tpl .Values.rabbitmq.external.secrets.username.key . }}
        - name: JF_SHARED_RABBITMQ_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ tpl .Values.rabbitmq.external.secrets.password.name . }}
              key: {{ tpl .Values.rabbitmq.external.secrets.password.key . }}
        - name: JF_SHARED_RABBITMQ_URL
          valueFrom:
            secretKeyRef:
              name: {{ tpl .Values.rabbitmq.external.secrets.url.name . }}
              key: {{ tpl .Values.rabbitmq.external.secrets.url.key . }}
      {{- end }}
      {{- if or .Values.database.secrets.user .Values.database.user }}
        - name: JF_SHARED_DATABASE_USERNAME
          valueFrom:
            secretKeyRef:
        {{- if .Values.database.secrets.user }}
              name: {{ tpl .Values.database.secrets.user.name . }}
              key: {{ tpl .Values.database.secrets.user.key . }}
        {{- else if .Values.database.user }}
              name: {{ template "xray.fullname" . }}-database-creds
              key: db-user
        {{- end }}
      {{- end }}
      {{- if or .Values.database.secrets.actualUsername .Values.database.actualUsername }}
        - name: JF_SHARED_DATABASE_ACTUALUSERNAME
          valueFrom:
            secretKeyRef:
        {{- if .Values.database.secrets.actualUsername }}
              name: {{ tpl .Values.database.secrets.actualUsername.name . }}
              key: {{ tpl .Values.database.secrets.actualUsername.key . }}
        {{- else if .Values.database.actualUsername }}
              name: {{ template "xray.fullname" . }}-database-creds
              key: db-actualUsername
        {{- end }}
      {{- end }}
      {{ if or .Values.database.secrets.password .Values.database.password .Values.postgresql.enabled }}
        - name: JF_SHARED_DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
        {{- if .Values.database.secrets.password }}
              name: {{ tpl .Values.database.secrets.password.name . }}
              key: {{ tpl .Values.database.secrets.password.key . }}
        {{- else if .Values.database.password }}
              name: {{ template "xray.fullname" . }}-database-creds
              key: db-password
        {{- else if .Values.postgresql.enabled }}
              name: {{ .Release.Name }}-postgresql
              key: postgresql-password
        {{- end }}
      {{- end }}
      {{- if or .Values.database.secrets.url .Values.database.url }}
        - name: JF_SHARED_DATABASE_URL
          valueFrom:
            secretKeyRef:
        {{- if .Values.database.secrets.url }}
              name: {{ tpl .Values.database.secrets.url.name . }}
              key: {{ tpl .Values.database.secrets.url.key . }}
        {{- else if .Values.database.url }}
              name: {{ template "xray.fullname" . }}-database-creds
              key: db-url
        {{- end }}
      {{- end }}
      {{- if .Values.common.rabbitmq.connectionConfigFromEnvironment }}
        - name: JF_SHARED_RABBITMQ_USERNAME
          value: {{ include "rabbitmq.user" .}}
        - name: JF_SHARED_RABBITMQ_URL
          value: {{ include "rabbitmq.url" .}}
        - name: JF_SHARED_RABBITMQ_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ include "rabbitmq.passwordSecretName" .}}
              key: rabbitmq-password
      {{- end }}
        - name: XRAY_HA_NODE_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: XRAY_K8S_ENV
          value: "true"
        ports:
        - containerPort: {{ .Values.indexer.internalPort }}
          name: http-indexer
        volumeMounts:
        - name: data-volume
          mountPath: "{{ .Values.xray.persistence.mountPath }}"
{{- if or .Values.common.customVolumeMounts .Values.global.customVolumeMounts }}
{{ tpl (include "xray.customVolumeMounts" .) . | indent 8 }}
{{- end }}
{{- with .Values.indexer.customVolumeMounts }}
{{ tpl . $ | indent 8 }}
{{- end }}
        securityContext:
          allowPrivilegeEscalation: false
        resources:
{{ toYaml .Values.indexer.resources | indent 10 }}
{{- if .Values.indexer.startupProbe.enabled }}
        startupProbe:
{{ tpl .Values.indexer.startupProbe.config . | indent 10 }}
{{- end }}
{{- if .Values.indexer.livenessProbe.enabled }}
        livenessProbe:
{{ tpl .Values.indexer.livenessProbe.config . | indent 10 }}
{{- end }}
{{- if .Values.indexer.readinessProbe.enabled }}
        readinessProbe:
{{ tpl .Values.indexer.readinessProbe.config . | indent 10 }}
{{- end }}
      - name: {{ .Values.persist.name }}
        image: {{ include "xray.getImageInfoByValue" (list . "persist") }}
        imagePullPolicy: {{ .Values.imagePullPolicy }}
        command:
          - '/bin/bash'
          - '-c'
          - >
          {{- with .Values.common.preStartCommand }}
            echo "Running custom common preStartCommand command";
            {{ tpl . $ }};
          {{- end }}
          {{- with .Values.persist.preStartCommand }}
            echo "Running custom Persist preStartCommand command";
            {{ tpl . $ }};
          {{- end }}
            exec /opt/jfrog/xray/app/bin/wrapper.sh;
        env:
      {{- if and .Values.rabbitmq.external.secrets (not .Values.common.rabbitmq.connectionConfigFromEnvironment) }}
        - name: JF_SHARED_RABBITMQ_USERNAME
          valueFrom:
            secretKeyRef:
              name: {{ tpl .Values.rabbitmq.external.secrets.username.name . }}
              key: {{ tpl .Values.rabbitmq.external.secrets.username.key . }}
        - name: JF_SHARED_RABBITMQ_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ tpl .Values.rabbitmq.external.secrets.password.name . }}
              key: {{ tpl .Values.rabbitmq.external.secrets.password.key . }}
        - name: JF_SHARED_RABBITMQ_URL
          valueFrom:
            secretKeyRef:
              name: {{ tpl .Values.rabbitmq.external.secrets.url.name . }}
              key: {{ tpl .Values.rabbitmq.external.secrets.url.key . }}
      {{- end }}
      {{- if or .Values.database.secrets.user .Values.database.user }}
        - name: JF_SHARED_DATABASE_USERNAME
          valueFrom:
            secretKeyRef:
        {{- if .Values.database.secrets.user }}
              name: {{ tpl .Values.database.secrets.user.name . }}
              key: {{ tpl .Values.database.secrets.user.key . }}
        {{- else if .Values.database.user }}
              name: {{ template "xray.fullname" . }}-database-creds
              key: db-user
        {{- end }}
      {{- end }}
      {{- if or .Values.database.secrets.actualUsername .Values.database.actualUsername }}
        - name: JF_SHARED_DATABASE_ACTUALUSERNAME
          valueFrom:
            secretKeyRef:
        {{- if .Values.database.secrets.actualUsername }}
              name: {{ tpl .Values.database.secrets.actualUsername.name . }}
              key: {{ tpl .Values.database.secrets.actualUsername.key . }}
        {{- else if .Values.database.actualUsername }}
              name: {{ template "xray.fullname" . }}-database-creds
              key: db-actualUsername
        {{- end }}
      {{- end }}
      {{ if or .Values.database.secrets.password .Values.database.password .Values.postgresql.enabled }}
        - name: JF_SHARED_DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
        {{- if .Values.database.secrets.password }}
              name: {{ tpl .Values.database.secrets.password.name . }}
              key: {{ tpl .Values.database.secrets.password.key . }}
        {{- else if .Values.database.password }}
              name: {{ template "xray.fullname" . }}-database-creds
              key: db-password
        {{- else if .Values.postgresql.enabled }}
              name: {{ .Release.Name }}-postgresql
              key: postgresql-password
        {{- end }}
      {{- end }}
      {{- if or .Values.database.secrets.url .Values.database.url }}
        - name: JF_SHARED_DATABASE_URL
          valueFrom:
            secretKeyRef:
        {{- if .Values.database.secrets.url }}
              name: {{ tpl .Values.database.secrets.url.name . }}
              key: {{ tpl .Values.database.secrets.url.key . }}
        {{- else if .Values.database.url }}
              name: {{ template "xray.fullname" . }}-database-creds
              key: db-url
        {{- end }}
      {{- end }}
      {{- if .Values.common.rabbitmq.connectionConfigFromEnvironment }}
        - name: JF_SHARED_RABBITMQ_USERNAME
          value: {{ include "rabbitmq.user" .}}
        - name: JF_SHARED_RABBITMQ_URL
          value: {{ include "rabbitmq.url" .}}
        - name: JF_SHARED_RABBITMQ_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ include "rabbitmq.passwordSecretName" .}}
              key: rabbitmq-password
      {{- end }}
        - name: XRAY_K8S_ENV
          value: "true"
        ports:
        - containerPort: {{ .Values.persist.internalPort }}
          name: http-persist
        volumeMounts:
        - name: data-volume
          mountPath: "{{ .Values.xray.persistence.mountPath }}"
{{- if or .Values.common.customVolumeMounts .Values.global.customVolumeMounts }}
{{ tpl (include "xray.customVolumeMounts" .) . | indent 8 }}
{{- end }}
{{- with .Values.persist.customVolumeMounts }}
{{ tpl . $ | indent 8 }}
{{- end }}
        securityContext:
          allowPrivilegeEscalation: false
        resources:
{{ toYaml .Values.persist.resources | indent 10 }}
{{- if .Values.persist.startupProbe.enabled }}
        startupProbe:
{{ tpl .Values.persist.startupProbe.config . | indent 10 }}
{{- end }}
{{- if .Values.persist.livenessProbe.enabled }}
        livenessProbe:
{{ tpl .Values.persist.livenessProbe.config . | indent 10 }}
{{- end }}
{{- if .Values.persist.readinessProbe.enabled }}
        readinessProbe:
{{ tpl .Values.persist.readinessProbe.config . | indent 10 }}
{{- end }}
      {{- if .Values.filebeat.enabled }}
      - name: {{ .Values.filebeat.name }}
        image: "{{ .Values.filebeat.image.repository }}:{{ .Values.filebeat.image.version }}"
        imagePullPolicy: {{ .Values.filebeat.image.pullPolicy }}
        args:
        - "-e"
        - "-E"
        - "http.enabled=true"
        securityContext:
          runAsUser: 0
        volumeMounts:
        - name: filebeat-config
          mountPath: /usr/share/filebeat/filebeat.yml
          readOnly: true
          subPath: filebeat.yml
        - name: data-volume
          mountPath: "{{ .Values.xray.persistence.mountPath }}"
        livenessProbe:
{{ toYaml .Values.filebeat.livenessProbe | indent 10 }}
        readinessProbe:
{{ toYaml .Values.filebeat.readinessProbe | indent 10 }}
        resources:
{{ toYaml .Values.filebeat.resources | indent 10 }}
        terminationGracePeriodSeconds: {{ .Values.terminationGracePeriod }}
      {{- end }}
{{- if or .Values.common.customSidecarContainers .Values.global.customSidecarContainers }}
{{ tpl (include "xray.customSidecarContainers" .) . | indent 6 }}
{{- end }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}
      volumes:
      {{- if or .Values.xray.customCertificates.enabled .Values.global.customCertificates.enabled }}
      - name: ca-certs
        secret:
          secretName: {{ default .Values.global.customCertificates.certificateSecretName .Values.xray.customCertificates.certificateSecretName }}
      {{- end }}
      {{- if or .Values.systemYamlOverride.existingSecret .Values.xray.systemYaml }}
      - name: systemyaml
        secret:
          secretName: {{ default (printf "%s-%s" (include "xray.fullname" .) "system-yaml") .Values.systemYamlOverride.existingSecret }}
      {{- end }}
      {{- if not .Values.common.persistence.enabled }}
      - name: data-volume
        emptyDir:
          sizeLimit: {{ .Values.common.persistence.size }}
      {{- end }}
      {{- if and .Values.common.persistence.enabled .Values.common.persistence.existingClaim }}
      - name: data-volume
        persistentVolumeClaim:
          claimName: {{ .Values.common.persistence.existingClaim }}
      {{- end }}
{{- if or .Values.common.customVolumes .Values.global.customVolumes }}
{{ tpl (include "xray.customVolumes" .) . | indent 6 }}
{{- end }}
      {{- if .Values.filebeat.enabled }}
      - name: filebeat-config
        configMap:
          name: {{ template "xray.fullname" . }}-filebeat-config
      {{- end }}
      {{- if .Values.common.configMaps }}
      - name: xray-configmaps
        configMap:
          name: {{ template "xray.fullname" . }}-configmaps
      {{- end }}
{{- with .Values.common.persistence }}
  {{- if and .enabled (not .existingClaim) }}
  volumeClaimTemplates:
  - metadata:
      name: data-volume
    spec:
      {{- if .storageClass }}
      {{- if (eq "-" .storageClass) }}
      storageClassName: ""
      {{- else }}
      storageClassName: "{{ .storageClass }}"
      {{- end }}
      {{- end }}
      accessModes: [ "{{ .accessMode }}" ]
      resources:
        requests:
          storage: {{ .size }}
  {{- end }}
{{- end }}
