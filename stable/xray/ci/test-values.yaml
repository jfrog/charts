# CI values for Xray
# If this is an upgrade over an existing Xray 3.x, explicitly pass 'unifiedUpgradeAllowed=true' to upgrade.
unifiedUpgradeAllowed: true
databaseUpgradeReady: true
xray:
  jfrogUrl: http://artifactory.rt:8082
  unifiedSecretInstallation: true
  openMetrics:
    enabled: true
  annotations:
    key1: "value1"
    key2: "value2"
  priorityClass:
    create: true

common:
  persistence:
    enabled: false
  fsGroupChangePolicy: "OnRootMismatch"

postgresql:
  postgresqlPassword: xray
  persistence:
    enabled: false

rabbitmq:
  auth:
    username: guest
    password: password
  persistence:
    enabled: false

initContainers:
  resources:
    requests:
      memory: "64Mi"
      cpu: "10m"
    limits:
      memory: "128Mi"
      cpu: "250m"

autoscaling:
  enabled: true
  minReplicas: 1
  maxReplicas: 3
  targetCPUUtilizationPercentage: 70
rbac:
  create: true
serviceAccount:
  create: true
  automountServiceAccountToken: true

## filebeat sidecar
filebeat:
  enabled: true
  filebeatYml: |
    logging.level: info
    path.data: {{ .Values.xray.persistence.mountPath }}/log/filebeat
    name: xray-filebeat
    queue.spool:
      file:
        permissions: 0760
    filebeat.inputs:
    - type: log
      enabled: true
      close_eof: ${CLOSE:false}
      paths:
         - {{ .Values.xray.persistence.mountPath }}/log/*.log
      fields:
        service: "jfxr"
        log_type: "xray"
    output.file:
      path: "/tmp/filebeat"
      filename: filebeat
  readinessProbe:
    exec:
      command:
        - sh
        - -c
        - |
          #!/usr/bin/env bash -e
          curl --fail 127.0.0.1:5066

server:
  resources:
    requests:
      memory: "300Mi"
      cpu: "100m"
    limits:
      memory: "4Gi"
      cpu: "3"
  # Add lifecycle hooks for container
  lifecycle:
    postStart:
      exec:
        command: ["/bin/sh", "-c", "echo Hello from the server postStart handler >> /tmp/message"]
    preStop:
      exec:
        command: ["/bin/sh", "-c", "echo Hello from the server postStart handler >> /tmp/message"]

  statefulset:
    annotations:
      xray: test

analysis:
  resources:
    requests:
      memory: "300Mi"
      cpu: "50m"
    limits:
      memory: "4Gi"
      cpu: "3"
  # Add lifecycle hooks for container
  lifecycle:
    postStart:
      exec:
        command: ["/bin/sh", "-c", "echo Hello from the analysis postStart handler >> /tmp/message"]
    preStop:
      exec:
        command: ["/bin/sh", "-c", "echo Hello from the analysis postStart handler >> /tmp/message"]


persist:
  resources:
    requests:
      memory: "300Mi"
      cpu: "50m"
    limits:
      memory: "4Gi"
      cpu: "3"
  # Add lifecycle hooks for container
  lifecycle:
    postStart:
      exec:
        command: ["/bin/sh", "-c", "echo Hello from the persist postStart handler >> /tmp/message"]
    preStop:
      exec:
        command: ["/bin/sh", "-c", "echo Hello from the persist postStart handler >> /tmp/message"]


indexer:
  resources:
    requests:
      memory: "300Mi"
      cpu: "50m"
    limits:
      memory: "4Gi"
      cpu: "4"
  # Add lifecycle hooks for container
  lifecycle:
    postStart:
      exec:
        command: ["/bin/sh", "-c", "echo Hello from the indexer postStart handler >> /tmp/message"]
    preStop:
      exec:
        command: ["/bin/sh", "-c", "echo Hello from the indexer postStart handler >> /tmp/message"]

router:
  # Add lifecycle hooks for container
  lifecycle:
    postStart:
      exec:
        command: ["/bin/sh", "-c", "echo Hello from the router postStart handler >> /tmp/message"]
    preStop:
      exec:
        command: ["/bin/sh", "-c", "echo Hello from the router postStart handler >> /tmp/message"]
observability:
  # Add lifecycle hooks for container
  lifecycle:
    postStart:
      exec:
        command: ["/bin/sh", "-c", "echo Hello from the observability postStart handler >> /tmp/message"]
    preStop:
      exec:
        command: ["/bin/sh", "-c", "echo Hello from the observability postStart handler >> /tmp/message"]
