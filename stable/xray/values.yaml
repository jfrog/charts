# Default values for Xray HA.
# This is a YAML-formatted file.
# Beware when changing values here. You should know what you are doing!
# Access the values with {{ .Values.key.subkey }}

# General
imagePullPolicy: IfNotPresent
initContainerImage: "alpine:3.8"
imagePullSecrets:

## Role Based Access
## Ref: https://kubernetes.io/docs/admin/authorization/rbac/
rbac:
  create: true
  role:
    ## Rules to create. It follows the role specification
    rules:
    - apiGroups:
      - ''
      resources:
      - services
      - endpoints
      - pods
      verbs:
      - get
      - watch
      - list

networkpolicy:
  # Allows all ingress and egress
  - name: xray
    podSelector:
      matchLabels:
        app: xray
    egress:
      - {}
    ingress:
      - {}
  # Uncomment to allow only xray pods to communicate with postgresql (if postgresql.enabled is true)
  # - name: postgres
  #   podSelector:
  #     matchLabels:
  #       app: postgresql
  #   ingress:
  #   - from:
  #     - podSelector:
  #         matchLabels:
  #           app: xray
  # Uncomment to allow only xray pods to communicate with mongo (if mongodb.enabled is true)
  # - name: mongo
  #   podSelector:
  #     matchLabels:
  #       app: mongodb
  #   ingress:
  #   - from:
  #     - podSelector:
  #         matchLabels:
  #           app: xray
  # Uncomment to allow only xray pods to communicate with rabbitmq (if rabbitmq.enabled is true)
  # - name: rabbitmq
  #   podSelector:
  #     matchLabels:
  #       app: rabbitmq
  #   ingress:
  #   - from:
  #     - podSelector:
  #         matchLabels:
  #           app: xray
  # Uncomment to allow only xray pods to communicate with rabbitmq-ha (if rabbitmq-ha.enabled is true)
  # - name: rabbitmq-ha
  #   podSelector:
  #     matchLabels:
  #       app: rabbitmq-ha
  #   ingress:
  #   - from:
  #     - podSelector:
  #         matchLabels:
  #           app: xray

ingress:
  enabled: false
  defaultBackend:
    enabled: true
  # Used to create an Ingress record.
  hosts: []
  annotations:
  # kubernetes.io/ingress.class: nginx
  # kubernetes.io/tls-acme: "true"
  tls:
  # Secrets must be manually created in the namespace.
  # - secretName: chart-example-tls
  #   hosts:
  #     - xray.domain.example
# labels:
  # traffic-type: external
  # traffic-type: internal

  additionalRules: []

## Service Account
## Ref: https://kubernetes.io/docs/admin/service-accounts-admin/
##
serviceAccount:
  create: true
  ## The name of the ServiceAccount to use.
  ## If not set and create is true, a name is generated using the fullname template
  name:

# PostgreSQL
## Configuration values for the postgresql dependency
## ref: https://github.com/kubernetes/charts/blob/master/stable/postgresql/README.md
##
postgresql:
  enabled: true
  imageTag: "9.6.11"
  postgresDatabase: "xraydb"
  postgresUser: "xray"
  postgresPassword:
  postgresConfig:
    maxConnections: "500"
  service:
    port: 5432
  persistence:
    enabled: true
    size: 50Gi
    existingClaim:
  resources: {}
  #  requests:
  #    memory: "1Gi"
  #    cpu: "250m"
  #  limits:
  #    memory: "2Gi"
  #    cpu: "1"
  nodeSelector: {}
  affinity: {}
  tolerations: []

## Configuration values for the mongodb dependency
## ref: https://github.com/kubernetes/charts/blob/master/stable/mongodb/README.md
##
mongodb:
  enabled: true
  image:
    tag: 3.6.3
    pullPolicy: IfNotPresent
  persistence:
    size: 50Gi
  resources: {}
  # The following values are suggested to be used when working with mongoDB and Xray. The DB sync in Xray needs more resources than the defaults in mongoDB.
  #  requests:
  #    memory: "6Gi"
  #    cpu: "2"
  #  limits:
  #    memory: "6Gi"
  #    cpu: "2"
  ## Make sure the limits.memory value is the same as the requests.memory value!
  ## Make sure the --wiredTigerCacheSizeGB is no more than half the memory limit!
  ## This is critical to protect against OOMKill by Kubernetes!
  mongodbExtraFlags:
  # The wiredTiger is suggested to be set to 3GB.
  - "--wiredTigerCacheSizeGB=1"
  mongodbRootPassword:
  mongodbUsername: xray
  mongodbPassword:
  mongodbDatabase: xray
#  livenessProbe:
#    initialDelaySeconds: 60
#    periodSeconds: 10
#  readinessProbe:
#    initialDelaySeconds: 30
#    periodSeconds: 30
  nodeSelector: {}
  affinity: {}
  tolerations: []

# RabbitMQ HA
## Configuration values for the rabbitmq-ha dependency
## ref: https://github.com/kubernetes/charts/blob/master/stable/rabbitmq-ha/README.md
##
rabbitmq-ha:
  enabled: true
  replicaCount: 1
  rabbitmqUsername: guest
  rabbitmqPassword:
  rabbitmqErlangCookie: XRAYRABBITMQCLUSTER
  rabbitmqMemoryHighWatermark: 500MB
  rabbitmqNodePort: 5672
  definitions:
    policies: |-
      {
        "name": "ha-all",
        "apply-to": "all",
        "pattern": ".*",
        "vhost": "/",
        "definition": {
          "ha-mode": "all",
          "ha-sync-mode": "automatic",
        }
      }
  resources: {}
  #  requests:
  #    memory: "250Mi"
  #    cpu: "100m"
  #  limits:
  #    memory: "550Mi"
  #    cpu: "200m"
  persistentVolume:
    enabled: true
    size: 20Gi
  rbac:
    create: true
  nodeSelector: {}
  tolerations: []

# RabbitMQ
## Configuration values for the rabbitmq dependency
## ref: https://github.com/kubernetes/charts/blob/master/stable/rabbitmq/README.md
##
rabbitmq:
  enabled: false
  rabbitmqErlangCookie: XRAYRABBITMQCLUSTER
  rabbitmqMemoryHighWatermark: 500MB
  rabbitmqNodePort: 5672
  rabbitmqUsername: user
  rabbitmqPassword:
  persistentVolume:
    enabled: true
    size: 20Gi
  rbac:
    create: true

# Logger containers
logger:
  image:
    repository: 'busybox'
    tag: '1.30'

# Common Xray settings
common:
  ## Note that by default we use appVersion to get image tag
  # xrayVersion:
  xrayConfigPath: /var/opt/jfrog/xray/data
  xrayUserId: 1035
  xrayGroupId: 1035
  ## Xray requires a unique master key
  ## You can generate one with the command:
  ## 'openssl rand -hex 32'
  ## Pass it to helm with '--set common.masterKey=${MASTER_KEY}'
  ## IMPORTANT: You should NOT use the example masterKey for a production deployment!
  masterKey: FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  # masterKeySecretName:
  # Xray configuration to be written to xray_config.yaml
  xrayConfig:
    stdOutEnabled: true
    indexAllBuilds: false

  ## Add custom init containers
  customInitContainers: |
  #  - name: "custom-setup"
  #    image: "{{ .Values.initContainerImage }}"
  #    imagePullPolicy: "{{ .Values.imagePullPolicy }}"
  #    command:
  #      - 'sh'
  #      - '-c'
  #      - 'touch {{ .Values.common.xrayConfigPath }}/example-custom-setup'
  #    volumeMounts:
  #      - mountPath: "{{ .Values.common.xrayConfigPath }}"
  #        name: data-volume

# For setting up external services, must pass the connection URL for them
global:
  mongoUrl:
  postgresqlUrl:
  # Kubernetes secret with Postgres TLS certificates
  postgresqlTlsSecret:

analysis:
  name: xray-analysis
  image: docker.bintray.io/jfrog/xray-analysis
  updateStrategy: RollingUpdate
  podManagementPolicy: Parallel
  replicaCount: 1
  internalPort: 7000
  externalPort: 7000
  service:
    type: ClusterIP
  ## Container storage limit
  persistence:
    size: 10Gi
  # Add any of the loggers to a sidecar if you want to be able to see them with kubectl logs or a log collector in your k8s cluster
  loggers: []
  # - xray_analysis.log
  resources: {}
  #  requests:
  #    memory: "1Gi"
  #    cpu: "100m"
  #  limits:
  #    memory: "2Gi"
  #    cpu: "1"
  nodeSelector: {}
  affinity: {}
  tolerations: []

indexer:
  name: xray-indexer
  image: docker.bintray.io/jfrog/xray-indexer
  updateStrategy: RollingUpdate
  podManagementPolicy: Parallel
  replicaCount: 1
  internalPort: 7002
  externalPort: 7002
  service:
    type: ClusterIP

  persistence:
    enabled: true
    ## A manually managed Persistent Volume and Claim
    ## Requires persistence.enabled: true
    ## If defined, PVC must be created manually before volume will be bound
    # existingClaim:

    accessMode: ReadWriteOnce
    ## Container storage limit if persistence.enabled: false
    ## Otherwise PVC size
    size: 50Gi
    ## indexer data Persistent Volume Storage Class
    ## If defined, storageClassName: <storageClass>
    ## If set to "-", storageClassName: "", which disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is
    ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
    ##   GKE, AWS & OpenStack)
    ##
    # storageClass: "-"

  # Add any of the loggers to a sidecar if you want to be able to see them with kubectl logs or a log collector in your k8s cluster
  loggers: []
  # - xray_indexer.log
  resources: {}
  #  requests:
  #    memory: "1Gi"
  #    cpu: "100m"
  #  limits:
  #    memory: "2Gi"
  #    cpu: "1"
  nodeSelector: {}
  affinity: {}
  tolerations: []

persist:
  name: xray-persist
  image: docker.bintray.io/jfrog/xray-persist
  updateStrategy: RollingUpdate
  podManagementPolicy: Parallel
  replicaCount: 1
  internalPort: 7003
  externalPort: 7003
  service:
    type: ClusterIP
  ## Container storage limit
  persistence:
    size: 10Gi
  # Add any of the loggers to a sidecar if you want to be able to see them with kubectl logs or a log collector in your k8s cluster
  loggers: []
  # - xray_persist.log
  resources: {}
  #  requests:
  #    memory: "1Gi"
  #    cpu: "100m"
  #  limits:
  #    memory: "2Gi"
  #    cpu: "1"
  nodeSelector: {}
  affinity: {}
  tolerations: []

server:
  name: xray-server
  image: docker.bintray.io/jfrog/xray-server
  updateStrategy: RollingUpdate
  podManagementPolicy: Parallel
  replicaCount: 1
  internalPort: 8000
  externalPort: 80
  service:
    type: LoadBalancer
    name: xray
    annotations:
    # external-dns.alpha.kubernetes.io/hostname:  example.org
    # service.beta.kubernetes.io/aws-load-balancer-backend-protocol: tcp
    # service.beta.kubernetes.io/aws-load-balancer-ssl-cert: arn:aws:acm:us-east-1:XXXXXX:certificate/XXXXXX

  persistence:
    enabled: true
    ## A manually managed Persistent Volume and Claim
    ## Requires persistence.enabled: true
    ## If defined, PVC must be created manually before volume will be bound
    # existingClaim:

    accessMode: ReadWriteOnce
    ## Container storage limit if persistence.enabled: false
    ## Otherwise PVC size
    size: 50Gi
    ## server data Persistent Volume Storage Class
    ## If defined, storageClassName: <storageClass>
    ## If set to "-", storageClassName: "", which disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is
    ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
    ##   GKE, AWS & OpenStack)
    ##
    # storageClass: "-"

  # Whitelist IPs allowed to LoadBalancer type services
  # Example: loadBalancerSourceRanges={82.82.190.51/32,141.141.8.8/32}
  loadBalancerSourceRanges: []
  # Add any of the loggers to a sidecar if you want to be able to see them with kubectl logs or a log collector in your k8s cluster
  loggers: []
  # - xray_server.log
  resources: {}
  #  requests:
  #    memory: "1Gi"
  #    cpu: "100m"
  #  limits:
  #    memory: "2Gi"
  #    cpu: "1"
  nodeSelector: {}
  affinity: {}
  tolerations: []
