apiVersion: apps/v1beta2
kind: StatefulSet
metadata:
  name: {{ template "distribution.fullname" . }}
  labels:
    app: {{ template "distribution.name" . }}
    chart: {{ template "distribution.chart" . }}
    heritage: {{ .Release.Service }}
    release: {{ .Release.Name }}
    component: {{ .Values.distribution.name }}
spec:
  serviceName: {{ template "distribution.fullname" . }}-headless
  replicas: {{ .Values.replicaCount }}
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: {{ template "distribution.name" . }}
      chart: {{ template "distribution.chart" . }}
      release: {{ .Release.Name }}
      role: {{ template "distribution.name" . }}
      component: {{ .Values.distribution.name }}
  template:
    metadata:
      labels:
        app: {{ template "distribution.name" . }}
        chart: {{ template "distribution.chart" . }}
        release: {{ .Release.Name }}
        role: {{ template "distribution.name" . }}
        component: {{ .Values.distribution.name }}
    spec:
      serviceAccountName: {{ template "distribution.serviceAccountName" . }}
    {{- if .Values.imagePullSecrets }}
      imagePullSecrets:
      - name: {{ .Values.imagePullSecrets }}
    {{- end }}
      securityContext:
        runAsUser: {{ .Values.common.uid }}
        fsGroup: {{ .Values.common.gid }}
      initContainers:
      - name: 'wait-for-db'
        image: '{{ .Values.initContainerImage }}'
        command:
        - '/bin/sh'
        - '-c'
        - >
          echo "Waiting for database to be ready...";
        {{- if .Values.postgresql.enabled }}
          until nc -z -w 2 {{ .Release.Name }}-postgresql {{ .Values.postgresql.service.port }} && echo {{ .Release.Name }}-postgresql ok; do sleep 2; done;
        {{- end }}
    {{- if .Values.distribution.customInitContainers }}
{{ tpl .Values.distribution.customInitContainers . | indent 6}}
    {{- end }}
      containers:
      - name: {{ .Values.distribution.name }}
        image: '{{ .Values.distribution.image.repository }}:{{ default .Chart.AppVersion .Values.distribution.image.version }}'
        imagePullPolicy: {{ .Values.distribution.image.imagePullPolicy }}
        securityContext:
          allowPrivilegeEscalation: false
        ports:
        - name: distribution
          containerPort: {{ .Values.distribution.internalPort }}
        env:
        - name: DEFAULT_JAVA_OPTS
          value: '-Ddistribution.home={{ .Values.distribution.persistence.mountPath }}
                  -Djfrog.master.key={{ .Values.distribution.masterKey }}
                  -Dcom.sun.management.jmxremote.authenticate=false
                  -Dcom.sun.management.jmxremote.ssl=false -Duser.timezone=UTC
                  {{- if .Values.distribution.javaOpts.xms }}
                  -Xms{{ .Values.distribution.javaOpts.xms }}
                  {{- end}}
                  {{- if .Values.distribution.javaOpts.xmx }}
                  -Xmx{{ .Values.distribution.javaOpts.xmx }}
                  {{- end}}
                  {{- if .Values.distribution.serviceId }}
                  -Djfrog.distribution.platform.distributionServiceId={{ .Values.distribution.serviceId }}
                  {{- end}}
                  -Dspring.profiles.active=production'
      {{- if .Values.distribution.masterKey }}
        - name: MASTER_KEY
          value: '{{ .Values.distribution.masterKey }}'
      {{- end }}
      {{- if .Values.postgresql.enabled }}
        - name: POSTGRES_HOST
          value: '{{ .Release.Name }}-postgresql'
        - name: POSTGRES_PORT
          value: '{{ .Values.postgresql.service.port }}'
        - name: POSTGRES_DATABASE
          value: '{{ .Values.postgresql.postgresDatabase }}'
        - name: POSTGRES_USERNAME
          value: '{{ .Values.postgresql.postgresUser }}'
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-postgresql
              key: postgres-password
      {{- else }}
        - name: POSTGRES_HOST
          value: '{{ .Values.database.host }}'
        - name: POSTGRES_PORT
          value: '{{ .Values.database.port }}'
        - name: POSTGRES_DATABASE
          value: '{{ .Values.database.database }}'
        - name: POSTGRES_USERNAME
      {{- if .Values.database.secrets.user }}
          valueFrom:
            secretKeyRef:
              name: {{ .Values.database.secrets.user.name }}
              key: {{ .Values.database.secrets.user.key }}
      {{- else }}
          value: '{{ .Values.database.user }}'
      {{- end }}
        - name: POSTGRES_PASSWORD
      {{- if .Values.database.secrets.password }}
          valueFrom:
            secretKeyRef:
              name: {{ .Values.database.secrets.password.name }}
              key: {{ .Values.database.secrets.password.key }}
      {{- else }}
          valueFrom:
            secretKeyRef:
              name: {{ template "distribution.fullname" . }}-database-connection
              key: db-password
      {{- end }}
      {{- end }}
        - name: REDIS_HOST
          value: 'localhost'
        - name: REDIS_PORT
          value: '{{ .Values.redis.port }}'
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "distribution.fullname" . }}-redis-secret
              key: password
        - name: BT_ARTIFACTORY_URL
          value: {{ .Values.distribution.env.artifactoryUrl | quote }}
        - name: BT_SERVER_URL
          value: {{ .Values.distribution.env.btServerUrl | quote }}
        {{- if .Values.distribution.env.artifactoryEdge1Url }}
        - name: artifactory_edge_1_url
          value: {{ .Values.distribution.env.artifactoryEdge1Url }}
        {{- end }}
        {{- if .Values.distribution.env.artifactoryEdge2Url }}
        - name: artifactory_edge_2_url
          value: {{ .Values.distribution.env.artifactoryEdge2Url }}
        {{- end }}
        {{- if .Values.distribution.env.artifactoryEdge3Url }}
        - name: artifactory_edge_3_url
          value: {{ .Values.distribution.env.artifactoryEdge3Url }}
        {{- end }}
        {{- if .Values.distribution.env.artifactoryCi1Url }}
        - name: artifactory_ci_1_url
          value: {{ .Values.distribution.env.artifactoryCi1Url }}
        {{- end }}
        volumeMounts:
        - name: distribution-data
          mountPath: {{ .Values.distribution.persistence.mountPath | quote }}
        resources:
{{ toYaml .Values.distribution.resources | indent 10 }}
        readinessProbe:
          httpGet:
            path: /api/v1/system/ping
            port: {{ .Values.distribution.internalPort }}
          initialDelaySeconds: 30
          periodSeconds: 10
          failureThreshold: 10
        livenessProbe:
          httpGet:
            path: /api/v1/system/ping
            port: {{ .Values.distribution.internalPort }}
          initialDelaySeconds: 60
          periodSeconds: 10
      - name: {{ .Values.distributor.name }}
        image: '{{ .Values.distributor.image.repository }}:{{ default .Chart.AppVersion .Values.distributor.image.version }}'
        imagePullPolicy: {{ .Values.distributor.image.imagePullPolicy }}
        securityContext:
          allowPrivilegeEscalation: false
        command:
            - '/bin/sh'
              - '-c'
              - 'sh /scripts/startup.sh'
        env:
        - name: DEFAULT_JAVA_OPTS
          value: '-Ddistribution.home={{ .Values.distributor.persistence.mountPath }}
                  -Djfrog.distributor.distribution.internal-api-url=http://localhost:{{ .Values.distribution.internalPort }}/api/internal
                  -Dfile.encoding=UTF8 -Dcom.sun.management.jmxremote.authenticate=false
                  -Dcom.sun.management.jmxremote.ssl=false -Duser.timezone=UTC
                  {{- if .Values.distributor.javaOpts.xms }}
                  -Xms{{ .Values.distributor.javaOpts.xms }}
                  {{- end}}
                  {{- if .Values.distributor.javaOpts.xmx }}
                  -Xmx{{ .Values.distributor.javaOpts.xmx }}
                  {{- end}}
                  -Dspring.profiles.active=production'
        - name: REDIS_HOST
          value: 'localhost'
        - name: REDIS_PORT
          value: '{{ .Values.redis.port }}'
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "distribution.fullname" . }}-redis-secret
              key: password
        volumeMounts:
        - name: distributor-data
          mountPath: {{ .Values.distributor.persistence.mountPath | quote }}
        resources:
{{ toYaml .Values.distributor.resources | indent 10 }}
      - name: {{ template "redis.name" . }}
        image: '{{ .Values.redis.image.repository }}:{{ .Values.redis.image.tag }}'
        imagePullPolicy: {{ .Values.redis.image.pullPolicy }}
        env:
        - name: REDIS_REPLICATION_MODE
          value: master
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "distribution.fullname" . }}-redis-secret
              key: password
        - name: REDIS_PORT
        value: {{ .Values.redis.port | quote }}
        - name: REDIS_DISABLE_COMMANDS
          value: {{ .Values.redis.disableCommands }}
        ports:
        - name: redis
          containerPort: {{ .Values.redis.port }}
        readinessProbe:
          initialDelaySeconds: 10
          exec:
            command:
            - redis-cli
            - ping
        livenessProbe:
          initialDelaySeconds: 30
          exec:
            command:
            - redis-cli
            - ping
        resources:
{{ toYaml .Values.redis.resources | indent 10 }}
        volumeMounts:
        - name: redis-data
          mountPath: {{ .Values.redis.persistence.path }}
  {{- with .Values.distribution.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.distribution.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.distribution.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}
      volumes:
  {{- if not .Values.distribution.persistence.enabled }}
      - name: distribution-data
        emptyDir: {}
  {{- else }}
  volumeClaimTemplates:
    - metadata:
        name: distribution-data
        labels:
          app: {{ template "distribution.name" . }}
          chart: {{ template "distribution.chart" . }}
          release: {{ .Release.Name  }}
          heritage: {{ .Release.Service }}
      spec:
      {{- if .Values.distribution.persistence.existingClaim }}
        selector:
          matchLabels:
            app: {{ template "distribution.name" . }}
      {{- else }}
        {{- if .Values.distribution.persistence.storageClass }}
        {{- if (eq "-" .Values.distribution.persistence.storageClass) }}
        storageClassName: ''
        {{- else }}
        storageClassName: '{{ .Values.distribution.persistence.storageClass }}'
        {{- end }}
        {{- end }}
        accessModes: [ '{{ .Values.distribution.persistence.accessMode }}' ]
        resources:
          requests:
            storage: {{ .Values.distribution.persistence.size }}
      {{- end }}
  {{- end }}
