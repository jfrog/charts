apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "pdn-server.fullname" . }}
  labels:
    app: {{ template "pdn-server.name" . }}
    chart: {{ template "pdn-server.chart" . }}
    heritage: {{ .Release.Service }}
    release: {{ .Release.Name }}
    component: {{ .Values.pdnServer.name }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "pdn-server.name" . }}
      release: {{ .Release.Name }}
      component: {{ .Values.pdnServer.name }}
  template:
    metadata:
      annotations:
        checksum/systemyaml: {{ include (print $.Template.BasePath "/pdnserver-system-yaml.yaml") . | sha256sum }}
      {{- range $key, $value := .Values.pdnServer.annotations }}
        {{ $key }}: {{ $value | quote }}
      {{- end }}
      labels:
        app: {{ template "pdn-server.name" . }}
        chart: {{ template "pdn-server.chart" . }}
        component: {{ .Values.pdnServer.name }}
        heritage: {{ .Release.Service }}
        release: {{ .Release.Name }}
    spec:
    {{- if .Values.pdnServer.priorityClass.existingPriorityClass }}
      priorityClassName: {{ .Values.pdnServer.priorityClass.existingPriorityClass }}
    {{- else -}}
      {{- if .Values.pdnServer.priorityClass.create }}
      priorityClassName: {{ default (include "pdn-server.fullname" .) .Values.pdnServer.priorityClass.name }}
      {{- end }}
    {{- end }}
      serviceAccountName: {{ template "pdn-server.serviceAccountName" . }}
    {{- if or .Values.imagePullSecrets .Values.global.imagePullSecrets }}
{{- include "pdn-server.imagePullSecrets" . | indent 6 }}
    {{- end }}
      securityContext:
        runAsUser: {{ .Values.pdnServer.uid }}
        fsGroup: {{ .Values.pdnServer.gid }}
        {{- if .Values.pdnServer.fsGroupChangePolicy }}
        fsGroupChangePolicy: {{ .Values.pdnServer.fsGroupChangePolicy }}
        {{- end }}
      initContainers:
    {{- if or .Values.pdnServer.customInitContainersBegin .Values.global.customInitContainersBegin }}
{{ tpl (include "pdn-server.customInitContainersBegin" .)  . | indent 6 }}
    {{- end }}
      - name: 'copy-system-yaml'
        image: '{{ .Values.initContainerImage }}'
        securityContext:
          runAsNonRoot: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - NET_RAW
        resources:
{{ toYaml .Values.initContainers.resources | indent 10 }}
        command:
        - '/bin/bash'
        - '-c'
        - >
          sleep 30;
          if [[ -e "{{ .Values.pdnServer.persistence.mountPath }}/etc/filebeat.yaml" ]]; then chmod 644 {{ .Values.pdnServer.persistence.mountPath }}/etc/filebeat.yaml; fi;
          echo "Copy system.yaml to {{ .Values.pdnServer.persistence.mountPath }}/etc";
          mkdir -p {{ .Values.pdnServer.persistence.mountPath }}/etc;
          {{- if .Values.systemYamlOverride.existingSecret }}
          cp -fv /tmp/etc/{{ .Values.systemYamlOverride.dataKey }} {{ .Values.pdnServer.persistence.mountPath }}/etc/system.yaml;
          {{- else }}
          cp -fv /tmp/etc/system.yaml {{ .Values.pdnServer.persistence.mountPath }}/etc/system.yaml;
          {{- end }}
          echo "Remove {{ .Values.pdnServer.persistence.mountPath }}/lost+found folder if exists";
          rm -rfv {{ .Values.pdnServer.persistence.mountPath }}/lost+found;
        {{- if or .Values.pdnServer.joinKey .Values.pdnServer.joinKeySecretName .Values.global.joinKey .Values.global.joinKeySecretName }}
          echo "Copy joinKey to {{ .Values.pdnServer.persistence.mountPath }}/etc/security";
          mkdir -p {{ .Values.pdnServer.persistence.mountPath }}/etc/security;
          echo ${PDN_SERVER_JOIN_KEY} > {{ .Values.pdnServer.persistence.mountPath }}/etc/security/join.key;
        {{- end }}
        {{- if or .Values.pdnServer.masterKey .Values.pdnServer.masterKeySecretName .Values.global.masterKey .Values.global.masterKeySecretName }}
          echo "Copy masterKey to {{ .Values.pdnServer.persistence.mountPath }}/etc/security";
          mkdir -p {{ .Values.pdnServer.persistence.mountPath }}/etc/security;
          echo ${PDN_SERVER_MASTER_KEY} > {{ .Values.pdnServer.persistence.mountPath }}/etc/security/master.key;
        {{- end }}
        env:
        {{- if or .Values.pdnServer.joinKey .Values.pdnServer.joinKeySecretName .Values.global.joinKey .Values.global.joinKeySecretName }}
        - name: PDN_SERVER_JOIN_KEY
          valueFrom:
            secretKeyRef:
              name: {{ include "pdn-server.joinKeySecretName" . }}
              key: join-key
        {{- end }}
        {{- if or .Values.pdnServer.masterKey .Values.pdnServer.masterKeySecretName .Values.global.masterKey .Values.global.masterKeySecretName }}
        - name: PDN_SERVER_MASTER_KEY
          valueFrom:
            secretKeyRef:
              name: {{ include "pdn-server.masterKeySecretName" . }}
              key: master-key
        {{- end }}
        volumeMounts:
        - name: pdnserver-data
          mountPath: {{ .Values.pdnServer.persistence.mountPath | quote }}
      {{- if or .Values.systemYamlOverride.existingSecret .Values.pdnServer.systemYaml }}
        - name: systemyaml
          {{- if .Values.systemYamlOverride.existingSecret }}
          mountPath: "/tmp/etc/{{.Values.systemYamlOverride.dataKey}}"
          subPath: {{ .Values.systemYamlOverride.dataKey }}
          {{- else if .Values.pdnServer.systemYaml }}
          mountPath: "/tmp/etc/system.yaml"
          subPath: system.yaml
          {{- end }}
      {{- end }}
      {{- if or .Values.pdnServer.customCertificates.enabled .Values.global.customCertificates.enabled }}
      - name: copy-custom-certificates
        image: "{{ .Values.initContainerImage }}"
        securityContext:
          runAsNonRoot: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - NET_RAW
        resources:
{{ toYaml .Values.initContainers.resources | indent 10 }}
        command:
        - 'bash'
        - '-c'
        - >
{{ include "pdn-server.copyCustomCerts" . | indent 10 }}
        volumeMounts:
          - name: pdnserver-data
            mountPath: {{ .Values.pdnServer.persistence.mountPath }}
          - name: ca-certs
            mountPath: "/tmp/certs"
      {{- end }}
    {{- if or .Values.pdnServer.customInitContainers .Values.global.customInitContainers }}
{{ tpl (include "pdn-server.customInitContainers" .)  . | indent 6 }}
    {{- end }}
      {{- if .Values.hostAliases }}
      hostAliases:
{{ toYaml .Values.hostAliases | indent 6 }}
      {{- end }}
      containers:
      - name: {{ .Values.pdnServer.name }}
        image: {{ include "pdn-server.getImageInfoByValue" (list $ "pdnServer") }}
        imagePullPolicy: {{ .Values.pdnServer.image.imagePullPolicy }}
        securityContext:
          runAsNonRoot: true
          runAsUser: {{ .Values.pdnServer.uid }}
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - NET_RAW
        command:
          - '/bin/bash'
          - '-c'
          - |
          {{- with .Values.pdnServer.preStartCommand }}
            echo "Running custom pdnserver preStartCommand command";
            {{ tpl . $ }};
          {{- end }}
          {{- with .Values.pdnServer.preStartCommand }}
            echo "Running custom pdnserver preStartCommand command";
            {{ tpl . $ }};
          {{- end }}
            exec /opt/jfrog/pdnserver/app/pdnserver/bin/pdnserver.sh;
        env:
        - name: JF_SHARED_NODE_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        ports:
          - name: insecure-grpc
            containerPort: {{ .Values.pdnServer.insecurePort }}
          - name: secure-grpc
            containerPort: {{ .Values.pdnServer.port }}
        volumeMounts:
        - name: pdnserver-data
          mountPath: {{ .Values.pdnServer.persistence.mountPath | quote }}
      {{- if or .Values.pdnServer.customVolumeMounts .Values.global.customVolumeMounts }}
{{ tpl (include "pdn-server.customVolumeMounts" .) . | indent 8 }}
      {{- end }}
        resources:
{{ toYaml .Values.pdnServer.resources | indent 10 }}
      {{- if .Values.pdnServer.startupProbe.enabled }}
        startupProbe:
{{ tpl .Values.pdnServer.startupProbe.config . | indent 10 }}
      {{- end }}
      {{- if .Values.pdnServer.livenessProbe.enabled }}
        livenessProbe:
{{ tpl .Values.pdnServer.livenessProbe.config . | indent 10 }}
      {{- end }}
      - name: {{ .Values.router.name }}
        image: {{ include "pdn-server.getImageInfoByValue" (list $ "router") }}
        imagePullPolicy: {{ .Values.router.image.imagePullPolicy }}
        securityContext:
          runAsNonRoot: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - NET_RAW
        command:
          - '/bin/bash'
          - '-c'
          - >
            exec /opt/jfrog/router/app/bin/entrypoint-router.sh;
        env:
        - name: JF_ROUTER_TOPOLOGY_LOCAL_REQUIREDSERVICETYPES
          value: {{ include "pdn-server.router.requiredServiceTypes" . }}
        ports:
          - name: http-router
            containerPort: {{ .Values.router.internalPort }}
        volumeMounts:
        - name: pdnserver-data
          mountPath: {{ .Values.router.persistence.mountPath | quote }}
        {{- with .Values.router.customVolumeMounts }}
{{ tpl . $ | indent 8 }}
        {{- end }}
        resources:
{{ toYaml .Values.router.resources | indent 10 }}
{{- if .Values.router.startupProbe.enabled }}
        startupProbe:
{{ tpl .Values.router.startupProbe.config . | indent 10 }}
{{- end }}
{{- if .Values.router.livenessProbe.enabled }}
        livenessProbe:
{{ tpl .Values.router.livenessProbe.config . | indent 10 }}
{{- end }}
{{- if .Values.router.readinessProbe.enabled }}
        readinessProbe:
{{ tpl .Values.router.readinessProbe.config . | indent 10 }}
{{- end }}
      - name: {{ .Values.observability.name }}
        image: {{ include "pdn-server.getImageInfoByValue" (list . "observability") }}
        imagePullPolicy: {{ .Values.observability.image.imagePullPolicy }}
        securityContext:
          runAsNonRoot: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - NET_RAW
        command:
          - '/bin/sh'
          - '-c'
          - >
            exec /opt/jfrog/observability/app/bin/entrypoint-observability.sh;
        volumeMounts:
        - name: pdnserver-data
          mountPath: "{{ .Values.observability.persistence.mountPath }}"
        resources:
{{ toYaml .Values.observability.resources | indent 10 }}
      {{- if .Values.observability.startupProbe.enabled }}
        startupProbe:
{{ tpl .Values.observability.startupProbe.config . | indent 10 }}
      {{- end }}
      {{- if .Values.observability.livenessProbe.enabled }}
        livenessProbe:
{{ tpl .Values.observability.livenessProbe.config . | indent 10 }}
      {{- end }}
      {{- $name := .Values.pdnServer.name }}
      {{- $mountPath := .Values.pdnServer.persistence.mountPath }}
      {{- range .Values.pdnServer.loggers }}
      - name: {{ $name }}-{{ . | replace "_" "-" | replace "." "-" }}
        image: {{ include "pdn-server.getImageInfoByValue" (list $ "logger") }}
        command:
          - tail
        args:
          - '-F'
          - '{{ $mountPath }}/logs/{{ . }}'
        volumeMounts:
          - name: pdnserver-data
            mountPath: {{ $mountPath }}
        resources:
{{ toYaml $.Values.pdnServer.loggersResources | indent 10 }}
      {{- end }}
      {{- if .Values.filebeat.enabled }}
      - name: {{ .Values.filebeat.name }}
        image: "{{ .Values.filebeat.image.repository }}:{{ .Values.filebeat.image.version }}"
        imagePullPolicy: {{ .Values.filebeat.image.pullPolicy }}
        securityContext:
          runAsNonRoot: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - NET_RAW
        args:
        - "-e"
        - "-E"
        - "http.enabled=true"
        volumeMounts:
        - name: filebeat-config
          mountPath: /usr/share/filebeat/filebeat.yml
          readOnly: true
          subPath: filebeat.yml
        - name: pdnserver-data
          mountPath: "{{ .Values.pdnServer.persistence.mountPath }}"
        livenessProbe:
{{ toYaml .Values.filebeat.livenessProbe | indent 10 }}
        readinessProbe:
{{ toYaml .Values.filebeat.readinessProbe | indent 10 }}
        resources:
{{ toYaml .Values.filebeat.resources | indent 10 }}
        terminationGracePeriodSeconds: {{ .Values.terminationGracePeriod }}
      {{- end }}
    {{- if or .Values.pdnServer.nodeSelector .Values.global.nodeSelector }}
{{ tpl (include "pdn-server.nodeSelector" .) . | indent 6 }}
    {{- end }}
    {{- if .Values.pdnServer.affinity }}
    {{- with .Values.pdnServer.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- else if eq .Values.pdnServer.podAntiAffinity.type "soft" }}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                topologyKey: {{ .Values.pdnServer.podAntiAffinity.topologyKey }}
                labelSelector:
                  matchLabels:
                    app: {{ template "pdn-server.name" . }}
                    release: {{ .Release.Name }}
    {{- else if eq .Values.pdnServer.podAntiAffinity.type "hard" }}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - topologyKey: {{ .Values.pdnServer.podAntiAffinity.topologyKey }}
              labelSelector:
                matchLabels:
                  app: {{ template "pdn-server.name" . }}
                  release: {{ .Release.Name }}
    {{- end }}
    {{- with .Values.pdnServer.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}
      volumes:
      {{- if or .Values.pdnServer.customCertificates.enabled .Values.global.customCertificates.enabled }}
      - name: ca-certs
        secret:
          secretName: {{ default .Values.global.customCertificates.certificateSecretName .Values.pdnServer.customCertificates.certificateSecretName }}
      {{- end }}
      {{- if or .Values.pdnServer.customVolumes .Values.global.customVolumes }}
{{ tpl (include "pdn-server.customVolumes" .) . | indent 6 }}
      {{- end }}
      - name: pdnserver-data
        emptyDir: {}
      {{- if or .Values.systemYamlOverride.existingSecret .Values.pdnServer.systemYaml }}
      - name: systemyaml
        secret:
          secretName: {{ default (printf "%s-%s" (include "pdn-server.fullname" .) "systemyaml") .Values.systemYamlOverride.existingSecret }}
      {{- end }}
      {{- if .Values.filebeat.enabled }}
      - name: filebeat-config
        configMap:
          name: {{ template "pdn-server.fullname" . }}-filebeat-config
      {{- end }}
      {{- if .Values.pdnServer.configMaps }}
      - name: pdnserver-configmaps
        configMap:
          name: {{ template "pdn-server.fullname" . }}-configmaps
      {{- end }}
