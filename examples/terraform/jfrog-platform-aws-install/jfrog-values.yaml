## Custom values for the JFrog Platform Helm Chart

global:
  ## IMPORTANT: Artifactory masterKey and joinKey are immutable and should not be changed after the first installation.
  # Generate a random join key with 'openssl rand -hex 32'
  joinKey: AAAEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE456
  # Generate a random master key with 'openssl rand -hex 32'
  masterKey: aaabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb456

  # Since we are using an external postgresql, skip the initDBCreation
  database:
    initDBCreation: false

# Disable the PostgreSQL deployment
postgresql:
  enabled: false

artifactory:
  artifactory:

    ## To provide support for HA
    extraEnvironmentVariables:
      - name : JF_SHARED_NODE_HAENABLED
        value: "true"

    ## Artifactory to use S3 for filestore
    persistence:
      enabled: false
      type: s3-storage-v3-direct
      awsS3V3:
        testConnection: false
        endpoint: s3.amazonaws.com
        path: artifactory/filestore
        useInstanceCredentials: true

    ## Require multiple Artifactory pods to run on separate nodes
    podAntiAffinity:
      type: "hard"

    ## Run on nodes marked with the label "group=artifactory"
    nodeSelector:
      group: "artifactory"

  ## Nginx
  nginx:
    disableProxyBuffering: true

    ## Logs to stdout and stderr
    logs:
      stderr: true
      stdout: true
      level: warn

    ## Run on nodes marked with the label "group=nginx"
    nodeSelector:
      group: "nginx"

    service:
      ## Use an NLB for the Nginx service for better performance
      annotations:
        service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
        service.beta.kubernetes.io/aws-load-balancer-nlb-target-type: "instance"
        service.beta.kubernetes.io/aws-load-balancer-scheme: "internet-facing"
        service.beta.kubernetes.io/aws-load-balancer-healthcheck-protocol: "TCP"
        service.beta.kubernetes.io/aws-load-balancer-healthcheck-port: "traffic-port"

  ## Don't use the PostgreSQL chart. Artifactory will use the RDS instance created by Terraform.
  postgresql:
    enabled: false

  database:
    type: postgresql
    driver: org.postgresql.Driver

  databaseUpgradeReady: true

# Enable Xray and JAS
xray:
  enabled: true
  unifiedUpgradeAllowed: true
  common:
    persistence:
      enabled: false

  ## Don't use the PostgreSQL chart. Xray will use the RDS instance created by Terraform.
  postgresql:
    enabled: false

  serviceAccount:
    create: true
  rbac:
    create: true

  ## Run on nodes marked with the label "group=xray"
  global:
    nodeSelector:
      group: "xray"

# RabbitMQ is required for Xray
rabbitmq:
  enabled: true

  # Run on nodes marked with the label "group=xray"
  nodeSelector:
    group: "xray"

# Catalog is enabled
catalog:
  enabled: true

# Disable other services
distribution:
  enabled: false
